{
  "rss": {
    "-xmlns:excerpt": "http://wordpress.org/export/1.2/excerpt/",
    "-xmlns:content": "http://purl.org/rss/1.0/modules/content/",
    "-xmlns:wfw": "http://wellformedweb.org/CommentAPI/",
    "-xmlns:dc": "http://purl.org/dc/elements/1.1/",
    "-xmlns:wp": "http://wordpress.org/export/1.2/",
    "-version": "2.0",
    "channel": {
      "title": "Eduardo Marin Izquierdo",
      "link": "http://eduardomarin.es/blog",
      "description": "Eduardo Marín Izquierdo",
      "pubDate": "Sun, 19 Jan 2014 11:56:34 +0000",
      "language": "en-US",
      "wp:wxr_version": "1.2",
      "wp:base_site_url": "http://eduardomarin.es/blog",
      "wp:base_blog_url": "http://eduardomarin.es/blog",
      "wp:author": {
        "wp:author_id": "1",
        "wp:author_login": "edu",
        "wp:author_email": "e.marin.izquierdo@gmail.com",
        "wp:author_display_name": "edu"
      },
      "wp:category": [
        {
          "wp:term_id": "2",
          "wp:category_nicename": "802-15-4",
          "wp:cat_name": "802.15.4"
        },
        {
          "wp:term_id": "3",
          "wp:category_nicename": "arduino",
          "wp:cat_name": "arduino"
        },
        {
          "wp:term_id": "4",
          "wp:category_nicename": "html5",
          "wp:cat_name": "html5"
        },
        {
          "wp:term_id": "5",
          "wp:category_nicename": "javascript",
          "wp:cat_name": "javascript"
        },
        {
          "wp:term_id": "6",
          "wp:category_nicename": "jquery",
          "wp:cat_name": "jquery"
        },
        {
          "wp:term_id": "7",
          "wp:category_nicename": "mixim",
          "wp:cat_name": "mixim"
        },
        {
          "wp:term_id": "8",
          "wp:category_nicename": "omnet",
          "wp:cat_name": "omnet"
        },
        {
          "wp:term_id": "9",
          "wp:category_nicename": "sacar",
          "wp:cat_name": "sacar"
        },
        {
          "wp:term_id": "10",
          "wp:category_nicename": "sin-categoria",
          "wp:cat_name": "Sin categoría"
        },
        {
          "wp:term_id": "11",
          "wp:category_nicename": "sommer",
          "wp:cat_name": "sommer"
        },
        {
          "wp:term_id": "12",
          "wp:category_nicename": "sublime",
          "wp:cat_name": "sublime"
        },
        {
          "wp:term_id": "13",
          "wp:category_nicename": "sumo",
          "wp:cat_name": "sumo"
        },
        {
          "wp:term_id": "1",
          "wp:category_nicename": "uncategorized",
          "wp:cat_name": "Uncategorized"
        },
        {
          "wp:term_id": "14",
          "wp:category_nicename": "v2v",
          "wp:cat_name": "v2v"
        },
        {
          "wp:term_id": "15",
          "wp:category_nicename": "vanet",
          "wp:cat_name": "vanet"
        },
        {
          "wp:term_id": "16",
          "wp:category_nicename": "web-develop",
          "wp:cat_name": "web develop"
        },
        {
          "wp:term_id": "17",
          "wp:category_nicename": "xbee",
          "wp:cat_name": "xbee"
        },
        {
          "wp:term_id": "18",
          "wp:category_nicename": "zigbee",
          "wp:cat_name": "zigbee"
        }
      ],
      "wp:term": {
        "wp:term_id": "19",
        "wp:term_taxonomy": "nav_menu",
        "wp:term_slug": "principal",
        "wp:term_name": "principal"
      },
      "generator": "http://wordpress.org/?v=3.7.1",
      "item": [
        {
          "title": "omnetpp",
          "link": "http://eduardomarin.es/blog/?attachment_id=67",
          "pubDate": "Wed, 27 Jul 2011 16:38:54 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/07/omnetpp.jpg"
          },
          "wp:post_id": "67",
          "wp:post_date": "2011-07-27 16:38:54",
          "wp:post_date_gmt": "2011-07-27 16:38:54",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "omnetpp",
          "wp:status": "inherit",
          "wp:post_parent": "57",
          "wp:menu_order": "0",
          "wp:post_type": "attachment",
          "wp:is_sticky": "0",
          "wp:attachment_url": "http://eduardomarin.es/wp-content/uploads/2011/07/omnetpp.jpg",
          "wp:postmeta": [
            {
              "wp:meta_key": "_wp_attached_file",
              "wp:meta_value": "2011/07/omnetpp.jpg"
            },
            {
              "wp:meta_key": "_wp_attachment_metadata",
              "wp:meta_value": "a:5:{s:5:\"width\";i:493;s:6:\"height\";i:323;s:4:\"file\";s:19:\"2011/07/omnetpp.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"omnetpp-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"omnetpp-300x196.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:196;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:19:\"omnetpp-493x270.jpg\";s:5:\"width\";i:493;s:6:\"height\";i:270;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}"
            }
          ]
        },
        {
          "title": "arquitectura_802154",
          "link": "http://eduardomarin.es/blog/?attachment_id=70",
          "pubDate": "Wed, 27 Jul 2011 16:57:03 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/07/arquitectura_802154.gif"
          },
          "wp:post_id": "70",
          "wp:post_date": "2011-07-27 16:57:03",
          "wp:post_date_gmt": "2011-07-27 16:57:03",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "arquitectura_802154",
          "wp:status": "inherit",
          "wp:post_parent": "69",
          "wp:menu_order": "0",
          "wp:post_type": "attachment",
          "wp:is_sticky": "0",
          "wp:attachment_url": "http://eduardomarin.es/wp-content/uploads/2011/07/arquitectura_802154.gif",
          "wp:postmeta": [
            {
              "wp:meta_key": "_wp_attached_file",
              "wp:meta_value": "2011/07/arquitectura_802154.gif"
            },
            {
              "wp:meta_key": "_wp_attachment_metadata",
              "wp:meta_value": "a:5:{s:5:\"width\";i:450;s:6:\"height\";i:322;s:4:\"file\";s:31:\"2011/07/arquitectura_802154.gif\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:31:\"arquitectura_802154-150x150.gif\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/gif\";}s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"arquitectura_802154-300x214.gif\";s:5:\"width\";i:300;s:6:\"height\";i:214;s:9:\"mime-type\";s:9:\"image/gif\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:31:\"arquitectura_802154-450x270.gif\";s:5:\"width\";i:450;s:6:\"height\";i:270;s:9:\"mime-type\";s:9:\"image/gif\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}"
            }
          ]
        },
        {
          "title": "s8ebqy4RjmmvnwQUvGp3XOg",
          "link": "http://eduardomarin.es/blog/?attachment_id=106",
          "pubDate": "Wed, 24 Aug 2011 18:20:15 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/08/s8ebqy4RjmmvnwQUvGp3XOg.png"
          },
          "wp:post_id": "106",
          "wp:post_date": "2011-08-24 18:20:15",
          "wp:post_date_gmt": "2011-08-24 18:20:15",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "s8ebqy4rjmmvnwquvgp3xog",
          "wp:status": "inherit",
          "wp:post_parent": "96",
          "wp:menu_order": "0",
          "wp:post_type": "attachment",
          "wp:is_sticky": "0",
          "wp:attachment_url": "http://eduardomarin.es/wp-content/uploads/2011/08/s8ebqy4RjmmvnwQUvGp3XOg.png",
          "wp:postmeta": [
            {
              "wp:meta_key": "_wp_attached_file",
              "wp:meta_value": "2011/08/s8ebqy4RjmmvnwQUvGp3XOg.png"
            },
            {
              "wp:meta_key": "_wp_attachment_metadata",
              "wp:meta_value": "a:5:{s:5:\"width\";i:473;s:6:\"height\";i:466;s:4:\"file\";s:35:\"2011/08/s8ebqy4RjmmvnwQUvGp3XOg.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:35:\"s8ebqy4RjmmvnwQUvGp3XOg-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:35:\"s8ebqy4RjmmvnwQUvGp3XOg-300x295.png\";s:5:\"width\";i:300;s:6:\"height\";i:295;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:35:\"s8ebqy4RjmmvnwQUvGp3XOg-473x270.png\";s:5:\"width\";i:473;s:6:\"height\";i:270;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}"
            }
          ]
        },
        {
          "title": "sPvVDHhm8_oEQo4xOX7p99w",
          "link": "http://eduardomarin.es/blog/?attachment_id=107",
          "pubDate": "Wed, 24 Aug 2011 18:21:26 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/08/sPvVDHhm8_oEQo4xOX7p99w.png"
          },
          "wp:post_id": "107",
          "wp:post_date": "2011-08-24 18:21:26",
          "wp:post_date_gmt": "2011-08-24 18:21:26",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "spvvdhhm8_oeqo4xox7p99w",
          "wp:status": "inherit",
          "wp:post_parent": "96",
          "wp:menu_order": "0",
          "wp:post_type": "attachment",
          "wp:is_sticky": "0",
          "wp:attachment_url": "http://eduardomarin.es/wp-content/uploads/2011/08/sPvVDHhm8_oEQo4xOX7p99w.png",
          "wp:postmeta": [
            {
              "wp:meta_key": "_wp_attached_file",
              "wp:meta_value": "2011/08/sPvVDHhm8_oEQo4xOX7p99w.png"
            },
            {
              "wp:meta_key": "_wp_attachment_metadata",
              "wp:meta_value": "a:5:{s:5:\"width\";i:433;s:6:\"height\";i:91;s:4:\"file\";s:35:\"2011/08/sPvVDHhm8_oEQo4xOX7p99w.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:34:\"sPvVDHhm8_oEQo4xOX7p99w-150x91.png\";s:5:\"width\";i:150;s:6:\"height\";i:91;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:34:\"sPvVDHhm8_oEQo4xOX7p99w-300x63.png\";s:5:\"width\";i:300;s:6:\"height\";i:63;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}"
            }
          ]
        },
        {
          "title": "sADfBr7OuWgSKzrtKSsJMlg",
          "link": "http://eduardomarin.es/blog/?attachment_id=110",
          "pubDate": "Wed, 24 Aug 2011 18:26:14 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/08/sADfBr7OuWgSKzrtKSsJMlg.png"
          },
          "wp:post_id": "110",
          "wp:post_date": "2011-08-24 18:26:14",
          "wp:post_date_gmt": "2011-08-24 18:26:14",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "sadfbr7ouwgskzrtkssjmlg",
          "wp:status": "inherit",
          "wp:post_parent": "86",
          "wp:menu_order": "0",
          "wp:post_type": "attachment",
          "wp:is_sticky": "0",
          "wp:attachment_url": "http://eduardomarin.es/wp-content/uploads/2011/08/sADfBr7OuWgSKzrtKSsJMlg.png",
          "wp:postmeta": [
            {
              "wp:meta_key": "_wp_attached_file",
              "wp:meta_value": "2011/08/sADfBr7OuWgSKzrtKSsJMlg.png"
            },
            {
              "wp:meta_key": "_wp_attachment_metadata",
              "wp:meta_value": "a:5:{s:5:\"width\";i:482;s:6:\"height\";i:341;s:4:\"file\";s:35:\"2011/08/sADfBr7OuWgSKzrtKSsJMlg.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:35:\"sADfBr7OuWgSKzrtKSsJMlg-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:35:\"sADfBr7OuWgSKzrtKSsJMlg-300x212.png\";s:5:\"width\";i:300;s:6:\"height\";i:212;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:35:\"sADfBr7OuWgSKzrtKSsJMlg-482x270.png\";s:5:\"width\";i:482;s:6:\"height\";i:270;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}"
            }
          ]
        },
        {
          "title": "sFSUGnoOREnvrEbv3KNoHpA",
          "link": "http://eduardomarin.es/blog/?attachment_id=111",
          "pubDate": "Wed, 24 Aug 2011 18:27:03 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/08/sFSUGnoOREnvrEbv3KNoHpA.png"
          },
          "wp:post_id": "111",
          "wp:post_date": "2011-08-24 18:27:03",
          "wp:post_date_gmt": "2011-08-24 18:27:03",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "sfsugnoorenvrebv3knohpa",
          "wp:status": "inherit",
          "wp:post_parent": "86",
          "wp:menu_order": "0",
          "wp:post_type": "attachment",
          "wp:is_sticky": "0",
          "wp:attachment_url": "http://eduardomarin.es/wp-content/uploads/2011/08/sFSUGnoOREnvrEbv3KNoHpA.png",
          "wp:postmeta": [
            {
              "wp:meta_key": "_wp_attached_file",
              "wp:meta_value": "2011/08/sFSUGnoOREnvrEbv3KNoHpA.png"
            },
            {
              "wp:meta_key": "_wp_attachment_metadata",
              "wp:meta_value": "a:5:{s:5:\"width\";i:482;s:6:\"height\";i:341;s:4:\"file\";s:35:\"2011/08/sFSUGnoOREnvrEbv3KNoHpA.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:35:\"sFSUGnoOREnvrEbv3KNoHpA-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:35:\"sFSUGnoOREnvrEbv3KNoHpA-300x212.png\";s:5:\"width\";i:300;s:6:\"height\";i:212;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:35:\"sFSUGnoOREnvrEbv3KNoHpA-482x270.png\";s:5:\"width\";i:482;s:6:\"height\";i:270;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}"
            }
          ]
        },
        {
          "title": "s31FKpqwMIn7PXv_Z8gekKA",
          "link": "http://eduardomarin.es/blog/?attachment_id=112",
          "pubDate": "Wed, 24 Aug 2011 18:27:44 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/08/s31FKpqwMIn7PXv_Z8gekKA.png"
          },
          "wp:post_id": "112",
          "wp:post_date": "2011-08-24 18:27:44",
          "wp:post_date_gmt": "2011-08-24 18:27:44",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "s31fkpqwmin7pxv_z8gekka",
          "wp:status": "inherit",
          "wp:post_parent": "86",
          "wp:menu_order": "0",
          "wp:post_type": "attachment",
          "wp:is_sticky": "0",
          "wp:attachment_url": "http://eduardomarin.es/wp-content/uploads/2011/08/s31FKpqwMIn7PXv_Z8gekKA.png",
          "wp:postmeta": [
            {
              "wp:meta_key": "_wp_attached_file",
              "wp:meta_value": "2011/08/s31FKpqwMIn7PXv_Z8gekKA.png"
            },
            {
              "wp:meta_key": "_wp_attachment_metadata",
              "wp:meta_value": "a:5:{s:5:\"width\";i:473;s:6:\"height\";i:466;s:4:\"file\";s:35:\"2011/08/s31FKpqwMIn7PXv_Z8gekKA.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:35:\"s31FKpqwMIn7PXv_Z8gekKA-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:35:\"s31FKpqwMIn7PXv_Z8gekKA-300x295.png\";s:5:\"width\";i:300;s:6:\"height\";i:295;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:35:\"s31FKpqwMIn7PXv_Z8gekKA-473x270.png\";s:5:\"width\";i:473;s:6:\"height\";i:270;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}"
            }
          ]
        },
        {
          "title": "sy1HRLne5BL7A3agQHdg5MQ",
          "link": "http://eduardomarin.es/blog/?attachment_id=116",
          "pubDate": "Wed, 24 Aug 2011 18:31:09 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/07/sy1HRLne5BL7A3agQHdg5MQ.png"
          },
          "wp:post_id": "116",
          "wp:post_date": "2011-08-24 18:31:09",
          "wp:post_date_gmt": "2011-08-24 18:31:09",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "sy1hrlne5bl7a3agqhdg5mq",
          "wp:status": "inherit",
          "wp:post_parent": "82",
          "wp:menu_order": "0",
          "wp:post_type": "attachment",
          "wp:is_sticky": "0",
          "wp:attachment_url": "http://eduardomarin.es/wp-content/uploads/2011/07/sy1HRLne5BL7A3agQHdg5MQ.png",
          "wp:postmeta": [
            {
              "wp:meta_key": "_wp_attached_file",
              "wp:meta_value": "2011/07/sy1HRLne5BL7A3agQHdg5MQ.png"
            },
            {
              "wp:meta_key": "_wp_attachment_metadata",
              "wp:meta_value": "a:5:{s:5:\"width\";i:341;s:6:\"height\";i:34;s:4:\"file\";s:35:\"2011/07/sy1HRLne5BL7A3agQHdg5MQ.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:34:\"sy1HRLne5BL7A3agQHdg5MQ-150x34.png\";s:5:\"width\";i:150;s:6:\"height\";i:34;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:34:\"sy1HRLne5BL7A3agQHdg5MQ-300x29.png\";s:5:\"width\";i:300;s:6:\"height\";i:29;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}"
            }
          ]
        },
        {
          "title": "grid_manhattan",
          "link": "http://eduardomarin.es/blog/?attachment_id=123",
          "pubDate": "Sun, 28 Aug 2011 17:44:47 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/08/grid_manhattan.png"
          },
          "wp:post_id": "123",
          "wp:post_date": "2011-08-28 17:44:47",
          "wp:post_date_gmt": "2011-08-28 17:44:47",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "grid_manhattan",
          "wp:status": "inherit",
          "wp:post_parent": "119",
          "wp:menu_order": "0",
          "wp:post_type": "attachment",
          "wp:is_sticky": "0",
          "wp:attachment_url": "http://eduardomarin.es/wp-content/uploads/2011/08/grid_manhattan.png",
          "wp:postmeta": [
            {
              "wp:meta_key": "_wp_attached_file",
              "wp:meta_value": "2011/08/grid_manhattan.png"
            },
            {
              "wp:meta_key": "_wp_attachment_metadata",
              "wp:meta_value": "a:5:{s:5:\"width\";i:393;s:6:\"height\";i:393;s:4:\"file\";s:26:\"2011/08/grid_manhattan.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:26:\"grid_manhattan-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:26:\"grid_manhattan-300x300.png\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:26:\"grid_manhattan-393x270.png\";s:5:\"width\";i:393;s:6:\"height\";i:270;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}"
            }
          ]
        },
        {
          "title": "esquema_vehiculos",
          "link": "http://eduardomarin.es/blog/?attachment_id=152",
          "pubDate": "Wed, 05 Oct 2011 21:03:45 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/10/esquema_vehiculos.png"
          },
          "wp:post_id": "152",
          "wp:post_date": "2011-10-05 21:03:45",
          "wp:post_date_gmt": "2011-10-05 21:03:45",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "esquema_vehiculos",
          "wp:status": "inherit",
          "wp:post_parent": "149",
          "wp:menu_order": "0",
          "wp:post_type": "attachment",
          "wp:is_sticky": "0",
          "wp:attachment_url": "http://eduardomarin.es/wp-content/uploads/2011/10/esquema_vehiculos.png",
          "wp:postmeta": [
            {
              "wp:meta_key": "_wp_attached_file",
              "wp:meta_value": "2011/10/esquema_vehiculos.png"
            },
            {
              "wp:meta_key": "_wp_attachment_metadata",
              "wp:meta_value": "a:5:{s:5:\"width\";i:574;s:6:\"height\";i:157;s:4:\"file\";s:29:\"2011/10/esquema_vehiculos.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"esquema_vehiculos-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:28:\"esquema_vehiculos-300x82.png\";s:5:\"width\";i:300;s:6:\"height\";i:82;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}"
            }
          ]
        },
        {
          "title": "formula_01",
          "link": "http://eduardomarin.es/blog/?attachment_id=153",
          "pubDate": "Wed, 05 Oct 2011 21:05:30 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/10/formula_01.jpg"
          },
          "wp:post_id": "153",
          "wp:post_date": "2011-10-05 21:05:30",
          "wp:post_date_gmt": "2011-10-05 21:05:30",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "formula_01",
          "wp:status": "inherit",
          "wp:post_parent": "149",
          "wp:menu_order": "0",
          "wp:post_type": "attachment",
          "wp:is_sticky": "0",
          "wp:attachment_url": "http://eduardomarin.es/wp-content/uploads/2011/10/formula_01.jpg",
          "wp:postmeta": [
            {
              "wp:meta_key": "_wp_attached_file",
              "wp:meta_value": "2011/10/formula_01.jpg"
            },
            {
              "wp:meta_key": "_wp_attachment_metadata",
              "wp:meta_value": "a:5:{s:5:\"width\";i:192;s:6:\"height\";i:30;s:4:\"file\";s:22:\"2011/10/formula_01.jpg\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"formula_01-150x30.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:30;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}"
            }
          ]
        },
        {
          "title": "formula_02",
          "link": "http://eduardomarin.es/blog/?attachment_id=154",
          "pubDate": "Wed, 05 Oct 2011 21:06:07 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/10/formula_02.jpg"
          },
          "wp:post_id": "154",
          "wp:post_date": "2011-10-05 21:06:07",
          "wp:post_date_gmt": "2011-10-05 21:06:07",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "formula_02",
          "wp:status": "inherit",
          "wp:post_parent": "149",
          "wp:menu_order": "0",
          "wp:post_type": "attachment",
          "wp:is_sticky": "0",
          "wp:attachment_url": "http://eduardomarin.es/wp-content/uploads/2011/10/formula_02.jpg",
          "wp:postmeta": [
            {
              "wp:meta_key": "_wp_attached_file",
              "wp:meta_value": "2011/10/formula_02.jpg"
            },
            {
              "wp:meta_key": "_wp_attachment_metadata",
              "wp:meta_value": "a:5:{s:5:\"width\";i:146;s:6:\"height\";i:30;s:4:\"file\";s:22:\"2011/10/formula_02.jpg\";s:5:\"sizes\";a:0:{}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}"
            }
          ]
        },
        {
          "title": "seg_01",
          "link": "http://eduardomarin.es/blog/?attachment_id=161",
          "pubDate": "Wed, 02 Nov 2011 20:46:29 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/11/seg_01.png"
          },
          "wp:post_id": "161",
          "wp:post_date": "2011-11-02 20:46:29",
          "wp:post_date_gmt": "2011-11-02 20:46:29",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "seg_01",
          "wp:status": "inherit",
          "wp:post_parent": "158",
          "wp:menu_order": "0",
          "wp:post_type": "attachment",
          "wp:is_sticky": "0",
          "wp:attachment_url": "http://eduardomarin.es/wp-content/uploads/2011/11/seg_01.png",
          "wp:postmeta": [
            {
              "wp:meta_key": "_wp_attached_file",
              "wp:meta_value": "2011/11/seg_01.png"
            },
            {
              "wp:meta_key": "_wp_attachment_metadata",
              "wp:meta_value": "a:5:{s:5:\"width\";i:239;s:6:\"height\";i:217;s:4:\"file\";s:18:\"2011/11/seg_01.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:18:\"seg_01-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}"
            }
          ]
        },
        {
          "title": "seg_01",
          "link": "http://eduardomarin.es/blog/?attachment_id=162",
          "pubDate": "Wed, 02 Nov 2011 20:47:20 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/11/seg_011.png"
          },
          "wp:post_id": "162",
          "wp:post_date": "2011-11-02 20:47:20",
          "wp:post_date_gmt": "2011-11-02 20:47:20",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "seg_01-2",
          "wp:status": "inherit",
          "wp:post_parent": "158",
          "wp:menu_order": "0",
          "wp:post_type": "attachment",
          "wp:is_sticky": "0",
          "wp:attachment_url": "http://eduardomarin.es/wp-content/uploads/2011/11/seg_011.png",
          "wp:postmeta": [
            {
              "wp:meta_key": "_wp_attached_file",
              "wp:meta_value": "2011/11/seg_011.png"
            },
            {
              "wp:meta_key": "_wp_attachment_metadata",
              "wp:meta_value": "a:5:{s:5:\"width\";i:239;s:6:\"height\";i:217;s:4:\"file\";s:19:\"2011/11/seg_011.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"seg_011-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}"
            }
          ]
        },
        {
          "title": "seg_02",
          "link": "http://eduardomarin.es/blog/?attachment_id=163",
          "pubDate": "Wed, 02 Nov 2011 20:48:00 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/11/seg_02.png"
          },
          "wp:post_id": "163",
          "wp:post_date": "2011-11-02 20:48:00",
          "wp:post_date_gmt": "2011-11-02 20:48:00",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "seg_02",
          "wp:status": "inherit",
          "wp:post_parent": "158",
          "wp:menu_order": "0",
          "wp:post_type": "attachment",
          "wp:is_sticky": "0",
          "wp:attachment_url": "http://eduardomarin.es/wp-content/uploads/2011/11/seg_02.png",
          "wp:postmeta": [
            {
              "wp:meta_key": "_wp_attached_file",
              "wp:meta_value": "2011/11/seg_02.png"
            },
            {
              "wp:meta_key": "_wp_attachment_metadata",
              "wp:meta_value": "a:5:{s:5:\"width\";i:332;s:6:\"height\";i:86;s:4:\"file\";s:18:\"2011/11/seg_02.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:17:\"seg_02-150x86.png\";s:5:\"width\";i:150;s:6:\"height\";i:86;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:17:\"seg_02-300x77.png\";s:5:\"width\";i:300;s:6:\"height\";i:77;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}"
            }
          ]
        },
        {
          "title": "seg_03",
          "link": "http://eduardomarin.es/blog/?attachment_id=164",
          "pubDate": "Wed, 02 Nov 2011 20:48:26 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/11/seg_03.png"
          },
          "wp:post_id": "164",
          "wp:post_date": "2011-11-02 20:48:26",
          "wp:post_date_gmt": "2011-11-02 20:48:26",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "seg_03",
          "wp:status": "inherit",
          "wp:post_parent": "158",
          "wp:menu_order": "0",
          "wp:post_type": "attachment",
          "wp:is_sticky": "0",
          "wp:attachment_url": "http://eduardomarin.es/wp-content/uploads/2011/11/seg_03.png",
          "wp:postmeta": [
            {
              "wp:meta_key": "_wp_attached_file",
              "wp:meta_value": "2011/11/seg_03.png"
            },
            {
              "wp:meta_key": "_wp_attachment_metadata",
              "wp:meta_value": "a:5:{s:5:\"width\";i:332;s:6:\"height\";i:86;s:4:\"file\";s:18:\"2011/11/seg_03.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:17:\"seg_03-150x86.png\";s:5:\"width\";i:150;s:6:\"height\";i:86;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:17:\"seg_03-300x77.png\";s:5:\"width\";i:300;s:6:\"height\";i:77;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}"
            }
          ]
        },
        {
          "title": "seg_04",
          "link": "http://eduardomarin.es/blog/?attachment_id=165",
          "pubDate": "Wed, 02 Nov 2011 20:48:50 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/11/seg_04.png"
          },
          "wp:post_id": "165",
          "wp:post_date": "2011-11-02 20:48:50",
          "wp:post_date_gmt": "2011-11-02 20:48:50",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "seg_04",
          "wp:status": "inherit",
          "wp:post_parent": "158",
          "wp:menu_order": "0",
          "wp:post_type": "attachment",
          "wp:is_sticky": "0",
          "wp:attachment_url": "http://eduardomarin.es/wp-content/uploads/2011/11/seg_04.png",
          "wp:postmeta": [
            {
              "wp:meta_key": "_wp_attached_file",
              "wp:meta_value": "2011/11/seg_04.png"
            },
            {
              "wp:meta_key": "_wp_attachment_metadata",
              "wp:meta_value": "a:5:{s:5:\"width\";i:332;s:6:\"height\";i:86;s:4:\"file\";s:18:\"2011/11/seg_04.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:17:\"seg_04-150x86.png\";s:5:\"width\";i:150;s:6:\"height\";i:86;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:17:\"seg_04-300x77.png\";s:5:\"width\";i:300;s:6:\"height\";i:77;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}"
            }
          ]
        },
        {
          "title": "seg_05",
          "link": "http://eduardomarin.es/blog/?attachment_id=166",
          "pubDate": "Wed, 02 Nov 2011 20:49:08 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/11/seg_05.png"
          },
          "wp:post_id": "166",
          "wp:post_date": "2011-11-02 20:49:08",
          "wp:post_date_gmt": "2011-11-02 20:49:08",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "seg_05",
          "wp:status": "inherit",
          "wp:post_parent": "158",
          "wp:menu_order": "0",
          "wp:post_type": "attachment",
          "wp:is_sticky": "0",
          "wp:attachment_url": "http://eduardomarin.es/wp-content/uploads/2011/11/seg_05.png",
          "wp:postmeta": [
            {
              "wp:meta_key": "_wp_attached_file",
              "wp:meta_value": "2011/11/seg_05.png"
            },
            {
              "wp:meta_key": "_wp_attachment_metadata",
              "wp:meta_value": "a:5:{s:5:\"width\";i:199;s:6:\"height\";i:77;s:4:\"file\";s:18:\"2011/11/seg_05.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:17:\"seg_05-150x77.png\";s:5:\"width\";i:150;s:6:\"height\";i:77;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}"
            }
          ]
        },
        {
          "title": "seg_06",
          "link": "http://eduardomarin.es/blog/?attachment_id=167",
          "pubDate": "Wed, 02 Nov 2011 20:49:31 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/11/seg_06.png"
          },
          "wp:post_id": "167",
          "wp:post_date": "2011-11-02 20:49:31",
          "wp:post_date_gmt": "2011-11-02 20:49:31",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "seg_06",
          "wp:status": "inherit",
          "wp:post_parent": "158",
          "wp:menu_order": "0",
          "wp:post_type": "attachment",
          "wp:is_sticky": "0",
          "wp:attachment_url": "http://eduardomarin.es/wp-content/uploads/2011/11/seg_06.png",
          "wp:postmeta": [
            {
              "wp:meta_key": "_wp_attached_file",
              "wp:meta_value": "2011/11/seg_06.png"
            },
            {
              "wp:meta_key": "_wp_attachment_metadata",
              "wp:meta_value": "a:5:{s:5:\"width\";i:332;s:6:\"height\";i:86;s:4:\"file\";s:18:\"2011/11/seg_06.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:17:\"seg_06-150x86.png\";s:5:\"width\";i:150;s:6:\"height\";i:86;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:17:\"seg_06-300x77.png\";s:5:\"width\";i:300;s:6:\"height\";i:77;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}"
            }
          ]
        },
        {
          "title": "cross_domain_iframe",
          "link": "http://eduardomarin.es/blog/?attachment_id=172",
          "pubDate": "Tue, 08 Nov 2011 19:03:58 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/11/cross_domain_iframe.png"
          },
          "wp:post_id": "172",
          "wp:post_date": "2011-11-08 19:03:58",
          "wp:post_date_gmt": "2011-11-08 19:03:58",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "cross_domain_iframe",
          "wp:status": "inherit",
          "wp:post_parent": "170",
          "wp:menu_order": "0",
          "wp:post_type": "attachment",
          "wp:is_sticky": "0",
          "wp:attachment_url": "http://eduardomarin.es/wp-content/uploads/2011/11/cross_domain_iframe.png",
          "wp:postmeta": [
            {
              "wp:meta_key": "_wp_attached_file",
              "wp:meta_value": "2011/11/cross_domain_iframe.png"
            },
            {
              "wp:meta_key": "_wp_attachment_metadata",
              "wp:meta_value": "a:5:{s:5:\"width\";i:604;s:6:\"height\";i:191;s:4:\"file\";s:31:\"2011/11/cross_domain_iframe.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:31:\"cross_domain_iframe-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:30:\"cross_domain_iframe-300x94.png\";s:5:\"width\";i:300;s:6:\"height\";i:94;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}"
            }
          ]
        },
        {
          "title": "Sample Page",
          "link": "http://eduardomarin.es/blog/?page_id=2",
          "pubDate": "Tue, 31 Dec 2013 09:25:40 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin-nefele.rhcloud.com/?page_id=2"
          },
          "content:encoded": "This is an example page. It's different from a blog post because it will stay in one place and will show up in your site navigation (in most themes). Most people start with an About page that introduces them to potential site visitors. It might say something like this:

<blockquote>Hi there! I'm a bike messenger by day, aspiring actor by night, and this is my blog. I live in Los Angeles, have a great dog named Jack, and I like pi&#241;a coladas. (And gettin' caught in the rain.)</blockquote>

...or something like this:

<blockquote>The XYZ Doohickey Company was founded in 1971, and has been providing quality doohickeys to the public ever since. Located in Gotham City, XYZ employs over 2,000 people and does all kinds of awesome things for the Gotham community.</blockquote>

As a new WordPress user, you should go to <a href=\"https://eduardomarin-nefele.rhcloud.com/wp-admin/\">your dashboard</a> to delete this page and create new pages for your content. Have fun!",
          "wp:post_id": "2",
          "wp:post_date": "2013-12-31 09:25:40",
          "wp:post_date_gmt": "2013-12-31 09:25:40",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "sample-page",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "page",
          "wp:is_sticky": "0",
          "wp:postmeta": {
            "wp:meta_key": "_wp_page_template",
            "wp:meta_value": "default"
          }
        },
        {
          "title": "Instalación de Omnet++ y Miximsommer bajo Ubuntu",
          "link": "http://eduardomarin.es/blog/?p=7",
          "pubDate": "Wed, 30 Nov -0001 00:00:00 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?p=7"
          },
          "wp:post_id": "7",
          "wp:post_date": "2011-04-24 11:38:25",
          "wp:post_date_gmt": "0000-00-00 00:00:00",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:status": "draft",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "sin-categoria",
            "#cdata-section": "Sin categoría"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "hola",
          "link": "http://eduardomarin.es/blog/",
          "pubDate": "Sun, 05 Jun 2011 17:22:17 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?page_id=9"
          },
          "wp:post_id": "9",
          "wp:post_date": "2011-06-05 17:22:17",
          "wp:post_date_gmt": "2011-06-05 17:22:17",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "hola",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "page",
          "wp:is_sticky": "0",
          "wp:postmeta": [
            {
              "wp:meta_key": "_edit_last",
              "wp:meta_value": "1"
            },
            {
              "wp:meta_key": "_wp_page_template",
              "wp:meta_value": "portada.php"
            }
          ]
        },
        {
          "title": "blog",
          "link": "http://eduardomarin.es/blog/?page_id=11",
          "pubDate": "Sun, 05 Jun 2011 17:22:32 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?page_id=11"
          },
          "wp:post_id": "11",
          "wp:post_date": "2011-06-05 17:22:32",
          "wp:post_date_gmt": "2011-06-05 17:22:32",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "blog",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "page",
          "wp:is_sticky": "0",
          "wp:postmeta": [
            {
              "wp:meta_key": "_edit_last",
              "wp:meta_value": "1"
            },
            {
              "wp:meta_key": "_wp_page_template",
              "wp:meta_value": "default"
            }
          ]
        },
        {
          "title": "works",
          "link": "http://eduardomarin.es/blog/?page_id=14",
          "pubDate": "Sun, 05 Jun 2011 17:22:46 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?page_id=14"
          },
          "content:encoded": "<div style=\"width:100%; text-align:center;\"><object width=\"400\" height=\"300\"> <param name=\"flashvars\" value=\"offsite=true&lang=es-us&page_show_url=%2Fphotos%2Femarin%2Fsets%2F72157602340001045%2Fshow%2F&page_show_back_url=%2Fphotos%2Femarin%2Fsets%2F72157602340001045%2F&set_id=72157602340001045&jump_to=\"></param> <param name=\"movie\" value=\"http://www.flickr.com/apps/slideshow/show.swf?v=104087\"></param> <param name=\"allowFullScreen\" value=\"true\"></param><embed type=\"application/x-shockwave-flash\" src=\"http://www.flickr.com/apps/slideshow/show.swf?v=104087\" allowFullScreen=\"true\" flashvars=\"offsite=true&lang=es-us&page_show_url=%2Fphotos%2Femarin%2Fsets%2F72157602340001045%2Fshow%2F&page_show_back_url=%2Fphotos%2Femarin%2Fsets%2F72157602340001045%2F&set_id=72157602340001045&jump_to=\" width=\"600\" height=\"400\"></embed></object></div>",
          "wp:post_id": "14",
          "wp:post_date": "2011-06-05 17:22:46",
          "wp:post_date_gmt": "2011-06-05 17:22:46",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "works",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "page",
          "wp:is_sticky": "0",
          "wp:postmeta": [
            {
              "wp:meta_key": "_edit_last",
              "wp:meta_value": "1"
            },
            {
              "wp:meta_key": "_wp_page_template",
              "wp:meta_value": "default"
            }
          ]
        },
        {
          "title": "sobre mi",
          "link": "http://eduardomarin.es/blog/?page_id=16",
          "pubDate": "Sun, 05 Jun 2011 17:22:55 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?page_id=16"
          },
          "wp:post_id": "16",
          "wp:post_date": "2011-06-05 17:22:55",
          "wp:post_date_gmt": "2011-06-05 17:22:55",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "contacto",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "page",
          "wp:is_sticky": "0",
          "wp:postmeta": [
            {
              "wp:meta_key": "_edit_last",
              "wp:meta_value": "1"
            },
            {
              "wp:meta_key": "_wp_page_template",
              "wp:meta_value": "default"
            }
          ],
          "wp:comment": [
            {
              "wp:comment_id": "3",
              "wp:comment_author": "J.Ramón",
              "wp:comment_author_email": "jramon.ff@gmail.com",
              "wp:comment_author_url": "http://www.solarlog.es",
              "wp:comment_author_IP": "95.20.175.117",
              "wp:comment_date": "2011-09-03 16:27:39",
              "wp:comment_date_gmt": "2011-09-03 16:27:39",
              "wp:comment_content": "Hola Eduardo tengo un dell powerdge 2900 que me ha dado problemas con la cinta de copia
qué dice (por favor,compruebe que la cinta está bién untroducida y que no está protegida contra escritura.Introduzca la cinta correctamente,espere a qué ésta sea cargada y pulse intro).
como ya he cambiado el lector de cinta dos veces voy a cambiar la placa base.
Aquí viene mi pregunta; antes de cambiar la placa base tendré que copiar los parámetros de
la bios e introducirselos a la nueva placa antes de arrancar el servidor,pero no sé como hacer
esto podrías orientarme en este asunto, te estaría muy agradecido.
Un seguidor tuyo.",
              "wp:comment_approved": "1",
              "wp:comment_parent": "0",
              "wp:comment_user_id": "0"
            },
            {
              "wp:comment_id": "4",
              "wp:comment_author": "edu",
              "wp:comment_author_email": "e.marin.izquierdo@gmail.com",
              "wp:comment_author_IP": "85.49.204.234",
              "wp:comment_date": "2011-09-04 17:00:08",
              "wp:comment_date_gmt": "2011-09-04 17:00:08",
              "wp:comment_content": "Muy buenas J.Ramón, 

no estoy seguro (ya no trabajo con estos servidores), pero creo recordar que si buscas en la página Support de Dell, para el modelo en cuestión, si hay alguna actualización sobre la BIOS, el propio programa de actualización debería contener una sección de backup (floppy o USB). Entiendo que intentando realizar dicha actualización te permitiría salvar la configuración de la placa vieja, y aplicársela a la nueva realizando un downgrade sobre tu copia salvada.

Espero que puedas resolver el problema que tienes.

Un saludo.",
              "wp:comment_approved": "1",
              "wp:comment_parent": "3",
              "wp:comment_user_id": "1"
            }
          ]
        },
        {
          "title": "Version 1.1 control Linksys - Arduino",
          "link": "http://eduardomarin.es/blog/?p=24",
          "pubDate": "Mon, 06 Jun 2011 19:28:50 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?p=24"
          },
          "content:encoded": "<p>
	<span style=\"font-weight: bold;\">GU&Iacute;A: CONTROL ARDUINO - LINKSYS WRT45GL</span></p>
<div style=\"text-align: justify;\">
	<a href=\"http://perso.wanadoo.es/kayak22/arduino/IMGP3973.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" src=\"http://perso.wanadoo.es/kayak22/arduino/IMGP3973.jpg\" style=\"cursor: pointer; float: right; height: 212px; margin: 0pt 0pt 10px 10px; width: 283px;\" /></a> En las siguientes l&iacute;neas intento exponer con cierto detalle c&oacute;mo conseguir una comunicaci&oacute;n entre el router Linksys WRT45GL y la placa Arduino a trav&eacute;s de una conexi&oacute;n sobre puerto serie, todo ello controlado desde un pc con conexi&oacute;n wifi sobre el router Linksys. <span style=\"font-weight: bold;\">INTRODUCCI&Oacute;N</span> El prop&oacute;sito de la conexi&oacute;n entre estos dos dispositivos nos permite, en cierto modo, ampliar los l&iacute;mites tanto de la placa Arduino como del router Linksys. En combinaci&oacute;n m&uacute;tua, sus posiblidades abarcan, desde una relativa ampliaci&oacute;n de memoria de Arduino, como una adquisici&oacute;n de datos de forma remota usando como puente el router Linksys. Podemos, as&iacute;, mover brazos de robot (que portan webcams), hacer lecturas de diferentes tipos de sensores (temperatura, presi&oacute;n, movimiento), etc; todo ello a trav&eacute;s de una red de conexi&oacute;n, ya sea local mediante ethernet o wifi, o a trav&eacute;s de WLAN. <a href=\"http://perso.wanadoo.es/kayak22/arduino_04.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" src=\"http://perso.wanadoo.es/kayak22/arduino_04.jpg\" style=\"cursor: pointer; display: block; height: 331px; margin: 0px auto 10px; text-align: center; width: 483px;\" /></a><span style=\"font-weight: bold;\">PARTICULARIZANDO..</span><span style=\"font-weight: bold;\">.</span> Para mostrar la idea atr&aacute;s esbozada, vamos a realizar el montaje para poder controlar hasta 12 leds, y llevar a cabo una lectura de un NTC (resistencia variable con la temperatura). Implementaremos una interfaz gr&aacute;fica, sobre HTML para hacerlo m&aacute;s intuitivo y atractivo. La conexi&oacute;n con el router se basar&aacute; en la comunicaci&oacute;n sobre el puerto serie. Este aspecto requiere llevar a cabo una modificaci&oacute;n f&iacute;sica del router, pues no viene con dicho puerto implantado de f&aacute;brica, aunque s&iacute; su circuiter&iacute;a impresa. <span style=\"font-weight: bold;\">COMPONENTES</span> <a href=\"http://perso.wanadoo.es/kayak22/IMGP3994.JPG\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" src=\"http://perso.wanadoo.es/kayak22/arduino/IMGP3994.jpg\" style=\"cursor: pointer; float: right; height: 119px; margin: 0pt 0pt 10px 10px; width: 163px;\" /></a> Como dec&iacute;amos, usaremos una placa Arduino, un router Linksys WRT45GL, una termorresistencia (NTC), dos conectores DB-9 (hembra y macho), un conector para cable plano de 10 pines con cable, y una resistencia de 330 ohm. <span style=\"font-weight: bold;\">PROCESO</span><a href=\"http://perso.wanadoo.es/kayak22/arduino/IMGP3983.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" src=\"http://perso.wanadoo.es/kayak22/arduino/IMGP3983.jpg\" style=\"cursor: pointer; float: left; height: 131px; margin: 0pt 10px 10px 0pt; width: 169px;\" /></a> <a href=\"http://perso.wanadoo.es/kayak22/arduino/IMGP3985.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" src=\"http://perso.wanadoo.es/kayak22/arduino/IMGP3985.jpg\" style=\"cursor: pointer; float: left; height: 130px; margin: 0pt 10px 10px 0pt; width: 177px;\" /></a><a href=\"http://perso.wanadoo.es/kayak22/PICT028.JPG\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" src=\"http://perso.wanadoo.es/kayak22/PICT028.JPG\" style=\"cursor: pointer; float: left; height: 131px; margin: 0pt 10px 10px 0pt; width: 175px;\" /></a> En primer lugar, instalaremos el puerto serie en el router. Para ello, debemos abrir el aparato sin romperlo :-P . Desenrroscamos las antenas, ponemos el router boca abajo y empujamos hacia afuera, sobre las dos patas delanteras. En ese momento, el router pierde toda garant&iacute;a, de lo cual, yo no me hago responsable :-) Una vez abierto, debemos buscar dos puertos serigrafiados en la placa, fij&aacute;ndonos en el que tiene 10 perforaciones. Ese es el nuestro. Insertamos el conector de cable plano y soldamos con cuidado. En este momento es donde debemos identificar cada uno de los pines, para llevarlos al conector DB-9. <a href=\"http://perso.wanadoo.es/kayak22/arduino/IMGP3988.JPG\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" src=\"http://perso.wanadoo.es/kayak22/arduino/IMGP3988.jpg\" style=\"cursor: pointer; float: left; height: 130px; margin: 0pt 10px 10px 0pt; width: 169px;\" /></a><a href=\"http://perso.wanadoo.es/kayak22/arduino/IMGP3975.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" src=\"http://perso.wanadoo.es/kayak22/arduino/IMGP3975.jpg\" style=\"cursor: pointer; float: left; height: 130px; margin: 0pt 10px 10px 0pt; width: 171px;\" /></a><a href=\"http://perso.wanadoo.es/kayak22/arduino/IMGP3974.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" src=\"http://perso.wanadoo.es/kayak22/arduino/IMGP3974.jpg\" style=\"cursor: pointer; float: left; height: 130px; margin: 0pt 10px 10px 0pt; width: 165px;\" /></a> El router, al usar como sistema embebido Linux, en concreto ejecuta como int&eacute;rprete de &oacute;rdenes busybox, el cual mantiene las antiguas callout para comunicarse sobre el puerto serie. M&aacute;s tarde estas salidas fueron sustituidas por las ttyS0 y ttyS1. No es nuestro caso. As&iacute; pues, cuando trabajemos con el puerto serie, debemos prestar atenci&oacute;n a cua0 y cua1. Pero para ser m&aacute;s precisos, tan s&oacute;lo nos fijaremos en cua1, pues, por alg&uacute;n motivo que no entiendo, el device cua0 no est&aacute; operativo (is busy). Volviendo al puerto, debemos fijarnos en los pines 3, 5, 9 y 10, que son, tx, rx, gnd y gnd respectivamente (el puerto 1, 2, 4, y 6 son Vcc, Vcc, tx y rx de cua0, respectivamente). Finalmente, y una vez hecha la identificaci&oacute;n de los tres pines (gnd, tx, rx), soldamos, del cable plano, los tres cables al conector DB-9. La elecci&oacute;n de los tres pines en el conector es a gusto de cada cual, pues no podremos usar ese conector para comunicarnos con un dispositivo corriente mediante puerto serie. Para ello deber&iacute;amos trabajar la se&ntilde;al para convertirla al est&aacute;ndar 232 (estamos trabajando en ttl). Para fijar el conector, podemos realizar una apertura en la carcasa y as&iacute; no tener que trastear demasiado con el router. <a href=\"http://perso.wanadoo.es/kayak22/arduino_06.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" src=\"http://perso.wanadoo.es/kayak22/arduino_06.jpg\" style=\"cursor: pointer; float: left; height: 144px; margin: 0pt 10px 10px 0pt; width: 230px;\" /></a><a href=\"http://perso.wanadoo.es/kayak22/arduino/IMGP3970.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" src=\"http://perso.wanadoo.es/kayak22/arduino/IMGP3970.jpg\" style=\"cursor: pointer; float: left; height: 139px; margin: 0pt 10px 10px 0pt; width: 186px;\" /></a><a href=\"http://perso.wanadoo.es/kayak22/arduino/IMGP3971.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" src=\"http://perso.wanadoo.es/kayak22/arduino/IMGP3971.jpg\" style=\"cursor: pointer; float: left; height: 140px; margin: 0pt 10px 10px 0pt; width: 186px;\" /></a> El siguiente paso ser&iacute;a comprobar que las conexiones las hemos realizado correctamente. Para ello, podemos hacer uso de Arduino, monitorizando lo que ocurre en el puerto serie. As&iacute; pues, conectamos al puerto serie y entramos mediante SSH (usando Putty por ejemplo) y lanzamos, o bien el entorno de desarrollo de Arduino, o bien un terminal para ver comunicaci&oacute;n en COMx. Desde la consola SSH, y una vez logeados en el router, probamos a enviar un cierto mensaje hacia Arduino. &Eacute;sto se lleva a cabo de la siguiente manera: la comunicaci&oacute;n en Linux a trav&eacute;s del puerto serie se lleva a cabo como una escritura en un fichero cualquiera, salvo que, en este caso, se trata del archivo de dispositivo localizado en /dev/cua/1. As&iacute; pues, si tecleamos echo Hola Mundo! &gt; /dev/cua/1, el terminal del ordenador nos mostrar&iacute;a el mensaje por pantalla (siempre y cuando se encuentre a 9600 bps). &iquest;Cu&aacute;l es el siguiente paso? El siguiente paso se va a dar sobre la programaci&oacute;n de Arduino. Para ello debemos, en<a href=\"http://perso.wanadoo.es/kayak22/arduino/putty.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" src=\"http://perso.wanadoo.es/kayak22/arduino/putty.jpg\" style=\"cursor: pointer; float: right; height: 187px; margin: 0pt 0pt 10px 10px; width: 250px;\" /></a> primer lugar, se&ntilde;alar la estructura de los diferentes m&oacute;dulos que van a componer la comunicaci&oacute;n. Por un lado, un c&oacute;digo en Arduino se encargar&aacute; de recibir datos codificados (made in yo) y generar las diferentes se&ntilde;ales. En el router, shell scripts (cgi) se encargar&aacute;n de enviar y recibir datos y lanzar p&aacute;ginas HTML al navegador. Por &uacute;ltimo, para hacer presentable la informaci&oacute;n, se crea la p&aacute;gina Web que har&aacute; de interfaz al usuario. As&iacute; pues, comencemos con el c&oacute;digo en Arduino. <span style=\"font-weight: bold;\">C&Oacute;DIGO EN ARDUINO </span> La idea es, b&aacute;sicamente, dejar la programaci&oacute;n m&aacute;s compleja al router, que dispone de un sistema operativo empotrado, con m&aacute;s capacidad de memoria, y liberar a Arduino de esa carga, para, tan s&oacute;lo, responder a c&oacute;digos b&aacute;sicos que debe traducir, interpretar y generar las diferentes se&ntilde;ales. <a href=\"http://perso.wanadoo.es/kayak22/arduino/1152.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" src=\"http://perso.wanadoo.es/kayak22/arduino/1152.jpg\" style=\"cursor: pointer; display: block; height: 261px; margin: 0px auto 10px; text-align: center; width: 349px;\" /></a> As&iacute;, podemos ver que tenemos 12 puertos digitales (0 y 1 reservadas para RX y TX), y 5 anal&oacute;gicas. Los digitales vamos a tomarlos s&oacute;lo como salidas. De esta forma, cuando desde el router queramos activar una se&ntilde;al, ser&iacute;a l&oacute;gico indicar, tanto que vamos a activar, como el n&uacute;mero de puerto de que se trate. Con esta regla, podemos determinar que para activar un determinado puerto, debemos escribir echo H03 &gt; /dev/cua/1. Es decir, para referirnos a la activaci&oacute;n de un puerto usaremos &quot;Hx&quot;, siendo x el n&uacute;mero de puerto (3 &lt;= x &lt;= 13). De la misma forma, para desactivar o pasar a un estado Low &quot;Lx&quot;. Finalmente, los puertos anal&oacute;gicos s&oacute;lo ser&aacute;n de lectura, as&iacute; pues, los nombraremos como &quot;Ax&quot; (0 &lt;= x &lt;= 5). El c&oacute;digo debe leer iterativamente del puerto serie en busca de un byte &quot;H&quot;, &quot;L&quot; &oacute; &quot;A&quot;, y, o bien activar o desactivar el puerto o bien leer el puerto. Todo ello se detalla en el siguiente c&oacute;digo:
	<pre class=\"code\" style=\"height: 300px; margin: 0px; overflow: auto; width: 100%;\">
	/* Adquisici&oacute;n de datos y control de salidas para 

linksys WRT45GL a trav&eacute;s de puerto serie */



//Definimos las variables necesarias

int i,valor,valoraux,digito,pin;

byte dato,decenas,unidades;



void setup(){

for (i=2;i&lt;=13;i++){
pinMode(i,OUTPUT);
}
Serial.begin(9600);
}

void loop(){
//A la hora de codificar cada una de las salidas digitales
//mediante el router, estableceremos como norma, codificar
//el estado HIGH para el pin 2 como: &quot;H02&quot;. Y para un estado
//LOW: &quot;L02&quot;. Para referirnos a las entradas anal&oacute;gicas, 
//lo indicaremos anteponiendo la A:  &quot;A5&quot;.
//Dado que la comunicaci&oacute;n serie, se lleva a cabo, como la 
//propia palabra indica, mediante secuencia de bytes, entonces
//tendremos que llevar un control de los &quot;paquetes&quot; de datos
//para identificar correctamente los 3 bytes de una codificacion
//del estilo &quot;H02&quot;

//Comprobamos si llega se&ntilde;al del router:
if (Serial.available()){
dato=Serial.read();
//En caso de que el primer byte sea una H o una L, nos 
//preparamos para decodificar el pin, leyendo, previamente
//el n&uacute;mero de dicho pin. Para ello transformamos su n&ordm;
//a entero, restando al c&oacute;digo ascii, 48
if (dato==&#39;H&#39; || dato==&#39;L&#39;){
//leemos primero las decenas, esperando en bucle hasta
//que se detecte el byte entrante.
while(! Serial.available()){
}
decenas=Serial.read();
//eco de comprobacion serialWrite(decenas);
pin=(decenas-48)*10;
//y despu&eacute;s las unidades, para obtener el n&ordm; del pin
while(! Serial.available()){
}
unidades=Serial.read();
//eco de comprobacion serialWrite(unidades);
pin=pin+(unidades-48);
if(dato==&#39;H&#39;){
digitalWrite(pin,HIGH);
}
else{
digitalWrite(pin,LOW);
}
}
//En caso de que fuese A, entonces es un
//puerto anal&oacute;gico (por supuesto que todo esto debe
//controlarse desde el router), y necesitamos enviar
//los datos anal&oacute;gicos que pueda haber en dicho pin.
//Para ello codificamos el entero que nos devuelve una
//lectura de los 1024 posibles niveles, envi&aacute;ndolos como
//cadena de 4 d&iacute;gitos.
if (dato==&#39;A&#39;){
//primero hacemos la lectura del pin en cuesti&oacute;n:
while(! Serial.available()){
}
dato=Serial.read();
//A continuaci&oacute;n enviamos los datos byte a byte
//a trav&eacute;s del puerto serie hacia el router.
//para ello debemos descomponer las unidades, decenas...
pin=dato-48;
delay(1000);
valor=analogRead(pin);
valoraux = valor;
digito = valoraux/1000;
serialWrite(digito+48);
valoraux = (valoraux - (digito * 1000));
digito = valoraux/100;
serialWrite(digito+48);
valoraux = (valoraux - (digito * 100));
digito = valoraux/10;
serialWrite(digito+48);
valoraux = (valoraux - (digito * 10));
digito = valoraux;
serialWrite(digito+48);
Serial.println();
}
}
}
</pre>
	<span style=\"font-weight: bold;\">C&Oacute;DIGO EN ROUTER</span> Cuando una p&aacute;gina es accedida en internet, los servidores deben buscar informaci&oacute;n en sus bases de datos, y devolver las consultas oportunas. Se dice entonces que un c&oacute;digo cgi (common gateway interface) est&aacute; creando una p&aacute;gina din&aacute;mica. El c&oacute;digo cgi o lenguaje cgi puede implementarse mediante perl, javascript, ... En nuestro caso usaremos un shell script basado en comandos Unix. Cu&aacute;l ser&aacute; la organizacion? Pues bien, como yo no soy un gur&uacute; de Unix, y menos de HTML, me baso en ideas que creo que funcionar&aacute;n (de hecho, pod&iacute;an funcionar mejor :-P ). Es importante indicar que el c&oacute;digo que se cree como interfaz cgi debe ir localizado en el directorio /www/cgi- bin/, que ser&aacute;, en cierta medida, la parte visible a la red (todo /www, de hecho). En ese directorio, crearemos el archivo shell script principal, el cu&aacute;l crear&aacute; la p&aacute;gina HTML, y llevar&aacute; a cabo la consulta de la entrada anal&oacute;gica 5 (del NTC). Su c&oacute;digo:
	<pre class=\"code\" style=\"height: 300px; margin: 0px; overflow: auto; width: 100%;\">
	#!/bin/sh
../arduino/adquisitor &amp;
VARIABLE=`cat nivel | cut -b 1,2,3,4`
AUX=`expr 870 - $VARIABLE`
TEMPERATURA=`expr $AUX / 5`
head -n 149 ../arduino/principal.html
echo &quot;
MONITORIZACI&Oacute;N DE SENSOR DE TEMPERATURA:  $TEMPERATURA      &ordm;
tail -n 4 ../arduino/principal.html


</pre>
	Donde la segunda l&iacute;nea ejecuta otro shell script que es el que hace la llamada a trav&eacute;s del puerto serie y lee los datos de Arduino. Las l&iacute;neas 3, 4 y 5 hacen una conversi&oacute;n de los 1024 niveles anal&oacute;gicos recibidos de Arduino para &quot;amoldarlos&quot; a una presentaci&oacute;n de temperatura en &ordm;C. y finalmente se crea la p&aacute;gina, ayud&aacute;ndonos de la impresi&oacute;n de un archivo HTML (principal.html) e inclyuendo, entre medias del archivo (fijarse que se imprime parte de principal.html y luego el final, mediante head y tail), la temperatura consultada. Este c&oacute;digo se repite para cada uno de los botones que se crean. Es decir, al igual que existe el shell script principal, existe el H03, L04, H05, L05, ... cada uno activa su p uerto correspondiente, adem&aacute;s de cargar la p&aacute;gina HTML. El c&oacute;digo del script adquisitor es:
	<pre class=\"code\" style=\"height: 300px; margin: 0px; overflow: auto; width: 100%;\">
	#!/bin
/sh
variable=0
echo A5 &gt; /dev/cua/1
cat &lt; /dev/cua/1 &gt; nivel &amp;
until test $variable -ge 300
do
variable=$(($variable + 1))
done
kill $$
</pre>
	En el cual, la tercera l&iacute;nea hace la consulta, como dijimos, mediante la codificaci&oacute;n &quot;A5&quot; a trav&eacute;s del puerto /cua/1 y se espera la respuesta, redirigiendo la entrada hacia un archivo auxiliar llamado &quot;nivel&quot;. La lectura del puerto serie es un proceso que queda ejecut&aacute;ndose hasta que se mate. Por lo tanto, debemos, en primer lugar mandarlo a bacground (&amp;) y finalmente asesinarlo :-) (kill $$). Un aspecto importante es que debemos esperar un cierto tiempo hasta que Arduino haga una lectura y retorne los datos. Para ello se hace uso de un bucle &quot;tonto&quot; (no se si habr&aacute; un comando tipo delay en ash). Final me nte se g uarda la p&aacute;gina web principal.html que es la que hace de presentaci&oacute;n al usuario. Debo destacar que hay muchos aspectos mejorables, pues hay alg&uacute;n problemilla con el control de procesos en bacground, con el c&oacute;digo HTML, y con el acceso al router desde internet. Pero para una idea m&aacute;s o menos general, la creaci&oacute;n de este montaje, creo que es acertada. <a href=\"http://perso.wanadoo.es/kayak22/arduino/gui.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" src=\"http://perso.wanadoo.es/kayak22/arduino/gui.jpg\" style=\"cursor: pointer; float: left; height: 303px; margin: 0pt 10px 10px 0pt; width: 407px;\" /></a> <embed align=\"middle\" bgcolor=\"#ffffff\" flashvars=\"playerMode=embedded\" id=\"VideoPlayback\" quality=\"best\" salign=\"TL\" scale=\"noScale\" src=\"http://video.google.com/googleplayer.swf?docId=-6142561211497248169&amp;hl=es\" style=\"height: 326px; width: 400px;\" type=\"application/x-shockwave-flash\"></embed></div>
",
          "wp:post_id": "24",
          "wp:post_date": "2011-06-06 19:28:50",
          "wp:post_date_gmt": "2011-06-06 19:28:50",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "version-1-1-control-linksys-arduino",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "sin-categoria",
            "#cdata-section": "Sin categoría"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          },
          "wp:comment": {
            "wp:comment_id": "5",
            "wp:comment_author": "Omnimusha",
            "wp:comment_author_email": "devilinside128@hotmail.com",
            "wp:comment_author_IP": "190.229.232.38",
            "wp:comment_date": "2012-03-01 17:50:09",
            "wp:comment_date_gmt": "2012-03-01 17:50:09",
            "wp:comment_content": "buenas, me preguntaba si podria realizar su proyecto, con un Router Linksys Wrt54g v6",
            "wp:comment_approved": "1",
            "wp:comment_parent": "0",
            "wp:comment_user_id": "0"
          }
        },
        {
          "title": "Control de leds desde ratón - Arduino",
          "link": "http://eduardomarin.es/blog/?p=27",
          "pubDate": "Mon, 06 Jun 2011 19:29:59 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?p=27"
          },
          "content:encoded": "<div style=\"text-align: justify;\">
	<a href=\"http://photos1.blogger.com/blogger/1283/1487/1600/PICT0030.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" src=\"http://photos1.blogger.com/blogger/1283/1487/320/PICT0030.jpg\" style=\"cursor: pointer; float: right; height: 205px; margin: 0pt 0pt 10px 10px; width: 271px;\" /></a>Despu&eacute;s de un primer intento para llevar a cabo un enlace directo entre rat&oacute;n y Arduino, debido a problemas de comunicaci&oacute;n entre los dos detallo la comunicaci&oacute;n a trav&eacute;s del pc.</div>
<div style=\"text-align: justify;\">
	Es una conexi&oacute;n muy parecida al enlace que ya hice entre teclado y el display de 8 segmentos, salvo que en esta ocasi&oacute;n, en vez de usar el programa <span style=\"font-style: italic;\">terminal.exe</span> implemento un controlador espec&iacute;fico. Pero, &iquest;cu&aacute;l es la idea del invento?. Se trata de iluminar 4 leds, dispuestos en cruz, seg&uacute;n se mueva el rat&oacute;n. As&iacute;, si muevo el rat&oacute;n hacia la izquierda, si iluminar&aacute; el led de la izquierda. Si lo muevo hacia la derecha, se iluminar&aacute; el de la derecha. Lo mejor de todo es que, aunque parezca algo sencillo y simple, tiene bastantes utilidades. Imaginemos poder mover un brazo mec&aacute;nico mediante el uso del rat&oacute;n y su rueda central :-) . Para llevar a cabo esta tarea, primero hab&iacute;a que conseguir hacer una lectura de los par&aacute;metros del rat&oacute;n. Buscando en la red, encontr&eacute; un driver ya implementado que solucionaba la ardua tarea de ponerse a rebuscar entre interrupciones y llamadas a bios. Esta librer&iacute;a, ratoli.h, puede encontrarse en la p&aacute;gina del autor, pero no recuerdo d&oacute;nde la encontr&eacute;, as&iacute; pues pego aqu&iacute; el c&oacute;digo:
	<pre class=\"code\" style=\"height: 300px; margin: 0px; overflow: auto; width: 100%;\">
	/*

RATOLI.H:

-Llibreria amb rutines de control del Mouse.
-Ultima modificaci&cent;: 7-II-1995

*/
#include <dos.h>

/* NOTA:    Valors de retorn de la funci&cent; boto():
-----------------------------------------------
|  Valor:  |  Esquerra:  |  (Mig:)  |  Dret:  |
-----------------------------------------------
|    0     |     NO      |    NO    |   NO    |
|    1     |     SI      |    NO    |   NO    |
|    2     |     NO      |    NO    |   SI    |
|    3     |     SI      |    NO    |   SI    |
|    4     |     NO      |    SI    |   NO    |
|    5     |     SI      |    SI    |   NO    |
|    6     |     NO      |    SI    |   SI    |
|    7     |     SI      |    SI    |   SI    |
-----------------------------------------------
*/

union REGS rin,rout;

/*
-----------------------------------------------------------------------------
INITMOUSE: Inicialitza el mouse.
-----------------------------------------------------------------------------
*/
int InitMouse(void)
{
rin.x.ax=0;
int86(0x33,&amp;rin,&amp;amp;amp;amp;amp;amp;rout);
return (rout.x.ax);            /* Retorna -1 si el mouse s&#39;ha instalat. */                 /*         0 si no instalado*/
}

/*
-----------------------------------------------------------------------------
MOUSEOFF: Amaga el cursor del mouse.
-----------------------------------------------------------------------------
*/
void mouseoff(void)
{
rin.x.ax=2;
int86(0x33,&amp;rin,&amp;amp;amp;amp;amp;amp;rout);
}

/*
-----------------------------------------------------------------------------
MOUSEON: Fa apar&Scaron;ixer el cursor del mouse.
-----------------------------------------------------------------------------
*/
void mouseon(void)
{
rin.x.ax=1;
int86(0x33,&amp;rin,&amp;amp;amp;amp;amp;amp;rout);
}

/*
-----------------------------------------------------------------------------
EIXX: Retorna la posici&cent; horitzontal del mouse (dep&Scaron;n de la ressoluci&cent; del
text o dels gr&hellip;fics).
-----------------------------------------------------------------------------
*/
int eixx(void)
{
rin.x.ax=3;
int86(0x33,&amp;rin,&amp;amp;amp;amp;amp;amp;rout);
return(rout.x.cx);
}

/*
-----------------------------------------------------------------------------
EIXY: Retorna la posici&cent; vertical del mouse.
-----------------------------------------------------------------------------
*/
int eixy(void)
{
rin.x.ax=3;
int86(0x33,&amp;rin,&amp;amp;amp;amp;amp;amp;rout);
return(rout.x.dx);
}

/*
-----------------------------------------------------------------------------
BOTO: Retorna l&#39;estat dels botons. Veure la taula del principi per a saber
els valors exactes.
-----------------------------------------------------------------------------
*/
int boto(void)
{
rin.x.ax=3;
int86(0x33,&amp;rin,&amp;amp;amp;amp;amp;amp;rout);
return(rout.x.bx);
}

/*
-----------------------------------------------------------------------------
SETMOUSEPOS: Col.loca el cursor del mouse en la posici&cent; (x,y).
-----------------------------------------------------------------------------
*/
void SetMousePos(int x, int y)
{
rin.x.ax=4;
rin.x.cx=x;
rin.x.dx=y;
int86(0x33,&amp;rin,&amp;amp;amp;amp;amp;amp;rout);
}
</dos.h></pre>
	Por otra parte, debemos mandar datos a la placa Arduino, pero, esta vez, sin ayuda de <span style=\"font-style: italic;\">terminal.exe</span>, con lo cual debemos manejar los env&iacute;os y comunicaciones directamente. Lo primero que ten&iacute;amos que hacer era conseguir mandar los datos correctamente. Dadas las caracter&iacute;sticas del puerto virtual USB-serial, se configur&oacute; para env&iacute;o sobre 8 bits de datos, 1 bit de parada, no paridad y velocidad a 9600 bps. Desp&uacute;es s&oacute;lo quedaba mandar caracteres de control mediante la instrucci&oacute;n <span style=\"font-style: italic;\">outport()</span> sobre Arduino, y que &eacute;ste interpretase correctamente el env&iacute;o. El c&oacute;digo sobre el pc quedaba entonces as&iacute;:
	<pre class=\"code\" style=\"height: 300px; margin: 0px; overflow: auto; width: 100%;\">
	/*     Nombre: Driver de rat&cent;n hacia Arduino control.c   */
/*      Escrito por: Eduardo Mar&iexcl;n Izquierdo   */
/* Basado  el env&iexcl;o puerto serie en source de: Craig Peacock  */
/*    Fecha:   14 - 8 - 2006    */

#include <dos.h>
#include <stdio.h>
#include <conio.h>
#include <ratoli.h>
#define PORT1 0x3E8

/* Defines Serial Ports Base Address */
/* COM1 0x3F8    */
/* COM2 0x2F8     */
/* COM3 0x3E8     */
/* COM4 0x2E8     */

void main(void)
{
int c;
int ch;
int new_pos_x,new_pos_y,pos_x,pos_y;
outportb(PORT1 + 1 , 0);   /* Turn off interrupts - Port1 */

/*    PORT 1 - Communication Settings    */

outportb(PORT1 + 3 , 0x80);  /* SET DLAB ON */
outportb(PORT1 + 0 , 0x0C);  /* Set Baud rate - Divisor Latch Low Byte */
/* Default 0x03 =  38,400 BPS */
/*    0x01 = 115,200 BPS */
/*    0x02 =  57,600 BPS */
/*    0x06 =  19,200 BPS */
/*    0x0C =   9,600 BPS */
/*    0x18 =   4,800 BPS */
/*    0x30 =   2,400 BPS */
outportb(PORT1 + 1 , 0x00);  /* Set Baud rate - Divisor Latch High Byte */
outportb(PORT1 + 3 , 0x03);  /* 8 Bits, No Parity, 1 Stop Bit */
outportb(PORT1 + 2 , 0xC7);  /* FIFO Control Register */
outportb(PORT1 + 4 , 0x0B);  /* Turn on DTR, RTS, and OUT2 */

printf(&quot;Driver de rat&cent;n para Arduinon&quot;);
printf(&quot;Por Eduardo Mar&iexcl;nn&quot;);
printf(&quot;Pulse ESC para salirn&quot;);

do {
new_pos_x=eixx();
if(new_pos_x&gt;pos_x){
outportb(PORT1,&#39;r&#39;);
}
else{
if(new_pos_x<pos_x){ l=\"\" new_pos_y=\"eixy();\" port1=\"\" pos_x=\"new_pos_x;\">pos_y){
outportb(PORT1,&#39;d&#39;);
}
else{
if(new_pos_y<pos_y){ 27=\"\" asc=\"\" ch=\"getch();}\" esc=\"\" if=\"\" is=\"\" port1=\"\" pos_y=\"new_pos_y;\" pressed=\"\" quit=\"\" u=\"\" when=\"\" while=\"\"></pos_y){></pos_x){></ratoli.h></conio.h></stdio.h></dos.h></pre>
	Finalmente, y ya programando sobre Arduino, quedaba recibir los datos provenientes del c&oacute;digo anterior. Sabiendo que los &uacute;nicos car&aacute;cteres de control eran aquellos que indicaban cuatro posibles direcciones (u,d,r,l; indicando: up, down, right, left), el c&oacute;digo resultante es bastante sencillo. Si detectamos una &#39;u&#39;, entonces iluminaremos el led situado en la parte superior. Observando el c&oacute;digo, nos hacemos una idea de la soluci&oacute;n:
	<pre class=\"code\" style=\"height: 300px; margin: 0px; overflow: auto; width: 100%;\">
	/* Control de Leds desde teclado
* -------------
*
* Gracias a este programa podemos controlar un n&uacute;mero de leds a partir
* del rat&oacute;n del ordenador.
* 
* Autor: Eduardo Mar&iacute;n Izquierdo
* Fecha: 08-08-2006
*/

int pines [] = {12,11,10,9};
int Ledcontrol = 13;
byte caracter;
int retraso = 1;

void setup() {
int i;
pinMode (Ledcontrol,OUTPUT);
for (i=0; i&lt;6; i++){
pinMode(pines[i],OUTPUT);
}
beginSerial(9600);  
}

void loop() {
caracter = serialRead();

if (caracter == &#39;l&#39;){
digitalWrite(pines[0],HIGH);
delay(retraso);
digitalWrite(pines[0],LOW);
}
if (caracter == &#39;d&#39;){
digitalWrite(pines[1],HIGH);
delay(retraso);
digitalWrite(pines[1],LOW);
}
if (caracter == &#39;u&#39;){
digitalWrite(pines[2],HIGH);
delay(retraso);
digitalWrite(pines[2],LOW);
}
if (caracter == &#39;r&#39;){
digitalWrite(pines[3],HIGH);
delay(retraso);
digitalWrite(pines[3],LOW);
}
}
</pre>
	Para hacerse una idea, el siguiente v&iacute;deo muestra la idea aqu&iacute; expuesta. <embed align=\"middle\" bgcolor=\"#ffffff\" flashvars=\"playerMode=embedded\" id=\"VideoPlayback\" quality=\"best\" salign=\"TL\" scale=\"noScale\" src=\"http://video.google.com/googleplayer.swf?docId=521863238723479588&amp;hl=es\" style=\"height: 326px; width: 400px;\" type=\"application/x-shockwave-flash\"></embed></div>
",
          "wp:post_id": "27",
          "wp:post_date": "2011-06-06 19:29:59",
          "wp:post_date_gmt": "2011-06-06 19:29:59",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "control-de-leds-desde-raton-arduino",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "sin-categoria",
            "#cdata-section": "Sin categoría"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "Conversación entre Arduino y Linksys",
          "link": "http://eduardomarin.es/blog/?p=29",
          "pubDate": "Mon, 06 Jun 2011 19:30:23 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?p=29"
          },
          "content:encoded": "<p>
	Al final Arduino y Linksys conversan. <a href=\"http://photos1.blogger.com/blogger/1283/1487/1600/IMGP3955.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" src=\"http://photos1.blogger.com/blogger/1283/1487/320/IMGP3955.jpg\" style=\"cursor: pointer; float: right; height: 212px; margin: 10pt 10px 10px 10pt; width: 284px;\" /></a> La idea de este proyecto est&aacute;, por un lado, en poder ampliar la limitada memoria de la que dispone Arduino, y, por otro, en poder acceder de forma remota a sus se&ntilde;ales. Para ello, necesitamos, como es l&oacute;gico, la placa Arduino (en mi caso uso la versi&oacute;n USB), y un router Linksys WRT45GL, el cual est&aacute; trabajando ahora mismo como punto de acceso libre a la red social FON. &Eacute;ste &uacute;ltimo necesita una peque&ntilde;a modificaci&oacute;n t&eacute;cnica, pues aunque viene de f&aacute;brica con la circuiter&iacute;a impresa para el puerto serie, &eacute;ste no dispone del conector para cable plano. Por este motivo en primer lugar se lleva a cabo una identificaci&oacute;n de los pines, y, una vez asegurados, empezamos a soldar el conector. Una vez soldado y montado el cable plano tan s&oacute;lo nos queda establecer la conexi&oacute;n entre los dos. <a href=\"http://photos1.blogger.com/blogger/1283/1487/1600/PICT0028.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" src=\"http://photos1.blogger.com/blogger/1283/1487/320/PICT0028.jpg\" style=\"cursor: pointer; float: left; height: 208px; margin: 0pt 10px 10px 0pt; width: 277px;\" /></a><a href=\"http://photos1.blogger.com/blogger/1283/1487/1600/IMGP3957.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" src=\"http://photos1.blogger.com/blogger/1283/1487/320/IMGP3957.jpg\" style=\"cursor: pointer; float: right; height: 205px; margin: 0pt 10px 10px 0pt; width: 272px;\" /></a> La idea de esta conexi&oacute;n se esboza en la siguiente imagen. <a href=\"http://photos1.blogger.com/blogger/1283/1487/1600/esquema.0.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" src=\"http://photos1.blogger.com/blogger/1283/1487/400/esquema.jpg\" style=\"cursor: pointer; display: block; margin: 0px auto 10px; text-align: center;\" /></a>Por fortuna, gracias a que el router Linksys tiene un sistema embebido linux, podemos acceder a &eacute;l de una forma muy flexible y potente. &Eacute;sto nos permite conectarnos en modo telnet desde un ordenador remoto, ya sea a trav&eacute;s de su enlace wifi o a trav&eacute;s de internet, si &eacute;ste est&aacute; conectado a la red (el router). Una vez conectados al router, podemos enviar datos a trav&eacute;s del puerto serie hacia arduino, y, dependiendo de c&oacute;mo hayamos programado &eacute;ste, controlar todos aquellos dispositivos que nos podamos imaginar. Es decir, la potencia de esta combinaci&oacute;n es visible, tan s&oacute;lo hay que echar imaginaci&oacute;n, tiempo y ganas. Veamos con m&aacute;s detalle en qu&eacute; consiste este primer acceso remoto a arduino. <a href=\"http://photos1.blogger.com/blogger/1283/1487/1600/IMGP3959.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" src=\"http://photos1.blogger.com/blogger/1283/1487/320/IMGP3959.jpg\" style=\"cursor: pointer; float: right; height: 240px; margin: 0pt 0pt 10px 10px; width: 180px;\" /></a> Vamos a controlar 10 deds conectados sobre las salidas digitales de la placa Arduino. Para codificarlos, cada uno de ellos se encender&aacute; o apagar&aacute; seg&uacute;n se env&iacute;e el d&iacute;gito 0 - 9 desde el router. Es decir, a trav&eacute;s del puerto serie, el router enviar&aacute; el byte del car&aacute;cter &quot;0&quot; y se iluminar&aacute; o apagar&aacute; el led n&ordm; 0, y as&iacute; con todos los dem&aacute;s. Ese caracter enviado, realmente se env&iacute;a en primer lugar v&iacute;a wifi desde el ordenador hasta el router, haciendo uso de la escritura sobre el fichero asociado al puerto serie. As&iacute;, si mediante telnet escribimos: <span style=\"font-style: italic;\">echo 0489 &gt; /dev/cua/1 </span>se iluminar&aacute;n simult&aacute;neamente los leds 0, 4, 8, y 9; siendo el fichero /dev/cua/1 el equivalente al puerto serie COM2 del router (en otros modelos se identifican por ttyS0 y ttyS1). Cabe destacar que el proceso inverso, esto es, leer datos desde arduino, ser&iacute;a equivalente. Si Arduino env&iacute;a datos al router (pongamos por ejemplo que hace lecturas peri&oacute;dicas de temperaturas, presion, etc), Linksys tan s&oacute;lo tendr&iacute;a que adquirir estos datos viendo el contenido del archivo 1 (<span style=\"font-style: italic;\">cat /dev/cua/1</span>), e interpretarlo convenientemente. <a href=\"http://photos1.blogger.com/blogger/1283/1487/1600/fon_console.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" src=\"http://photos1.blogger.com/blogger/1283/1487/320/fon_console.jpg\" style=\"cursor: pointer; float: left; height: 169px; margin: 0pt 10px 10px 0pt; width: 267px;\" /></a> Puede verse el resultado en el siguiente v&iacute;deo: <embed align=\"middle\" bgcolor=\"#ffffff\" flashvars=\"playerMode=embedded\" id=\"VideoPlayback\" quality=\"best\" salign=\"TL\" scale=\"noScale\" src=\"http://video.google.com/googleplayer.swf?docId=-4127552653483707289&amp;hl=es\" style=\"height: 326px; width: 400px;\" type=\"application/x-shockwave-flash\"></embed> No hay que olvidar pasarse por cualquiera de estas direcciones, que contienen toda la informaci&oacute;n sobre <a href=\"http://www.arduino.cc/es/\">Arduino</a> y sobre <a href=\"http://es.fon.com/\">FON</a>.</p>
",
          "wp:post_id": "29",
          "wp:post_date": "2011-06-06 19:30:23",
          "wp:post_date_gmt": "2011-06-06 19:30:23",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "conversacion-entre-arduino-y-linksys",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "sin-categoria",
            "#cdata-section": "Sin categoría"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "Comunicación con iframe cross-domain bidireccional",
          "link": "http://eduardomarin.es/blog/?p=170",
          "pubDate": "Tue, 08 Nov 2011 19:03:02 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?p=170"
          },
          "content:encoded": "<div>

La idea es, ya que no podemos acceder directamente al iframe desde otro dominio, utilizar un \"controlador\" alojado en el mismo dominio del origen del iframe para que pueda conversar con él. Este controlador, a su vez, monta un iframe con vuelta hacia el dominio padre para que pueda enviarle posibles respuestas desde el dominio hijo.

<a href=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/11/cross_domain_iframe.png\"><img class=\"aligncenter size-full wp-image-172\" title=\"cross_domain_iframe\" src=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/11/cross_domain_iframe.png\" alt=\"\" width=\"604\" height=\"191\" /></a>

De esta forma, desde domain_A, podemos utilizar el src de controller_iframe_A para “enviar” instrucciones en el hash de su url. Estas instrucciones son recibidas por controller_iframe_B que utiliza hashchange para detectar cambio de hash. El controlador utiliza esa instrucción hash que es ejecutada mediante eval(). Al encontrarnos ya en domain_B, dicha instrucción puede acceder al contents() de cross_iframe, para afectar, a nivel javascript, a todo su árbol DOM. Hasta aquí, todo el camino es recorrido “hacia abajo” hasta el iframe origen afectado por cross-domain.

Si ahora deseamos poder “afectar” desde dicho iframe a elementos de nuestra working_page, nos volvemos a encontrar con el problema de cross-domain. Para llegar hasta arriba, volvemos a utilizar la misma técnica en dirección contraria. Esta vez, utilizamos un iframe oculto en nuestro controlador, con src en domain_A, y modificable desde el controlador controller_iframe_B. Las instrucciones de respuesta se presentan ejecutables a working_page, que únicamente debe llegar hasta su top, recorriendo el parent del parent.

<strong>Caso de uso</strong>

<a href=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/11/cross_domain_iframe_01.png\"><img class=\"aligncenter size-full wp-image-173\" title=\"cross_domain_iframe_01\" src=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/11/cross_domain_iframe_01.png\" alt=\"\" width=\"378\" height=\"218\" /></a>

Supongamos que las dos líneas que aparecen son simples divs. Queremos hacer la línea del iframe en domain_b un elemento clickable que al ser pulsado, cambie el color de “click_aqui”, situado en domain_a.

Así, utilizando el “src” del iframe en domain_b:

<code>document.getElementById(\"iframeSource\").src=\"sourceOfIframeInB#\"+instruction;</code>

donde <span style=\"color: #0000ff;\"><code>instruction = “$('#iframeCrossDom').contents().find('div').css({'cursor':'pointer'}).click(function(){exeCrossDom(\"$('#buttonhash', window.parent.parent.document).css({‘color’:’#ff0000’});\");});”</code></span>

El controlador está a la escucha del hashchange de ese iframe, ya en domain_b, e implementa una función exeCrossDom que permite enviar instrucciones de vuelta, al return_iframe del dominio A:

Estos controladores, montados en ambos lados, y con pequeñas diferencias, utilizan el hashchange:

<span style=\"color: #0000ff;\"><code>$(window).bind(\"hashchange\", function(){
if(location.hash != \"\"){
eval(location.hash.substring(1));
this.location.hash = \"\";
}
});</code></span>

</div>",
          "wp:post_id": "170",
          "wp:post_date": "2011-11-08 19:03:02",
          "wp:post_date_gmt": "2011-11-08 19:03:02",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "comunicacion-con-iframe-cross-domain-bidireccional",
          "wp:status": "draft",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": [
            {
              "-domain": "category",
              "-nicename": "html5",
              "#cdata-section": "html5"
            },
            {
              "-domain": "category",
              "-nicename": "javascript",
              "#cdata-section": "javascript"
            },
            {
              "-domain": "category",
              "-nicename": "jquery",
              "#cdata-section": "jquery"
            },
            {
              "-domain": "category",
              "-nicename": "web-develop",
              "#cdata-section": "web develop"
            }
          ],
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "Versión 1.0  Display en Router Linksys - Arduino",
          "link": "http://eduardomarin.es/blog/?p=173",
          "pubDate": "Sun, 24 Apr 2011 10:58:21 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?p=4"
          },
          "content:encoded": "<p>
	<a href=\"http://photos1.blogger.com/blogger/1283/1487/1600/IMGP4421.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" src=\"http://photos1.blogger.com/blogger/1283/1487/320/IMGP4421.jpg\" style=\"cursor: pointer; float: left; height: 218px; margin: 0pt 10px 10px 0pt; width: 294px;\" /></a><span style=\"font-weight: bold;\">Introduc</span><span style=\"font-weight: bold;\">ci&oacute;n</span></p>
<div style=\"text-align: justify;\">
	Bueno, pues empezamos este &quot;tuto&quot; para a&ntilde;adir al router Linksys WRT54GL un display 16x2 de Philips (<a href=\"http://www.google.com/url?sa=t&amp;ct=res&amp;cd=2&amp;url=http%3A%2F%2Fwww.depeca.uah.es%2Fdocencia%2FITT-SE%2Flsed2%2FDISPLAY.pdf\">documentacion</a>) que nos ayudar&aacute; a visualizar aquellos datos que creamos oportunos. En mi caso, y de momento, puedo visualizar dos temperaturas (interna y externa), la hora GMT, las redes disponibles, y aquellos mensajes que yo edite. Pero... c&oacute;mo he realizado todo esto. Comencemos. <span style=\"font-weight: bold;\">Antecedentes</span> Desde que adquir&iacute; el router y comenc&eacute; a a&ntilde;adirle<a href=\"http://photos1.blogger.com/blogger/1283/1487/1600/IMGP4000.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" src=\"http://photos1.blogger.com/blogger/1283/1487/320/IMGP4000.jpg\" style=\"cursor: pointer; float: right; height: 209px; margin: 0pt 0pt 10px 10px; width: 281px;\" /></a> componentes (<a href=\"http://www.rwhitby.net/wrt54gs/serial.html\">puerto serie</a>, <a href=\"http://wiki.openwrt.org/OpenWrtDocs/Customizing/Hardware/MMC?highlight=%28mmc%29\">lector tarjeta SD</a>, ...), visit&eacute; muchas p&aacute;ginas, y en una de ellas, m&aacute;s concretamente en los Hacks de Openwrt, v&iacute; que a&ntilde;ad&iacute;an un <a href=\"http://www.hackaday.com/2005/07/22/wrt-lcd-display-mod/\">display de un Nokia</a>. Esa opci&oacute;n me alegr&oacute; bastante y me ampli&oacute; las miras hacia las posibilidades que ofrec&iacute;a. El inconveniente es que, ni yo ten&iacute;a ese tipo de display, ni lo iba a comprar, y adem&aacute;s, la instalaci&oacute;n se lleva a cabo a trav&eacute;s de las se&ntilde;ales GPIO, que no me gusta tocar mucho, adem&aacute;s que ya las tengo ocupadas con el lector de SD. Entonces... qu&eacute; soluci&oacute;n pod&iacute;a darle. Pues bien. En primer lugar, lleg&oacute; a mis manos una impresora multifunci&oacute;n con escaner en donde ven&iacute;a el display que ahora porta el router. Se trata del modelo de 16 x 2 de philips, en donde hay <a href=\"http://www.google.com/url?sa=t&amp;ct=res&amp;amp;amp;amp;amp;amp;cd=2&amp;url=http%3A%2F%2Fwww.depeca.uah.es%2Fdocencia%2FITT-SE%2Flsed2%2FDISPLAY.pdf\">una muy buena documentaci&oacute;n</a> sobre su control en esta direcci&oacute;n. Muy bien, ya tenemos el display, pero ahora... d&oacute;nde lo enchufamos? Aqu&iacute; entra en juego el proyecto que desarrollan los chicos de Arduino. Como ya he hablado bastantes veces en posts anteriores, &eacute;ste microcontrolador nos permite manejar una serie de se&ntilde;ales digitales y anal&oacute;gicas, y, adem&aacute;s, puede realizar una comunicaci&oacute;n por puerto serie. Es este el punto fuerte del enlace. As&iacute; pues, volvemos a la simbiosis <a href=\"http://www.arduino.cc/es/\">Arduino</a> - <a href=\"http://www.google.com/url?sa=t&amp;ct=res&amp;cd=1&amp;url=http%3A%2F%2Fwww-es.linksys.com%2F&amp;ei=RQheRYm-F62oRafk6LwH&amp;usg=__HqT7u7MTFZE4ylXzv1eZj_rq4GI=&amp;sig2=caJWiXmSAxiT8xgGLuqtaA\">Linksys</a> que me permiten ampliar el sistema linux que porta Linksys. Componentes Router Linksys WRT56GL Microcontrolador Arduino Placa microperforada PCB Tira de conectores Resistencias de 220 ohm Cable <span style=\"font-weight: bold;\">Manos a la obra </span><a href=\"http://photos1.blogger.com/blogger/1283/1487/1600/IMGP4006.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" src=\"http://photos1.blogger.com/blogger/1283/1487/320/IMGP4006.jpg\" style=\"cursor: pointer; float: right; height: 214px; margin: 0pt 0pt 10px 10px; width: 287px;\" /></a> En primer lugar, buscamos un lugar donde colocar el display. En mi caso, lo centr&eacute; sobre la parte superior del router, justo donde est&aacute; perforada la tapa para que ventile. Las medidas del display me permitieron centrarlo perfectamente, con lo cual da un aspecto bastante aproximado a &quot;de f&aacute;brica&quot;, XD. El siguiente paso es realizar la conexi&oacute;n entre las 11 entradas del display a Arduino (vease que puede realizarse el control del display con tan s&oacute;lo 4 bits sobre datos). As&iacute; pues, de las 14 salidas digitales de las que dispone Arduino, tan s&oacute;lo usamos 11. Dos de ellas est&aacute;n reservadas para el puerto serie. Hay que pensar, adem&aacute;s, que Arduino debe ser alimentado de alguna forma. Tambi&eacute;n tenemos que pensar en qu&eacute; uso le vamos a dar. En mi caso, adem&aacute;s de controlar el display, realizar&aacute; lecturas de diversos sensores, aprovechando las 5 entradas anal&oacute;gicas de las que dispone. Por lo tanto, el cableado hacia Arduino va a ser algo complejo, y ser&iacute;a conveniente montar una PCB con conectores para facilitar la conexi&oacute;n y desconexi&oacute;n en caso de que se necesite. Para ello, se monta una tira de conectores para que encaje perfectamente a Arduino. Esta tira ir&aacute; soldada a cada una de las entradas al display, convenientemente dirigida, y soldada. Para graduar el contraste del display hacemos uso de una resistencia variable de 10 k. Para la adquisici&oacute;n de datos para los dos term&oacute;metros, realizamos un divisor de voltaje mediante dos resistencias de 220 ohmios. Finalmente, la alimentaci&oacute;n de Arduino se lleva a cabo directamente de la alimentaci&oacute;n del router. Sin embargo, &eacute;sta alimentaci&oacute;n devuelve unos 20 - 25 voltios que podr&iacute;an no sentar muy bien a Arduino, pues &eacute;ste trabaja en un rango de 5 a 12 voltios. Para ello se usa un regulador de tensi&oacute;n, en mi caso, aprovechado de la impresora que recib&iacute;. Una vez establecida la conexi&oacute;n entre Arduino y el display, tan s&oacute;lo queda realizar la conexi&oacute;n con el router. Esta conexi&oacute;n se lleva a cabo a trav&eacute;s del puerto serie que ya buscamos en un post anterior. Si todo ha salido bien, ahora quedar&iacute;a meterse con el soft. -- Software -- A la hora de crear los scripts y c&oacute;digo necesario debemos tener en cuenta los siguientes aspectos. Por un lado, estamos trabajando con Arduino y con Linksys. Vamos a comenzar hablando del c&oacute;digo que correr&aacute; en Arduino. En posts anteriores habl&eacute; de la <a href=\"http://ahorcandoeltiempo.blogspot.com/2006/09/version-11-control-linksys-arduino.html\">comunicaci&oacute;n que pod&iacute;a llevarse a cabo entre Linksys y Arduino</a>. Pues bien, mantendremos esa comunicaci&oacute;n tal cual. Esto es, Linksys tendr&aacute; que ser capaz de activar y desactivar las se&ntilde;ales suficientes para que arduino responda como si las se&ntilde;ales las estuviese originando &eacute;l. As&iacute;, de las 13 salidas digitales (mejor dicho, 11, pues dos de ellas son para comunicaci&oacute;n serie), el router Linksys debe poder activarlas, tan s&oacute;lo indicando las salidas que desea activar. Lo mismo ocurre con la entrada anal&oacute;gica. As&iacute; pues, si revis&aacute;is el post donde se indica ver&eacute;is c&oacute;mo para activar la salida 10 y 8 digitales, tan s&oacute;lo habia que enviar sobre el puerto serie el comando <span style=\"font-style: italic;\">H10H08</span>, esto es <span style=\"font-style: italic;\">echo H10H08 &gt; /dev/cua/1</span>. Una vez llevada a cabo la configuraci&oacute;n de Arduino, y dispuesto para funcionar como un &quot;interfaz&quot; de cara al lcd, podemos comenzar con el c&oacute;digo del router. Por un lado tenemos el script que controla el lcd, y por otro el c&oacute;digo que nos hace de lanzador de la &quot;aplicaci&oacute;n&quot;, es decir, la que recoge la informaci&oacute;n de la temperatura, de la hora, recoge informaci&oacute;n sobre la ssid actual, recoge los mensajes a imprimir... Empecemos por el nivel m&aacute;s bajo, esto es, el control del lcd. Veamos, en primer lugar, el c&oacute;digo de ese controlador
	<pre class=\"code\" style=\"height: 300px; margin: 0px; overflow: auto; width: 100%;\">
	#!/bin/ash

iniciar_lcd()
{
echo L06L07H08H09L10L11L12L13L04L03H05D00020L05D00020 &gt; /dev/cua/1
echo H06L07L08L09L10L11L12L13L04L03H05D00020L05D00020 &gt; /dev/cua/1
echo L06L07L08H09H10H11L12L13L04L03H05D00020L05D00020 &gt; /dev/cua/1
}

desplazar_display()
{
L=1
while test $L -le $1
do
echo L06L07L08H09H10L11L12L13L04L03H05D00020L05D00020 &gt; /dev/cua/1
L=`expr $L + 1`
done
}

posicionar_cursor()
{
COCIENTE=$1
COCIENTE=`expr $COCIENTE - 1`
K=6
if test $1 -ge 1
then
if test $1 -le 80
then
while test $K -le 12
do
MOD=`expr $COCIENTE % 2`
COCIENTE=`expr $COCIENTE / 2`
if test $K -le 9
then
case $MOD in
0) echo L0$K &gt;&gt; auxiliar
;;
1) echo H0$K &gt;&gt; auxiliar
;;
esac
else
case $MOD in
0) echo L$K &gt;&gt; auxiliar
;;
1) echo H$K &gt;&gt; auxiliar
;;
esac
fi
K=`expr $K + 1`
done
echo H13L04L03H05D00020L05D00020 &gt;&gt; auxiliar
SALIDA=`sed &#39;s/n//g&#39; auxiliar`
SALIDA=`echo $SALIDA | sed &#39;s/ //g&#39;`
rm auxiliar
fi
fi
echo $SALIDA &gt; /dev/cua/1
}

imprimir_caracter()
{
CARACTER=$1
case $CARACTER in
0)echo L06L07L08L09H10H11L12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
1)echo H06L07L08L09H10H11L12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
2)echo L06H07L08L09H10H11L12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
3)echo H06H07L08L09H10H11L12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
4)echo L06L07H08L09H10H11L12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
5)echo H06L07H08L09H10H11L12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
6)echo L06H07H08L09H10H11L12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
7)echo H06H07H08L09H10H11L12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
8)echo L06L07L08H09H10H11L12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
9)echo H06L07L08H09H10H11L12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
:)echo L06H07L08H09H10H11L12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
=)echo H06L07H08H09H10H11L12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
A)echo H06L07L08L09L10L11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
B)echo L06H07L08L09L10L11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
C)echo H06H07L08L09L10L11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
D)echo L06L07H08L09L10L11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
E)echo H06L07H08L09L10L11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
F)echo L06H07H08L09L10L11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
G)echo H06H07H08L09L10L11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
H)echo L06L07L08H09L10L11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
I)echo H06L07L08H09L10L11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
J)echo L06H07L08H09L10L11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
K)echo H06H07L08H09L10L11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
L)echo L06L07H08H09L10L11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
M)echo H06L07H08H09L10L11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
N)echo L06H07H08H09L10L11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
O)echo H06H07H08H09L10L11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
P)echo L06L07L08L09H10L11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
Q)echo H06L07L08L09H10L11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
R)echo L06H07L08L09H10L11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
S)echo H06H07L08L09H10L11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
T)echo L06L07H08L09H10L11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
U)echo H06L07H08L09H10L11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
V)echo L06H07H08L09H10L11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
W)echo H06H07H08L09H10L11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
X)echo L06L07L08H09H10L11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
Y)echo H06L07L08H09H10L11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
Z)echo L06H07L08H09H10L11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
Z)echo H06H07L08H09H10L11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
Z)echo H06H07L08H09H10L11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
a)echo H06L07L08L09L10H11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
b)echo L06H07L08L09L10H11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
c)echo H06H07L08L09L10H11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
d)echo L06L07H08L09L10H11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
e)echo H06L07H08L09L10H11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
f)echo L06H07H08L09L10H11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
g)echo H06H07H08L09L10H11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
h)echo L06L07L08H09L10H11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
i)echo H06L07L08H09L10H11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
j)echo L06H07L08H09L10H11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
k)echo H06H07L08H09L10H11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
l)echo L06L07H08H09L10H11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
m)echo H06L07H08H09L10H11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
n)echo L06H07H08H09L10H11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
o)echo H06H07H08H09L10H11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
p)echo L06L07L08L09H10H11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
q)echo H06L07L08L09H10H11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
r)echo L06H07L08L09H10H11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
s)echo H06H07L08L09H10H11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
t)echo L06L07H08L09H10H11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
u)echo H06L07H08L09H10H11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
v)echo L06H07H08L09H10H11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
w)echo H06H07H08L09H10H11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
x)echo L06L07L08H09H10H11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
y)echo H06L07L08H09H10H11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
z)echo L06H07L08H09H10H11H12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
�)echo L06H07L08H09H10H11L12H13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
_)echo L06L07L08L09L10H11L12L13L04H03H05D00020L05D00020 &gt; /dev/cua/1
;;
esac
}

imprimir_cadena()
{
# Elimino todos los espacios en blanco de la cadena, para que
# no entre en conflicto con los espacios que no se escriben
# y el n�mero de car�cter que lleva en bucle
# Despu�s, si no hay nada que escribir , no hago nada, en caso
# contrario, distingo entre mensajes que entran en display y
# los que no. Los primeros los escribo a dos renglones.
# Los segundos, mediante desplazamiento de display (tipo banner).
# Finalmente, para cada car�cter, llamo a la funci�n imprimir_caracter.


CADENA=`echo $* | sed &#39;s/ //g&#39; | cat`
LONGITUD_CADENA=`echo $CADENA | wc -c`
LONGITUD_CADENA=`expr $LONGITUD_CADENA - 1`
if test $LONGITUD_CADENA -ne 0
then
I=1
while test $I -le $LONGITUD_CADENA
do
if test $I -ge 17
then
if test $LONGITUD_CADENA -le 32
then
if test $I -eq 17
then
posicionar_cursor 41
fi
else
if test $I -eq 41
then
posicionar_cursor 1
else
desplazar_display 1
II=`expr $I + 1`
if test $II -eq $LONGITUD_CADENA
then
desplazar_display 1
fi
fi
fi
fi
CARACTER=`echo $CADENA | cut -c $I`
imprimir_caracter $CARACTER
I=`expr $I + 1`
done
fi
}

imprimir_cadena $*

</pre>
	<a href=\"http://photos1.blogger.com/blogger/1283/1487/1600/IMGP3998.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" src=\"http://photos1.blogger.com/blogger/1283/1487/400/IMGP3998.jpg\" style=\"cursor: pointer; float: left; height: 221px; margin: 0pt 10px 10px 0pt; width: 295px;\" /></a>Pues bien, comenzamos haciendo que el script pueda ser interpretado por ash. A continuaci&oacute;n creamos una serie de funciones que nos ayudar&aacute;n a modularizar la aplicaci&oacute;n y a reutilizar el c&oacute;digo. En primer luga r, debemos mandar a Arduino la secuencia de bits necesaria para que &eacute;ste, a su vez, lo env&iacute;e al lcd. Si miramos la documentaci&oacute;n del lcd vemos c&oacute;mo se lleva a cabo esa inicializaci&oacute;n, dependiendo de si deseamos mostrar el cursor, en modo parpadeo, en formato 16 x 2 o 16 x 1... La siguiente funci&oacute;n nos realiza el desplazamiento del display teniendo en cuenta que s&oacute;lo puede mostrar 16 de los 40 caracteres disponibles. Vuelvo a instar a que se lea con detenimiento la documentaci&oacute;n del display. Ah&iacute; veremos c&oacute;mo el display dispone de una zona de memoria de 40 posiciones por 2 filas. Al poder mostrar tan s&oacute;lo 16 x 2 de esas 80 posiciones, es &uacute;til tener una funci&oacute;n que nos permita mover esa peque&ntilde;a &quot;ventana&quot; sobre toda la zona de memoria. Para ello, lo &uacute;nico que hacemos es pas<a href=\"http://photos1.blogger.com/blogger/1283/1487/1600/IMGP3999.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" src=\"http://photos1.blogger.com/blogger/1283/1487/320/IMGP3999.jpg\" style=\"cursor: pointer; float: right; height: 216px; margin: 0pt 0pt 10px 10px; width: 288px;\" /></a>arle como par&aacute;metro el n&uacute;mero de desplazamientos (en este caso he optado hacia la derecha, por ser m&aacute;s &uacute;til) a la funci&oacute;n <span style=\"font-style: italic;\">desplazar_display</span> y realizar mediante un bucle la iteraci&oacute;n de desplazamientos individuales mediante la correspondiente serie de bits. No he dicho que el env&iacute;o de esos bits en alta o baja s&oacute;lo corresponden a una decisi&oacute;n propia. Todo depende de a qu&eacute; pines hemos conectado el lcd a Arduino. Otra funci&oacute;n de movimiento en el lcd afecta esta vez al cursor. Imaginemos que tenemos una palabra de 16 letras. En este caso, esa palabra entra ex&aacute;ctamente en la primera fila del lcd, y, por tanto, no va a haber problemas, pero... qu&eacute; ocurre si la palabra es de 17. En ese caso, no puede escribirse en la posici&oacute;n 18 de la primera fila, pues no aparecer&iacute;a en la &quot;ventana&quot; del lcd. Para ello, tendr&iacute;a que posicionarse en la posici&oacute;n 1 de la 2&ordf; fila. Bien, esto parece bastante sencillo, pero &iquest;qu&eacute; ocurre si tenemos en cuenta que el cursor se desplaza de forma secuencial (ya sea escribiendo car&aacute;cteres o espacios en blanco), y tendr&aacute; que recorrer 40-16 posiciones hasta &quot;bajar&quot; a la segunda fila?, pues que a la vista de alguien, queda bastante mal que transcurra un tiempo notable sin que se escriba nada en el lcd. Para ello debe implementarse la funci&oacute;n que posiciona autom&aacute;ticamente el cursor en la posici&oacute;n. Para ello se revisa de nuevo la documentaci&oacute;n del lcd y se co<a href=\"http://photos1.blogger.com/blogger/1283/1487/1600/IMGP4005.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" src=\"http://photos1.blogger.com/blogger/1283/1487/320/IMGP4005.jpg\" style=\"cursor: pointer; float: left; height: 204px; margin: 0pt 10px 10px 0pt; width: 273px;\" /></a>mprueba c&oacute;mo el lcd dispone de una zona de memoria, correspondiente con cada posici&oacute;n de car&aacute;cter a escribir, a la que se puede acceder mediante un comando donde se le indica tal posici&oacute;n (jo ke l&iacute;o). El problema es que, cuando llamamos a la funci&oacute;n <span style=\"font-style: italic;\">posicionar_cursor</span> con un entero, por ejemplo, el 42, la funci&oacute;n tiene que comprobar, en primer lugar, que se encuentra entre el 1 y el 80, para, despu&eacute;s, indicar en los 7 bits de datos, el entero 42. Para ello debe convertirse el 42 a binario, operaci&oacute;n que se lleva a cabo en las l&iacute;neas sucesivas. En ellas, se va insertando temporalmente cada uno de los bits de datos (del 06 al 12 para Arduino) en su formato en alta o baja (H06H07L08 ...). Finalmente se a&ntilde;ade a ese archivo los bits en alta y baja correspondientes a la configuraci&oacute;n de la se&ntilde;al que se env&iacute;a, correspondiente al desplazamiento en el lcd (<span style=\"font-style: italic;\">H13L04L03H05D00020L05D00020 &gt;&gt; auxiliar</span> . &iquest;y... qu&eacute; significa esas l&iacute;neas siguientes? (<span style=\"font-style: italic;\">SALIDA=`sed &#39;s/n//g&#39; auxiliar` SALIDA=`echo $SALIDA | sed &#39;s/ //g&#39;`</span>) Tan s&oacute;lo eliminan los saltos de l&iacute;nea que hemos ido creando al a&ntilde;adir elementos al archivo auxiliar, adem&aacute;s de los espacios en blanco, para que puedan ser interpretados correctamante al hacer <span style=\"font-style: italic;\">echo</span>. Finalmente enviamos los bits a Arduino. <a href=\"http://photos1.blogger.com/blogger/1283/1487/1600/IMGP4004.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" src=\"http://photos1.blogger.com/blogger/1283/1487/320/IMGP4004.jpg\" style=\"cursor: pointer; float: left; height: 222px; margin: 0pt 10px 10px 0pt; width: 298px;\" /></a> Otro paso importante es la propia escritura de un car&aacute;cter. Cuando llamemos finalmente a la funci&oacute;n <span style=\"font-style: italic;\">lcd mi_nombre_es_edu </span> tenemos que ser capaces de escribir cada uno de esos car&aacute;cteres. Para ello necesitamos hacer algo tan tedioso como representar el abecedario m&aacute;s b&aacute;sico con el que podemos trabajar asoci&aacute;ndolo a su c&oacute;digo binario en &quot;pseudoASCII&quot; (ver c&oacute;digos del lcd) junto a los bits de control para enviarlo por el puerto serie a Arduino. La funci&oacute;n consiste en un simple <span style=\"font-style: italic;\">case</span> sobre todo el conjunto de valores. Finalmente nos queda tratar la cadena tal cual nos la dan a la funci&oacute;n principal. Pero, un problema grave es c&oacute;mo poder escribir espacios en blanco, y tratar adem&aacute;s posibles variables a la entrada de la funci&oacute;n. Es decir, imaginemos que tenemos la cadena &quot;Tengo 20 monedas&quot;. Si pasamos la cadena en cuesti&oacute;n a la funci&oacute;n, tenemos <span style=\"font-style: italic;\">./lcd Tengo 20 monedas</span> entonces estar&iacute;amos dando por pa<a href=\"http://photos1.blogger.com/blogger/1283/1487/1600/IMGP4007.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" src=\"http://photos1.blogger.com/blogger/1283/1487/320/IMGP4007.jpg\" style=\"cursor: pointer; float: left; height: 356px; margin: 0pt 10px 10px 0pt; width: 257px;\" /></a>r&aacute;metros a $1 = Tengo, a $2 = 20 y a $3= monedas. Tratarlas por separados cada uno de los par&aacute;metros es dif&iacute;cil. Para ello debemos reunir todos los par&aacute;metros. Adem&aacute;s, necesitamos contar cuantos caracteres tiene la cadena. Para ello eliminamos los posibles espacios en blanco que haya y guardamos la cadena en la variable CADENA (<span style=\"font-style: italic;\">CADENA=`echo $* | sed &#39;s/ //g&#39; | cat`</span>), y despu&eacute;s contamos los car&aacute;cteres que tiene la cadena (eliminando el salto de l&iacute;nea). Finalmente, y tras comprobar que la cadena tiene al menos 1 car&aacute;cter, vemos cu&aacute;l ser&iacute;a la mejor representaci&oacute;n de la cadena. Esto es, ya vimos qu&eacute; ocurrir&iacute;a si la cadena ten&iacute;a 17 caracteres. Tan s&oacute;lo hab&iacute;a que posicionarse en la posicion 1 de la 2&ordf; fila. pero &iquest;Qu&eacute; ocurrir&iacute;a si la palabra tuviese (2 x 16) + 1 car&aacute;cteres? En ese caso, ni a&uacute;n pasando por la segunda fila entrar&iacute;a la palabra. En este &uacute;ltimo caso es mejor dejar la palabra en la primera fila y desplazar toda la &quot;ventana&quot; haciendo &quot;banner&quot; a la derecha, siempre y cuando no supere la longitud de (2x40). De esto es, esencialmente, de lo que se encarga la &uacute;ltima parte, de comprobar qu&eacute; representaci&oacute;n y qu&eacute; movimientos debe hacer la funci&oacute;n para que quede &quot;m&aacute;s bonito&quot;. Por &uacute;ltimo, se imprime la cadena.<a href=\"http://photos1.blogger.com/blogger/1283/1487/1600/IMGP4003.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" src=\"http://photos1.blogger.com/blogger/1283/1487/320/IMGP4003.jpg\" style=\"cursor: pointer; float: right; height: 213px; margin: 0pt 0pt 10px 10px; width: 282px;\" /></a> Una vez &quot;creado&quot; el controlador del lcd, nos queda bastante simplificada la representaci&oacute;n de informaci&oacute;n en el lcd. Tan s&oacute;lo tenemos que aplicar la expresi&oacute;n <span style=\"font-style: italic;\">./lcd La_cadena_que_quiero_escribir</span>, para que me muestre la informaci&oacute;n de la forma m&aacute;s conveniente para que entre en el lcd. Ahora crearemos la aplicaci&oacute;n para monitorear la temperatura exterior, interior, la hora y diversos mensajes &uacute;tiles que nos permiten sacar la funcionalidad al lcd. Veamos el c&oacute;digo:
	<pre class=\"code\" style=\"height: 300px; margin: 0px; overflow: auto; width: 100%;\">
	#!/bin/ash

imprimir_temperatura()
{
/www/arduino/adquisitor $1 &amp;
sleep 1
ps &gt; procesos
cat procesos | grep adquisitor | cut -b 1,2,3,4,5 &gt; proceso
PROCESO=`cat proceso`
kill -9 $PROCESO
VARIABLE=`cat nivel | cut -b 1,2,3,4`
AUX=`expr 870 - $VARIABLE`
TEMPERATURA=`expr $AUX / 5`
if test $1 -eq 0
then
TEMPERATURA=`expr $TEMPERATURA - 7`
else
if test $1 -eq 2
then
TEMPERATURA=`expr $TEMPERATURA + 2`
fi
fi
echo $TEMPERATURA
}

imprimir_temperaturas()
{
TEMPERATURA0=`imprimir_temperatura 0`
TEMPERATURA1=`imprimir_temperatura 2`
/tmp/mmc/Display/iniciar_lcd
/tmp/mmc/Display/lcd Temp._Int:_ $TEMPERATURA0 _C
/tmp/mmc/Display/posicionar 41
/tmp/mmc/Display/lcd Temp._Ext:_ $TEMPERATURA1 _C
}


J=1
while test $J -le 2
do
imprimir_temperaturas
sleep 3
/tmp/mmc/Display/iniciar_lcd
/tmp/mmc/Display/lcd ==_ROUTER_FON_==
sleep 3
imprimir_temperaturas
sleep 3
/tmp/mmc/Display/iniciar_lcd
/tmp/mmc/Display/lcd By_Eduardo_Marin
sleep 3
imprimir_temperaturas
sleep 3
/tmp/mmc/Display/iniciar_lcd
HORA=`date |cut -c 12-19`
/tmp/mmc/Display/lcd  ===_ $HORA _===
sleep 3
#/tmp/mmc/wifi_sd/escaner
done
</pre>
	<a href=\"http://photos1.blogger.com/blogger/1283/1487/1600/IMGP4419.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" src=\"http://photos1.blogger.com/blogger/1283/1487/320/IMGP4419.jpg\" style=\"cursor: pointer; float: left; height: 184px; margin: 0pt 10px 10px 0pt; width: 246px;\" /></a>Hab&iacute;amos visto en otro post anterior c&oacute;mo adquirir un valor num&eacute;rico que nos daba la temperatura de un sensor conectado a una de las entradas anal&oacute;gicas. Pues bien, en la aplicaci&oacute;n descrita mostraremos 2 temperaturas, la hora local, y mensajes escritos en el lcd. Las primeras l&iacute;neas, correspondientes a la funci&oacute;n i<span style=\"font-style: italic;\">mprimir_temperatura</span> llaman al script <span style=\"font-style: italic;\">adquisitor</span> en modo background. Para terminar el proceso, pues hace uso de la funci&oacute;n cat sobre la entrada serie, y &eacute;sta no muere a no ser que se la mate, se lleva a cabo esa operaci&oacute;n. Para ello se caza su id de ejecuci&oacute;n haciendo uso de <span style=\"font-style: italic;\">ps</span> para m&aacute;s tarde, matarlo. Una vez matado, leemos la informaci&oacute;n que ha volcado la aplicaci&oacute;n anterior sobre el archivo <span style=\"font-style: italic;\">nivel</span>. Despu&eacute;s se hace una conversi&oacute;n de los 1024 niveles disponibles a la temperatura adecuada (para ello se hace un &quot;calibrado&quot; manual). Esta parte se aplica a las dos temperaturas. La siguiente funci&oacute;n, <span style=\"font-style: italic;\">imprimir_temperaturas</span> lleva a cabo la impresi&oacute;n sobre el lcd, mostrando un<a href=\"http://photos1.blogger.com/blogger/1283/1487/1600/IMGP4420.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" src=\"http://photos1.blogger.com/blogger/1283/1487/320/IMGP4420.jpg\" style=\"cursor: pointer; float: left; height: 183px; margin: 0pt 10px 10px 0pt; width: 245px;\" /></a> mensaje de indicaci&oacute;n <span style=\"font-style: italic;\">Temp. Int</span>. Cabe destacar c&oacute;mo se lleva a cabo el posicionamiento del cursor para imprimir la siguiente l&iacute;nea (<span style=\"font-style: italic;\">posicionar</span>), que, aunque no corresponde a la funci&oacute;n interna del script <span style=\"font-style: italic;\">lcd</span>, se trata de la misma idea, pues est&aacute; en otra funci&oacute;n llamada as&iacute;. Por &uacute;ltimo, quedar&iacute;a la parte principal (main) del script. Esta parte se ejecuta indefinidamente, de ah&iacute; el while infinito, en el que se imprimen las<a href=\"http://photos1.blogger.com/blogger/1283/1487/1600/IMGP4407.0.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" src=\"http://photos1.blogger.com/blogger/1283/1487/320/IMGP4407.0.jpg\" style=\"cursor: pointer; float: right; height: 291px; margin: 0pt 0pt 10px 10px; width: 218px;\" /></a> temperaturas, se muestra mensaje de FON, se vuelven a imprimir temperaturas... Para que &eacute;ste script se lance de forma autom&aacute;tica hay que insertar un enlace a &eacute;ste en /etc/init.d/. Pues bien, ya s&eacute; que pueden quedar bastante confusas algunas ideas. Puede que algunos puntos no est&eacute;n lo suficientemente desarrollados o que, simplemente, haya cosas que no tengan sentido, pero tampoque ten&iacute;a la necesidad de crear este tutorial si no fuese porque, de no ser as&iacute;, a m&iacute; se me olvidar&iacute;a todo el proceso (de hecho ya hay cosas que no recuerdo muy bien porqu&eacute; las hice), y ser&iacute;a una l&aacute;stima para m&iacute;. De todas formas, espero que le pueda servir a alguno. Byes byes. <embed align=\"middle\" bgcolor=\"#ffffff\" flashvars=\"playerMode=embedded\" id=\"VideoPlayback\" quality=\"best\" salign=\"TL\" scale=\"noScale\" src=\"http://video.google.com/googleplayer.swf?docId=1938618718490087463&amp;hl=es\" style=\"height: 326px; width: 400px;\" type=\"application/x-shockwave-flash\"></embed></div>
",
          "wp:post_id": "173",
          "wp:post_date": "2011-04-24 10:58:21",
          "wp:post_date_gmt": "2011-04-24 10:58:21",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "version-1-0-display-en-router-linksys-arduino",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "sin-categoria",
            "#cdata-section": "Sin categoría"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          },
          "wp:comment": {
            "wp:comment_id": "2",
            "wp:comment_author": "Luis",
            "wp:comment_author_email": "lulope11@yahoo.es",
            "wp:comment_author_IP": "88.15.206.180",
            "wp:comment_date": "2011-04-29 17:52:22",
            "wp:comment_date_gmt": "2011-04-29 17:52:22",
            "wp:comment_content": "Hola,
Buscando información en google sobre el router SMC7804WBRA y su conector interno de 10 pines he encontrado este tutorial.
Desde luego el 99% de lo que explicas está muy por encima de mis conocimientos básicos de electrónica/informática, pero hay algunas cosas de las que había oido hablar como la plataforma Arduino.
Me imagino que el mod que le has hecho al LinkSys puede ser exportado a mi router SMC , aunque como he dicho anteriormente, la mayoría sobrepasa mis conocimientos actuales.
El router SMC lo he rescatado despues de comprobar que lo que estaba estropeado era el adaptador de corriente y no el router en sí, pero el único problema que tengo es que ya no sincroniza (no es problema de línea, ni de configuración), simplemente no hace apenas intentos por conectarse al ISP.
No se si al petar el adaptador, el router también salió mal parado o el adaptador de corriente nuevo (mismo voltaje y Amperios que el anterior) no le gusta al router.

Finalmente felicitarte por compartir el tutorial, que ya veo que está recién salido del horno.
Saludos.",
            "wp:comment_approved": "1",
            "wp:comment_parent": "0",
            "wp:comment_user_id": "0"
          }
        },
        {
          "link": "http://eduardomarin.es/blog/?p=174",
          "pubDate": "Tue, 31 Dec 2013 09:28:39 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin-nefele.rhcloud.com/?p=174"
          },
          "content:encoded": " ",
          "wp:post_id": "174",
          "wp:post_date": "2013-12-31 09:28:39",
          "wp:post_date_gmt": "2013-12-31 09:28:39",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "174",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "4",
          "wp:post_type": "nav_menu_item",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "nav_menu",
            "-nicename": "principal",
            "#cdata-section": "principal"
          },
          "wp:postmeta": [
            {
              "wp:meta_key": "_menu_item_type",
              "wp:meta_value": "post_type"
            },
            {
              "wp:meta_key": "_menu_item_menu_item_parent",
              "wp:meta_value": "0"
            },
            {
              "wp:meta_key": "_menu_item_object_id",
              "wp:meta_value": "16"
            },
            {
              "wp:meta_key": "_menu_item_object",
              "wp:meta_value": "page"
            },
            { "wp:meta_key": "_menu_item_target" },
            {
              "wp:meta_key": "_menu_item_classes",
              "wp:meta_value": "a:1:{i:0;s:0:\"\";}"
            },
            { "wp:meta_key": "_menu_item_xfn" },
            { "wp:meta_key": "_menu_item_url" }
          ]
        },
        {
          "link": "http://eduardomarin.es/blog/?p=175",
          "pubDate": "Tue, 31 Dec 2013 09:28:39 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin-nefele.rhcloud.com/?p=175"
          },
          "content:encoded": " ",
          "wp:post_id": "175",
          "wp:post_date": "2013-12-31 09:28:39",
          "wp:post_date_gmt": "2013-12-31 09:28:39",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "175",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "2",
          "wp:post_type": "nav_menu_item",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "nav_menu",
            "-nicename": "principal",
            "#cdata-section": "principal"
          },
          "wp:postmeta": [
            {
              "wp:meta_key": "_menu_item_type",
              "wp:meta_value": "post_type"
            },
            {
              "wp:meta_key": "_menu_item_menu_item_parent",
              "wp:meta_value": "0"
            },
            {
              "wp:meta_key": "_menu_item_object_id",
              "wp:meta_value": "11"
            },
            {
              "wp:meta_key": "_menu_item_object",
              "wp:meta_value": "page"
            },
            { "wp:meta_key": "_menu_item_target" },
            {
              "wp:meta_key": "_menu_item_classes",
              "wp:meta_value": "a:1:{i:0;s:0:\"\";}"
            },
            { "wp:meta_key": "_menu_item_xfn" },
            { "wp:meta_key": "_menu_item_url" }
          ]
        },
        {
          "link": "http://eduardomarin.es/blog/?p=176",
          "pubDate": "Tue, 31 Dec 2013 09:28:39 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin-nefele.rhcloud.com/?p=176"
          },
          "content:encoded": " ",
          "wp:post_id": "176",
          "wp:post_date": "2013-12-31 09:28:39",
          "wp:post_date_gmt": "2013-12-31 09:28:39",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "176",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "1",
          "wp:post_type": "nav_menu_item",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "nav_menu",
            "-nicename": "principal",
            "#cdata-section": "principal"
          },
          "wp:postmeta": [
            {
              "wp:meta_key": "_menu_item_type",
              "wp:meta_value": "post_type"
            },
            {
              "wp:meta_key": "_menu_item_menu_item_parent",
              "wp:meta_value": "0"
            },
            {
              "wp:meta_key": "_menu_item_object_id",
              "wp:meta_value": "9"
            },
            {
              "wp:meta_key": "_menu_item_object",
              "wp:meta_value": "page"
            },
            { "wp:meta_key": "_menu_item_target" },
            {
              "wp:meta_key": "_menu_item_classes",
              "wp:meta_value": "a:1:{i:0;s:0:\"\";}"
            },
            { "wp:meta_key": "_menu_item_xfn" },
            { "wp:meta_key": "_menu_item_url" }
          ]
        },
        {
          "title": "lab",
          "link": "http://eduardomarin.es/blog/?p=177",
          "pubDate": "Tue, 31 Dec 2013 09:28:39 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin-nefele.rhcloud.com/?p=177"
          },
          "wp:post_id": "177",
          "wp:post_date": "2013-12-31 09:28:39",
          "wp:post_date_gmt": "2013-12-31 09:28:39",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "lab",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "3",
          "wp:post_type": "nav_menu_item",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "nav_menu",
            "-nicename": "principal",
            "#cdata-section": "principal"
          },
          "wp:postmeta": [
            {
              "wp:meta_key": "_menu_item_type",
              "wp:meta_value": "custom"
            },
            {
              "wp:meta_key": "_menu_item_menu_item_parent",
              "wp:meta_value": "0"
            },
            {
              "wp:meta_key": "_menu_item_object_id",
              "wp:meta_value": "177"
            },
            {
              "wp:meta_key": "_menu_item_object",
              "wp:meta_value": "custom"
            },
            { "wp:meta_key": "_menu_item_target" },
            {
              "wp:meta_key": "_menu_item_classes",
              "wp:meta_value": "a:1:{i:0;s:0:\"\";}"
            },
            { "wp:meta_key": "_menu_item_xfn" },
            {
              "wp:meta_key": "_menu_item_url",
              "wp:meta_value": "http://eduardomarin.es/projects/"
            }
          ]
        },
        {
          "title": "cross_domain_iframe_01",
          "link": "http://eduardomarin.es/blog/?attachment_id=178",
          "pubDate": "Tue, 08 Nov 2011 19:04:29 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/11/cross_domain_iframe_01.png"
          },
          "wp:post_id": "178",
          "wp:post_date": "2011-11-08 19:04:29",
          "wp:post_date_gmt": "2011-11-08 19:04:29",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "cross_domain_iframe_01",
          "wp:status": "inherit",
          "wp:post_parent": "170",
          "wp:menu_order": "0",
          "wp:post_type": "attachment",
          "wp:is_sticky": "0",
          "wp:attachment_url": "http://eduardomarin.es/wp-content/uploads/2011/11/cross_domain_iframe_01.png",
          "wp:postmeta": [
            {
              "wp:meta_key": "_wp_attached_file",
              "wp:meta_value": "2011/11/cross_domain_iframe_01.png"
            },
            {
              "wp:meta_key": "_wp_attachment_metadata",
              "wp:meta_value": "a:5:{s:5:\"width\";i:378;s:6:\"height\";i:218;s:4:\"file\";s:34:\"2011/11/cross_domain_iframe_01.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:34:\"cross_domain_iframe_01-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:34:\"cross_domain_iframe_01-300x173.png\";s:5:\"width\";i:300;s:6:\"height\";i:173;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}"
            }
          ]
        },
        {
          "title": "carousel",
          "link": "http://eduardomarin.es/blog/?attachment_id=213",
          "pubDate": "Fri, 22 Mar 2013 07:48:58 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2013/03/carousel.jpg"
          },
          "wp:post_id": "213",
          "wp:post_date": "2013-03-22 07:48:58",
          "wp:post_date_gmt": "2013-03-22 07:48:58",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "carousel",
          "wp:status": "inherit",
          "wp:post_parent": "212",
          "wp:menu_order": "0",
          "wp:post_type": "attachment",
          "wp:is_sticky": "0",
          "wp:attachment_url": "http://eduardomarin.es/wp-content/uploads/2013/03/carousel.jpg",
          "wp:postmeta": [
            {
              "wp:meta_key": "_wp_attached_file",
              "wp:meta_value": "2013/03/carousel.jpg"
            },
            {
              "wp:meta_key": "_wp_attachment_metadata",
              "wp:meta_value": "a:5:{s:5:\"width\";i:497;s:6:\"height\";i:600;s:4:\"file\";s:20:\"2013/03/carousel.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"carousel-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"carousel-248x300.jpg\";s:5:\"width\";i:248;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:20:\"carousel-497x270.jpg\";s:5:\"width\";i:497;s:6:\"height\";i:270;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}"
            }
          ]
        },
        {
          "title": "angularMap",
          "link": "http://eduardomarin.es/blog/?attachment_id=221",
          "pubDate": "Wed, 22 May 2013 05:45:18 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2013/05/angularMap.jpg"
          },
          "wp:post_id": "221",
          "wp:post_date": "2013-05-22 05:45:18",
          "wp:post_date_gmt": "2013-05-22 05:45:18",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "angularmap",
          "wp:status": "inherit",
          "wp:post_parent": "219",
          "wp:menu_order": "0",
          "wp:post_type": "attachment",
          "wp:is_sticky": "0",
          "wp:attachment_url": "http://eduardomarin.es/wp-content/uploads/2013/05/angularMap.jpg",
          "wp:postmeta": [
            {
              "wp:meta_key": "_wp_attached_file",
              "wp:meta_value": "2013/05/angularMap.jpg"
            },
            {
              "wp:meta_key": "_wp_attachment_metadata",
              "wp:meta_value": "a:5:{s:5:\"width\";i:720;s:6:\"height\";i:596;s:4:\"file\";s:22:\"2013/05/angularMap.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"angularMap-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"angularMap-300x248.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:248;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:22:\"angularMap-604x270.jpg\";s:5:\"width\";i:604;s:6:\"height\";i:270;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}"
            }
          ]
        },
        {
          "title": "inverted_pendulum",
          "link": "http://eduardomarin.es/blog/?attachment_id=228",
          "pubDate": "Wed, 04 Sep 2013 07:03:12 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2013/09/inverted_pendulum.jpg"
          },
          "wp:post_id": "228",
          "wp:post_date": "2013-09-04 07:03:12",
          "wp:post_date_gmt": "2013-09-04 07:03:12",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "inverted_pendulum",
          "wp:status": "inherit",
          "wp:post_parent": "227",
          "wp:menu_order": "0",
          "wp:post_type": "attachment",
          "wp:is_sticky": "0",
          "wp:attachment_url": "http://eduardomarin.es/wp-content/uploads/2013/09/inverted_pendulum.jpg",
          "wp:postmeta": [
            {
              "wp:meta_key": "_wp_attached_file",
              "wp:meta_value": "2013/09/inverted_pendulum.jpg"
            },
            {
              "wp:meta_key": "_wp_attachment_metadata",
              "wp:meta_value": "a:5:{s:5:\"width\";i:719;s:6:\"height\";i:569;s:4:\"file\";s:29:\"2013/09/inverted_pendulum.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"inverted_pendulum-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:29:\"inverted_pendulum-300x237.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:237;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:29:\"inverted_pendulum-604x270.jpg\";s:5:\"width\";i:604;s:6:\"height\";i:270;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}"
            }
          ]
        },
        {
          "title": "sublime_arduino",
          "link": "http://eduardomarin.es/blog/?attachment_id=234",
          "pubDate": "Sat, 16 Nov 2013 09:48:09 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2013/11/sublime_arduino.jpg"
          },
          "wp:post_id": "234",
          "wp:post_date": "2013-11-16 09:48:09",
          "wp:post_date_gmt": "2013-11-16 09:48:09",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "sublime_arduino",
          "wp:status": "inherit",
          "wp:post_parent": "233",
          "wp:menu_order": "0",
          "wp:post_type": "attachment",
          "wp:is_sticky": "0",
          "wp:attachment_url": "http://eduardomarin.es/wp-content/uploads/2013/11/sublime_arduino.jpg",
          "wp:postmeta": [
            {
              "wp:meta_key": "_wp_attached_file",
              "wp:meta_value": "2013/11/sublime_arduino.jpg"
            },
            {
              "wp:meta_key": "_wp_attachment_metadata",
              "wp:meta_value": "a:5:{s:5:\"width\";i:763;s:6:\"height\";i:674;s:4:\"file\";s:27:\"2013/11/sublime_arduino.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:27:\"sublime_arduino-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:27:\"sublime_arduino-300x265.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:265;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:27:\"sublime_arduino-604x270.jpg\";s:5:\"width\";i:604;s:6:\"height\";i:270;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}"
            }
          ]
        },
        {
          "title": "Control Webcam - Arduino & Linksys",
          "link": "http://eduardomarin.es/blog/?p=31",
          "pubDate": "Mon, 06 Jun 2011 19:30:58 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?p=31"
          },
          "content:encoded": "<p>
	<a href=\"http://4.bp.blogspot.com/_sCdzMH40iYM/RvVgSsBanbI/AAAAAAAAAnI/Fi3-9giGnm4/s1600-h/interfaz.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" id=\"BLOGGER_PHOTO_ID_5113098826120076722\" src=\"http://4.bp.blogspot.com/_sCdzMH40iYM/RvVgSsBanbI/AAAAAAAAAnI/Fi3-9giGnm4/s320/interfaz.jpg\" style=\"cursor: pointer; display: block; margin: 0px auto 10px; text-align: center;\" /></a><span style=\"font-weight: bold;\">Nota:</span> Versi&oacute;n revisada con servidor thttp + php <a href=\"http://ahorcandoeltiempo.blogspot.com/2008/11/control-webcam-20.html\">aqu&iacute;</a>.</p>
<div style=\"text-align: justify;\">
	Hac&iacute;a ya <a href=\"http://ahorcandoeltiempo.blogspot.com/2007/02/arduino-termmetro-grfico.html\">casi un a&ntilde;o</a> que no volv&iacute;a a trastear con la placa <a href=\"http://www.arduino.cc/es/\">Arduino</a> y con el router <a href=\"http://es.wikipedia.org/wiki/WRT54G\">Linksys</a>, desde que <a href=\"http://ahorcandoeltiempo.blogspot.com/2006/10/versin-10-display-en-router-linksys.html\">mont&eacute; el display</a> en este &uacute;ltimo. Pero debe ser la presi&oacute;n psicol&oacute;gica que nos ofrece la vuelta a los libros la que haya hecho que me haya puesto a <a href=\"http://ahorcandoeltiempo.blogspot.com/\">matar el tiempo</a> entre circuitos y c&oacute;digo.</div>
<p>
	<span style=\"font-size: 130%; font-weight: bold;\">Idea--</span></p>
<div style=\"text-align: justify;\">
	La idea de este proyecto es recrear los sistemas de control de c&aacute;maras de seguridad que pueden verse en muchos centros comerciales o locales. Desde luego, la est&eacute;tica que suelen tener estos dispositivos (una semiesfera de cristal ahumado en cuyo interior gira la c&aacute;mara) dista mucho de la que yo he conseguido, pero la funcionalidad se aproxima bastante. Adem&aacute;s, dado que el control de Arduino se realiza <a href=\"http://ahorcandoeltiempo.blogspot.com/2006/09/version-11-control-linksys-arduino.html\">a trav&eacute;s del router Linksys WRT54G</a> nos ofrece la posibilidad de operar el sistema remotamente a trav&eacute;s de un cliente web, que es lo que aqu&iacute; mostraremos. As&iacute;, resumiendo, tenemos una Webcam (que realiza streaming) y que est&aacute; montada sobre un &quot;brazo&quot; compuesto por dos servomotores que son controlados por Arduino. &Eacute;ste a su vez recibe a trav&eacute;s del puerto serie que instalamos en el router Linksys las se&ntilde;ales procedentes del cliente Web que env&iacute;a la se&ntilde;al desde cualquier punto de Internet.</div>
<p>
	<a href=\"http://3.bp.blogspot.com/_sCdzMH40iYM/RvVWzcBanUI/AAAAAAAAAmQ/CLLyMQS11Uc/s1600-h/esquema.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" id=\"BLOGGER_PHOTO_ID_5113088393644514626\" src=\"http://3.bp.blogspot.com/_sCdzMH40iYM/RvVWzcBanUI/AAAAAAAAAmQ/CLLyMQS11Uc/s320/esquema.jpg\" style=\"cursor: pointer; display: block; margin: 0px auto 10px; text-align: center;\" /></a> <span style=\"font-size: 130%; font-weight: bold;\">Montaje &quot;Hardware&quot;--</span></p>
<div style=\"text-align: justify;\">
	Aunque el movimiento conseguido no es el m&aacute;s &oacute;ptimo, pues en ciertos &aacute;ngulos se pierde la orientaci&oacute;n espacial, se consiguen resultados satisfactorios mediante el montaje que hemos realizado. Hemos partido de dos servomotores para conseguir dos planos de rotaci&oacute;n. El primer plano lo forma el servomotor que va acoplado directamente a la Webcam en su centro de giro, as&iacute;, tendremos una panor&aacute;mica de 360&ordm; sobre la horizontal. El otro servomotor va acoplado perpendicularmente sobre el anterior servo perimitiendo hacer giros de 360&ordm; sobre la vertical, barriendo as&iacute; una esfera casi completa (por limitaciones de cableado).</div>
<p>
	<span style=\"font-size: 130%; font-weight: bold;\">Circuiter&iacute;a--</span></p>
<div style=\"text-align: justify;\">
	Se&ntilde;alamos que la parte principal se encuentra en torno a Arduino. As&iacute;, tendremos un cable &quot;serie&quot; que comunica a &eacute;ste con el router (y que puede verse una explicaci&oacute;n m&aacute;s detallada en <a href=\"http://ahorcandoeltiempo.blogspot.com/2006/09/conversacin-entre-arduino-y-linksys.html\">este</a> otro post), y la conexi&oacute;n que hemos tenido que realizar entre Arduino y los servomotores. El esquema puede verse en la siguiente imagen:</div>
<p>
	<a href=\"http://4.bp.blogspot.com/_sCdzMH40iYM/RvVaxsBanVI/AAAAAAAAAmY/nCeen4fWsp0/s1600-h/circuiteria.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" id=\"BLOGGER_PHOTO_ID_5113092761626254674\" src=\"http://4.bp.blogspot.com/_sCdzMH40iYM/RvVaxsBanVI/AAAAAAAAAmY/nCeen4fWsp0/s320/circuiteria.jpg\" style=\"cursor: pointer; display: block; margin: 0px auto 10px; text-align: center;\" /></a> <span style=\"font-size: 130%; font-weight: bold;\">C&oacute;digo en Arduino--</span></p>
<div style=\"text-align: justify;\">
	Respecto al c&oacute;digo que se implementa en Arduino hay que decir que parte se basa en esquemas y proyectos que ya realic&eacute; con anterioridad, sobretodo a la hora de comunicarse el router con la placa base. A&uacute;n as&iacute; resumir&eacute; los conceptos fundamentales. Por un lado, el router Linksys dispone de un coraz&oacute;n basado en linux y, por lo tanto, ofrece un shell y un int&eacute;rprete de shell script que hace muy flexible y potente su uso. Adem&aacute;s gracias al puerto serie que instalamos podemos enviar a Arduino flujos de bytes con significado subjetivo. En nuestro caso, y he aqu&iacute; el cambio respecto a post anteriores, tan s&oacute;lo tenemos que mover dos pines (que se asocian a los dos servomotores). Por otro lado, tengo que se&ntilde;alar que los servomotores han perdido la funcionalidad de posicionamiento, es decir, tuve que usarlos para rotaci&oacute;n cont&iacute;nua y no he querido molestarme en volver a abrirlos para recuperarlos (aunque eso hubiese sido lo mejor). Debido a esto sus &aacute;ngulos de posici&oacute;n no pueden controlarse con exactitud y su movimiento ahora se basan en tiempo de rotaci&oacute;n. Por lo tanto, Linksys debe mandar a Arduino informaci&oacute;n sobre el tiempo que estar&aacute;n rotando. Por conveniencia usaremos la se&ntilde;al Xi0000 para referirnos al servomotor X que girar&aacute; en la direcci&oacute;n i (izquierda) y lo har&aacute; durante un tiempo de 0000 milisegundos (o microsegundos?? ya no recuerdo). Por lo tanto, en el router habr&aacute; un programa en shell script que se encargar&aacute; de enviar a trav&eacute;s del puerto serie dichas codificaciones. En Arduino existe el siguiente c&oacute;digo para manejar tanto la se&ntilde;al proveniente del puerto serie como la necesaria para manejar los servomotores:</div>
<pre class=\"code\" style=\"height: 300px; margin: 0px; overflow: auto; width: 100%;\">
#include &quot;WProgram.h&quot;

void pulseon(int rin, int pulso);

/* Adquisiciu00f3n de datos y control de salidas para

linksys WRT45GL a travu00e9s de puerto serie */



//Definimos las variables necesarias

int i,valor,valoraux,digito,pin,retraso;

byte dato,decenas,unidades,sentido,millares,centenas,motor;

int x = 13;

int y = 12;



void setup(){

for (i=2;i&lt;=13;i++){

pinMode(i,OUTPUT);

}

Serial.begin(9600);

}

void pulseon (int rin, int pulso){

digitalWrite(rin,HIGH);

delayMicroseconds(pulso);

digitalWrite(rin,LOW);

}

void loop(){



//Comprobamos si llega seu00f1al del router:

while(! Serial.available()){

}

motor=Serial.read();

if (motor==&#39;X&#39; || motor==&#39;Y&#39;){

while(! Serial.available()){

}

sentido=Serial.read();



while(! Serial.available()){

}

millares=Serial.read();

//eco de comprobacion serialWrite(decenas);

pin=(millares-48)*1000;



while(! Serial.available()){

}

centenas=Serial.read();

//eco de comprobacion serialWrite(decenas);

pin=pin + (centenas-48)*100;



while(! Serial.available()){

}

decenas=Serial.read();

//eco de comprobacion serialWrite(decenas);

pin=pin + (decenas-48)*10;



while(! Serial.available()){

}

unidades=Serial.read();

//eco de comprobacion serialWrite(unidades);

retraso=pin+(unidades-48);

if(motor==&#39;X&#39;){

if(sentido==&#39;d&#39;){

for (int i=0; i&lt;= (retraso); i++){

pulseon(x,1700);

delay(19);

}

}

else{

for (int i=0; i&lt;= (retraso); i++){

pulseon(x,1300);

delay(19);

}

}

}

if(motor==&#39;Y&#39;){

if(sentido==&#39;d&#39;){

for (int i=0; i&lt;= (retraso); i++){

pulseon(y,1200);

delay(19);

}

}

else{

for (int i=0; i&lt;= (retraso); i++){

pulseon(y,1513);

delay(19);

}

}

}

}



}




</pre>
<div style=\"text-align: justify;\">
	Una vez que los servomotores responden convenientemente a las se&ntilde;ales que env&iacute;a el router ya podemos trabajar algo m&aacute;s el interfaz con Linksys para hacerlo m&aacute;s intuitivo y atractivo. Una de las ventajas de nuestro router es la de ofrecernos un servidor web con una puerta trasera a linux. As&iacute;, existe una comunicaci&oacute;n entre nuestra web y nuestro linux totalmente transparente. La idea del interfaz es visualizar las im&aacute;genes de la webcam y aportar los controles b&aacute;sicos para mover la c&aacute;mara. Intuitivamente aparecen cuatro movimientos (arriba, abajo, derecha, izquierda) que implementaremos con cuatro simples botones. Como nuestro objetivo no es crear una p&aacute;gina perfecta, usaremos html b&aacute;sico con un poquito de javascript que nos ofrece el programa que nos realiza el streaming de v&iacute;deo. Cada vez que oprimamos uno de los cuatro botones nos refrescar&aacute; la p&aacute;gina (he aqu&iacute; una soluci&oacute;n poco elegante) y ejecutar&aacute; el c&oacute;digo shellscript que mueve los servomotores. As&iacute;, el c&oacute;digo de nuestra p&aacute;gina ser&iacute;a el siguiente:</div>
<pre class=\"code\" style=\"height: 300px; margin: 0px; overflow: auto; width: 100%;\">
&lt;HTML&gt;&lt;HEAD&gt;&lt;BODY&gt;

&lt;script LANGUAGE=&quot;JavaScript&quot;&gt;

&lt;!--

function Mostrar(boton)

{

sc.executeScript(&quot;echo Xi0001&gt;/dev/cua/1&quot;);

return true;

}

//--&gt;

&lt;/script&gt;



&lt;div align= center&gt;&lt;h1&gt;Control C&aacute;mara Web&lt;/h1&gt;&lt;/div&gt;&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;



&lt;div align=center&gt;

&lt;table&gt;

&lt;tr&gt;

&lt;td colspan=&quot;3&quot;&gt;&lt;div align=center&gt;

&lt;form method=get action=&quot;/cgi-bin/arriba.sh&quot;&gt;

&lt;input type=&quot;hidden&quot; name=&quot;IsisScript&quot; value=&quot;./prueba.sh&quot;&gt;

&lt;input type=&quot;submit&quot; name=&quot;Arriba&quot; value=&quot; Arriba &quot;&gt;

&lt;/form&gt;

&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;&lt;form method=get action=&quot;/cgi-bin/izquierda.sh&quot;&gt;

&lt;input type=&quot;hidden&quot; name=&quot;IsisScript&quot; value=&quot;./prueba.sh&quot;&gt;

&lt;input type=&quot;submit&quot; name=&quot;Izquierda&quot; value=&quot;&lt;--&quot;&gt;

&lt;/form&gt;

&lt;/td&gt;

&lt;td&gt;&lt;div align= center&gt;&lt;img src=&quot;loading.jpg&quot; class=&quot;webcam_in_frame&quot; id=&quot;webcam1&quot; onmousedown=&quot;PTZMouseDown1(event)&quot; width=&quot;320&quot; height=&quot;240&quot; alt=&quot;webcam&quot; /&gt;&lt;/div&gt;&lt;/td&gt;

&lt;td&gt;&lt;form method=get action=&quot;/cgi-bin/derecha.sh&quot;&gt;

&lt;input type=&quot;hidden&quot; name=&quot;IsisScript&quot; value=&quot;./prueba.sh&quot;&gt;

&lt;input type=&quot;submit&quot; name=&quot;Derecha&quot; value=&quot;--&gt;&quot;&gt;

&lt;/form&gt;

&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td colspan=&quot;3&quot;&gt;&lt;div align=center&gt;&lt;form method=get action=&quot;/cgi-bin/abajo.sh&quot;&gt;

&lt;input type=&quot;hidden&quot; name=&quot;IsisScript&quot; value=&quot;./prueba.sh&quot;&gt;

&lt;input type=&quot;submit&quot; name=&quot;Abajo&quot; value=&quot; Abajo &quot;&gt;

&lt;/form&gt;

&lt;/div&gt;&lt;/td&gt;

&lt;/tr&gt;



&lt;/table&gt;&lt;/div&gt;





&lt;script type=&quot;text/javascript&quot;&gt;

&lt;!--

errorimg1= 0;

document.images.webcam1.onload = DoIt1;

document.images.webcam1.onerror = ErrorImage1;

function LoadImage1()

{

uniq1 = Math.random();

document.images.webcam1.src = &quot;http://xxxxx/cam_1.jpg?uniq=&quot;+uniq1;

window.status = &quot;[powered by webcamXP]&quot;;

}

function PTZMouseDown1(e)

{

var IE = document.all?true:false;

var x,y;

var myx,myy;

var myifr = document.getElementById(&quot;_iframe-ptz&quot;);

tp = getElPos1();

myx = tp[0];

myy = tp[1];

if(IE){

x = event.clientX - myx + document.body.scrollLeft;

y = event.clientY - myy + document.body.scrollTop;

} else {

x = e.pageX - myx;

y = e.pageY - myy;

}

//alert(x + &quot; :: &quot; + y);

if (myifr != null) myifr.src = &quot;http://xxxxx/ptz?source=1&amp;moveto_x=&quot; + x + &quot;&amp;moveto_y=&quot; + y +&quot;&quot;;

return true;

}

function getElPos1()

{

el = document.images.webcam1;

x = el.offsetLeft;

y = el.offsetTop;

elp = el.offsetParent;

while(elp!=null)

{ x+=elp.offsetLeft;

y+=elp.offsetTop;

elp=elp.offsetParent;

}

return new Array(x,y);

}

function ErrorImage1()

{

errorimg1++;

if (errorimg1&gt;1){

document.images.webcam1.onload = &quot;&quot;;

document.images.webcam1.src = &quot;http://www.darkboard.net/webcam/offline.jpg&quot;;

}else{

uniq1 = Math.random();

document.images.webcam1.src = &quot;http://xxxxx/cam_1.jpg?uniq=&quot;+uniq1;

}

}

function DoIt1()

{

errorimg1=0;

window.setTimeout(&quot;LoadImage1();&quot;, 70);

}

//--&gt;

&lt;/script&gt;

&lt;/BODY&gt;

&lt;/HTML&gt;
</pre>
<p>
	Y el c&oacute;digo de uno de los botones (arriba) ser&iacute;a este otro: <code> #!/bin/sh echo Xd0001&gt;/dev/cua/1 echo Content-type: text/html echo &quot;&quot; /bin/cat &lt;&lt; EOM &lt;HTML&gt; &lt;HEAD&gt; &lt;META HTTP-EQUIV=&quot;Refresh&quot; CONTENT=&quot;0; URL=/Mis_Webs/webcam/webcam.html&quot;&gt; &lt;/HEAD&gt; EOM </code> Pod&eacute;is ver fotos:</p>
<div align=\"center\">
	<a href=\"http://1.bp.blogspot.com/_sCdzMH40iYM/RvVdj8BanWI/AAAAAAAAAmg/1BGknY0alqI/s1600-h/IMGP0730.JPG\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" id=\"BLOGGER_PHOTO_ID_5113095823937936738\" src=\"http://1.bp.blogspot.com/_sCdzMH40iYM/RvVdj8BanWI/AAAAAAAAAmg/1BGknY0alqI/s200/IMGP0730.JPG\" style=\"cursor: pointer;\" /></a><a href=\"http://2.bp.blogspot.com/_sCdzMH40iYM/RvVdyMBanXI/AAAAAAAAAmo/tJoAI5FSyf4/s1600-h/IMGP0733.JPG\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" id=\"BLOGGER_PHOTO_ID_5113096068751072626\" src=\"http://2.bp.blogspot.com/_sCdzMH40iYM/RvVdyMBanXI/AAAAAAAAAmo/tJoAI5FSyf4/s200/IMGP0733.JPG\" style=\"cursor: pointer;\" /></a><a href=\"http://4.bp.blogspot.com/_sCdzMH40iYM/RvVd-sBanYI/AAAAAAAAAmw/KapERQvU1Wc/s1600-h/IMGP0737.JPG\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" id=\"BLOGGER_PHOTO_ID_5113096283499437442\" src=\"http://4.bp.blogspot.com/_sCdzMH40iYM/RvVd-sBanYI/AAAAAAAAAmw/KapERQvU1Wc/s200/IMGP0737.JPG\" style=\"cursor: pointer;\" /></a> <a href=\"http://2.bp.blogspot.com/_sCdzMH40iYM/RvVeMMBanZI/AAAAAAAAAm4/FMZGzAk3l58/s1600-h/IMGP0734.JPG\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" id=\"BLOGGER_PHOTO_ID_5113096515427671442\" src=\"http://2.bp.blogspot.com/_sCdzMH40iYM/RvVeMMBanZI/AAAAAAAAAm4/FMZGzAk3l58/s200/IMGP0734.JPG\" style=\"cursor: pointer;\" /></a><a href=\"http://4.bp.blogspot.com/_sCdzMH40iYM/RvVeXsBanaI/AAAAAAAAAnA/7tP_vpQEShk/s1600-h/IMGP0739.JPG\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" id=\"BLOGGER_PHOTO_ID_5113096712996167074\" src=\"http://4.bp.blogspot.com/_sCdzMH40iYM/RvVeXsBanaI/AAAAAAAAAnA/7tP_vpQEShk/s200/IMGP0739.JPG\" style=\"cursor: pointer;\" /></a></div>
<p>
	Y v&iacute;deo:</p>
<div align=\"center\">
	<object height=\"350\" width=\"425\"> <param name=\"movie\" value=\"http://www.youtube.com/v/HHjGijC4Aew\" /> <embed height=\"350\" src=\"http://www.youtube.com/v/HHjGijC4Aew\" type=\"application/x-shockwave-flash\" width=\"425\"></embed> </object></div>
",
          "wp:post_id": "31",
          "wp:post_date": "2011-06-06 19:30:58",
          "wp:post_date_gmt": "2011-06-06 19:30:58",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "control-webcam-arduino-linksys",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "sin-categoria",
            "#cdata-section": "Sin categoría"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          },
          "wp:comment": [
            {
              "wp:comment_id": "6",
              "wp:comment_author": "Mariano",
              "wp:comment_author_email": "mardom4164@gmail.com",
              "wp:comment_author_IP": "200.16.16.13",
              "wp:comment_date": "2012-10-17 18:35:13",
              "wp:comment_date_gmt": "2012-10-17 18:35:13",
              "wp:comment_content": "muy bueno el trabajo, bastante interesante. Tengo una duda, a la cámara web, en donde la conectas? también al Arduino?

Saludos",
              "wp:comment_approved": "1",
              "wp:comment_parent": "0",
              "wp:comment_user_id": "0"
            },
            {
              "wp:comment_id": "7",
              "wp:comment_author": "edu",
              "wp:comment_author_email": "e.marin.izquierdo@gmail.com",
              "wp:comment_author_IP": "89.107.180.108",
              "wp:comment_date": "2013-01-10 10:24:55",
              "wp:comment_date_gmt": "2013-01-10 10:24:55",
              "wp:comment_content": "Perdona Mariano por la demora.
No, esa webcam iba conectada a un pc. Hace bastante que realicé ese proyecto, y todavía no había tantos módulos. Posiblemente ahora sería posible conectarla a diversas alternativas. Un saludo.",
              "wp:comment_approved": "1",
              "wp:comment_parent": "6",
              "wp:comment_user_id": "1"
            }
          ]
        },
        {
          "title": "Control Webcam 2.0",
          "link": "http://eduardomarin.es/blog/?p=33",
          "pubDate": "Mon, 06 Jun 2011 19:31:29 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?p=33"
          },
          "content:encoded": "<div style=\"text-align: justify;\">
	<a href=\"http://4.bp.blogspot.com/_sCdzMH40iYM/SQ3s7hQaHdI/AAAAAAAAEmA/UeVeku2k3ic/s1600-h/paginaweb.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" id=\"BLOGGER_PHOTO_ID_5264124046749605330\" src=\"http://4.bp.blogspot.com/_sCdzMH40iYM/SQ3s7hQaHdI/AAAAAAAAEmA/UeVeku2k3ic/s400/paginaweb.jpg\" style=\"cursor: pointer; display: block; height: 325px; margin: 0px auto 10px; text-align: center; width: 400px;\" /></a>Hace algo m&aacute;s de un a&ntilde;o que escrib&iacute; <a href=\"http://ahorcandoeltiempo.blogspot.com/2007/09/control-webcam-arduino-linksys.html\">este post</a> donde explicaba c&oacute;mo realizar el control de una c&aacute;mara web instalada sobre dos servomotores. Aquella implementaci&oacute;n la realic&eacute; haciendo uso del router Linksys wrt54g, pero a trav&eacute;s del sistema operativo que nos ofrec&iacute;a openwrt. Ahora, y tras algunas cuestiones que se le planteaban a Fernando, volv&iacute; a retomar aqu&eacute;l proyecto y le apliqu&eacute; las t&eacute;cnicas que nos ofrece AJAX, para mejorar el interfaz gr&aacute;fico, adem&aacute;s de cambiar el sistema embebido a dd-wrt. De hecho, dd-wrt vino mucho antes, justo cuando quise <a href=\"http://ahorcandoeltiempo.blogspot.com/2008/07/linksys-wrt54g-como-repetidor-de-3com.html\">usar el router como repetidor</a>. Entonces..., &iquest;qu&eacute; ha cambiado. Qu&eacute; ha mejorado? <span style=\"font-weight: bold;\">Primeros pasos:</span> El primer paso, siempre que tengamos instalado dd-wrt (en mi caso v24-RC7), ser&aacute; instalar un servidor con soporte para PHP. Nuestro router viene con un servicio servidor httpd que es el que nos muestra el contenido de las p&aacute;ginas de administraci&oacute;n del mismo. No obstante, la configuraci&oacute;n para soportar PHP puede ser algo compleja si lo comparamos con &quot;thttpd&quot;. Pero antes que todo esto, debemos pensar que nuestro router viene limitado en cuanto a memoria f&iacute;sica. Si s&oacute;is de los que ya realiz&aacute;steis el <a href=\"http://wiki.openwrt.org/OpenWrtDocs/Customizing/Hardware/MMC?highlight=%28mmc%29\">mod para a&ntilde;adir una tarjeta SD/mmc</a>, o no ten&eacute;is miedo en realizarlo, entonces no habr&aacute; ning&uacute;n problema. Una vez instalada nuestra tarjeta SD, bajo la ventana de administraci&oacute;n dd-wrt del router nos mostrar&aacute; el espacio de tarjeta total y disponible: <a href=\"http://3.bp.blogspot.com/_sCdzMH40iYM/SQ3dwga9ZII/AAAAAAAAElg/-nwR-Otyemk/s1600-h/jffs.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" id=\"BLOGGER_PHOTO_ID_5264107364872447106\" src=\"http://3.bp.blogspot.com/_sCdzMH40iYM/SQ3dwga9ZII/AAAAAAAAElg/-nwR-Otyemk/s400/jffs.jpg\" style=\"cursor: pointer; display: block; height: 126px; margin: 0px auto 10px; text-align: center; width: 367px;\" /></a>Esto nos permitir&aacute; montar una partici&oacute;n dentro de la tarjeta que apunte a /jffs. Gracias a este nuevo directorio (y que en nuestro router es s&oacute;lo de acceso a lectura), podremos instalar nuevos paquetes sin problemas. Y, hablando de instalar paquetes sin problemas, otro de los m&oacute;dulos que debemos instalar es optwrt, al estilo &quot;ipkg&quot;, &quot;ipkg-opt&quot; nos permite buscar e instalar paquetes desde los repositorios de optwrt. Manos a la obra (paso por paso): 1. Montamos nuestra nueva partici&oacute;n en la tarjeta SD: <code>mkdir /mmc/jffs</code> <code>mount --bind /mmc/jffs /jffs</code> 2. Instalamos optwrt: <code>mkdir /jffs/opt</code> <code>mount -o bind /jffs/opt /opt</code> <code>mkdir /jffs/tmp</code> <code>cd /jffs/tmp</code> <code>wget http://www.wlan-sat.com/boleo/optware/optware-install-ddwrt.sh</code> <code>./optware-install-ddwrt.sh</code> Una vez tenemos instalado optware, bajo /opt/bin podremos encontrar &quot;ipkg-opt&quot;, el instalador de paquetes de optware. As&iacute; pues, como nuestro objetivo era montar el servidor http + php, instalaremos, por un lado php5 y por otro thttpd, que soporta php5. Para ello: <code>cd /opt/bin</code> <code>./ipkg-opt install php</code> <code>./ipkg-opt install php-thttpd</code> Tendremos instalado nuestro servidor con soporte a php, pero debemos configurar el servidor indicando d&oacute;nde queremos alojar nuestros archivos web. En mi caso, los alojar&eacute; en /mmc/cgi-bin. Para ello, creamos la carpeta y configuramos el servidor: <code>mkdir /mmc/cgi-bin</code> <code>vi /opt/etc/init.d/thttpd.conf</code> Este archivo de configuraci&oacute;n del servidor contiene las siguientes l&iacute;neas (en mi caso, donde el servidor escucha por el puerto 8080, manteniendo el puerto 80 para la ventana de administraci&oacute;n del router) <code>dir=/mmc/cgi-bin</code> <code>port=8080</code> <code>user=root</code> <code>nochroot</code> <code>nosymlink</code> <code>novhost</code> <code>logfile=/opt/var/log/thttpd.log</code> <code># Please do not edit pidfile path at it is use to kill thttpd process during ini</code> <code>pidfile=/opt/var/run/thttpd.pid</code> Finalmente, tan s&oacute;lo queda poner en marcha el servidor. Pero debemos recordar una cosa, antes que el servidor &quot;thttpd&quot; estaba trabajando el servidor &quot;httpd&quot;, y este entrar&aacute; en conflicto si deseamos poner a escuchar el nuevo en el puerto 80. Este es un caso similar al m&iacute;o. Yo tengo tres servidores. El primero (externo al router, y principal), escucha por el puerto 80. El servidor interno del router httpd (y que ofrece el servicio para la administraci&oacute;n del router), quiero que escuche por el puerto 81 y, finalmente, el nuevo, &quot;thttpd&quot; con soporte a PHP, escuchar&aacute; por el 8080. As&iacute; pues, debo matar al viejo, asignarle un nuevo puerto de escucha y arrancar, finalmente al nuevo: <code>killall httpd</code> <code>cd /www</code> <code>httpd -p 81 -h /www</code> <code>cd /opt/etc/init.d/</code> <code>./S80thttpd start</code> Cuando todo esto os funcione, algo muy importante, y que har&aacute; que no teng&aacute;is que iniciar manualmente los servicios ni la asignaci&oacute;n de particiones a jffs y a opt, es a&ntilde;adir las siguientes l&iacute;neas (a trav&eacute;s de la ventana de administraci&oacute;n del router (Administraci&oacute;n -&gt; Diagn&oacute;stico)), y grabar el arranque: <code>killall httpd</code> <code>cd /www</code> <code>httpd -p 81 -h /www</code> <code>mount --bind /mmc/jffs /jffs</code> <code>mount -o bind /jffs/opt /opt</code> <code>cd /opt/etc/init.d/</code> <code>./S80thttpd restart</code> Quedando esta ventana de la siguiente forma: <a href=\"http://4.bp.blogspot.com/_sCdzMH40iYM/SQ3kbA8UOVI/AAAAAAAAElo/d8QWgNKKSt8/s1600-h/arranque.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" id=\"BLOGGER_PHOTO_ID_5264114692226562386\" src=\"http://4.bp.blogspot.com/_sCdzMH40iYM/SQ3kbA8UOVI/AAAAAAAAElo/d8QWgNKKSt8/s400/arranque.jpg\" style=\"cursor: pointer; display: block; height: 355px; margin: 0px auto 10px; text-align: center; width: 400px;\" /></a> Probaremos entonces que nuestro servidor funciona correctamente, accediendo a trav&eacute;s de la direcci&oacute;n del router IPdelrouter:8080. Deber&iacute;a salir una ventana como la siguiente: <a href=\"http://3.bp.blogspot.com/_sCdzMH40iYM/SQ3lSlzpuDI/AAAAAAAAElw/qMzXwjbfYwI/s1600-h/pagina.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" id=\"BLOGGER_PHOTO_ID_5264115647015139378\" src=\"http://3.bp.blogspot.com/_sCdzMH40iYM/SQ3lSlzpuDI/AAAAAAAAElw/qMzXwjbfYwI/s400/pagina.jpg\" style=\"cursor: pointer; display: block; height: 223px; margin: 0px auto 10px; text-align: center; width: 400px;\" /></a> Si ahora creamos un archivo (recordemos que nuestro directorio del servidor lo hab&iacute;amos indicado en el archivo de configuraci&oacute;n /opt/etc/thttpd.conf) para probar el funcionamiento PHP, por ejemplo, test.php, con el siguiente contenido: <code>&lt;?php</code> <code>$instr = &quot;date&quot;;</code> <code>$salida = exec($instr);</code> <code>echo &quot;Hoy es $salida&quot;;</code> <code>?&gt;</code> No debemos olvidar cambiar los permisos al archivo <code>chmod 744 test.php</code> <span style=\"font-weight: bold;\">Y ahora, con la webcam:</span> La idea del manejo de la webcam es ex&aacute;ctamente el mismo que en la versi&oacute;n anterior. Se hace uso del puerto serie que instalamos al router, se utiliza la misma codificaci&oacute;n en arduino, pero lo &uacute;nico que estamos cambiando es la llamada a las funciones que env&iacute;an el mensaje por el puerto serie. En la otra versi&oacute;n utiliz&aacute;bamos shell script. Ahora hacemos uso de PHP. La ventaja es que podemos utilizar las funciones de scriptaculous o prototype para a&ntilde;adir un toque AJAX, y as&iacute; evitar los feos cortes que se ve&iacute;an en la p&aacute;gina anterior. Adjunto aqu&iacute; el <a href=\"http://challengerk22.googlepages.com/webcam.rar\">c&oacute;digo de la p&aacute;gina web</a> (html, php, js) y aqu&iacute; el <a href=\"http://challengerk22.googlepages.com/control_webcam.rar\">c&oacute;digo en arduino</a>. C&oacute;mo ha cambiado la versi&oacute;n (v&iacute;deos): Versi&oacute;n 1.0:
	<div align=\"center\">
		<object height=\"350\" width=\"425\"> <param name=\"movie\" value=\"http://www.youtube.com/v/HHjGijC4Aew\" /> <embed height=\"350\" src=\"http://www.youtube.com/v/HHjGijC4Aew\" type=\"application/x-shockwave-flash\" width=\"425\"></embed> </object></div>
	Versi&oacute;n 2.0:
	<div align=\"center\">
		<object height=\"350\" width=\"425\"> <param name=\"movie\" value=\"http://www.youtube.com/v/agI4u5uxFYY\" /> <embed height=\"350\" src=\"http://www.youtube.com/v/agI4u5uxFYY\" type=\"application/x-shockwave-flash\" width=\"425\"></embed> </object></div>
</div>
",
          "wp:post_id": "33",
          "wp:post_date": "2011-06-06 19:31:29",
          "wp:post_date_gmt": "2011-06-06 19:31:29",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "control-webcam-2-0",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "sin-categoria",
            "#cdata-section": "Sin categoría"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "Arduino, Termómetro Gráfico",
          "link": "http://eduardomarin.es/blog/?p=35",
          "pubDate": "Mon, 06 Jun 2011 19:32:47 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?p=35"
          },
          "content:encoded": "<div style=\"text-align: justify;\">
	<a href=\"http://3.bp.blogspot.com/_sCdzMH40iYM/ReBhJmOe4nI/AAAAAAAAALc/Kq4uGaRIbYo/s1600-h/IMGP4991.JPG\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" id=\"BLOGGER_PHOTO_ID_5035131200908223090\" src=\"http://3.bp.blogspot.com/_sCdzMH40iYM/ReBhJmOe4nI/AAAAAAAAALc/Kq4uGaRIbYo/s320/IMGP4991.JPG\" style=\"cursor: pointer; float: left; height: 123px; margin: 0pt 10px 10px 0pt; width: 164px;\" /></a>Tras estar viendo alg&uacute;n que otro montaje sobre <a href=\"http://todbot.com/blog/2006/10/23/diy-ambient-orb-with-arduino-update/\" rel=\"bookmark\" title=\"Permanent Link: DIY Ambient Orb with Arduino, update\">DIY Ambient Orb</a>, y pensar alguna cosilla que no estuviera hecha, tan s&oacute;lo se me ha ocurrido relacionar los cambios de temperatura con los cambios de color con, al igual que en el proyecto mencionado, los cambios de color de un LED rgb (Bueno, estuve pensando en hacer una especie de &quot;copia&quot; del sistema &quot;<a href=\"http://www.misc.philips.com/ambilight/es/index2.html\">Ambilight</a>&quot; que tiene montado philips en alguno de sus modelos. Cuando tenga m&aacute;s tiempo, me pondr&eacute; con ello)</div>
<div style=\"text-align: justify;\">
	<span style=\"font-weight: bold;\">Material necesario</span>:</div>
<ol style=\"text-align: justify;\">
	<li>
		Placa Arduino.</li>
	<li>
		LED rgb, (o tres leds rojo, verde, azul).</li>
	<li>
		4 resistencias de 330 ohm.</li>
	<li>
		Una resistencia NTC.</li>
</ol>
<div style=\"text-align: justify;\">
	<span style=\"font-weight: bold;\">Esquema del circuito</span>:</div>
<p>
	<a href=\"http://3.bp.blogspot.com/_sCdzMH40iYM/ReBd6mOe4mI/AAAAAAAAALQ/H6mCWZYAXyo/s1600-h/esquema.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" id=\"BLOGGER_PHOTO_ID_5035127644675301986\" src=\"http://3.bp.blogspot.com/_sCdzMH40iYM/ReBd6mOe4mI/AAAAAAAAALQ/H6mCWZYAXyo/s400/esquema.jpg\" style=\"cursor: pointer; display: block; margin: 0px auto 10px; text-align: center;\" /></a></p>
<div style=\"text-align: justify;\">
	El funcionamiento del circuito es el siguiente. Distinguiremos entre tres posibles m&aacute;rgenes de temperatura. Fr&iacute;o, ideal y caliente. Seg&uacute;n entremos en uno u otro margen, activaremos o desactivaremos uno u otro color haciendo gradiente de forma incremental para darle un efecto m&aacute;s llamativo. El c&oacute;digo para arduino, que podr&iacute;a depurarse m&aacute;s, pero en este momento no ten&iacute;a ganas de ponerme... :-P, es el siguiente:</div>
<pre class=\"code\" style=\"height: 300px; margin: 0px; overflow: auto; width: 100%;\">
int LDR = 5;
int redPin   = 11;   // Red LED,   connected to digital pin 9
int greenPin = 10;  // Green LED, connected to digital pin 10
int bluePin  = 9;  // Blue LED,  connected to digital pin 11
int valor, estado,i,j;
void setup() {
pinMode(redPin,   OUTPUT);   // sets the pins as output
pinMode(greenPin, OUTPUT);   
pinMode(bluePin,  OUTPUT);
analogWrite(redPin,   255);   // set them all to mid brightness
analogWrite(greenPin, 0);   // set them all to mid brightness
analogWrite(bluePin,  255);   // set them all to mid brightness
estado =2; 
}

void loop () {
while(true){
valor = analogRead(LDR);

if((valor &lt; 766)&amp;&amp;(estado==2)){
j=255;
for(i=0;i&lt;=255;i++){
j--;
delay(50);        
analogWrite(greenPin, i);
analogWrite(redPin,j);
analogWrite(bluePin,255);
}
estado=1;
}


if((valor &lt; 766)&amp;&amp;(estado==1)){
analogWrite(greenPin, 255);
analogWrite(redPin,0);
analogWrite(bluePin,255);
estado = 1;
}

if((valor &gt; 780)&amp;&amp;(estado==2)){
j=255;
for(i=0;i&lt;=255;i++){
j--;
delay(50);
analogWrite(greenPin, i);
analogWrite(bluePin,j);
analogWrite(redPin,255); 
}
estado = 3;
}


if((valor &gt;780)&amp;&amp;(estado==3)){
analogWrite(greenPin, 255);
analogWrite(redPin,255);
analogWrite(bluePin,0);
estado = 3;
}

if((valor&gt;=766)&amp;&amp;(valor&lt;=780)&amp;&amp;(estado==3)){
j=255;
for(i=0;i&lt;=255;i++){
j--;
delay(50);
analogWrite(bluePin, i);
analogWrite(greenPin,j);
analogWrite(redPin,255);          
}
estado = 2;
}


if((valor&gt;=766)&amp;&amp;(valor&lt;=780)&amp;&amp;(estado==1)){
j=255;
for(i=0;i&lt;=255;i++){
j--;
delay(50);             
analogWrite(redPin, i);
analogWrite(greenPin,j);
analogWrite(bluePin,255);
}
estado = 2;
}


if((valor&gt;=766)&amp;&amp;(valor&lt;=780)&amp;&amp;(estado==2)){
analogWrite(greenPin, 0);
analogWrite(bluePin,255);
analogWrite(redPin,255);
estado = 2;
}

}
}

</pre>
<p>
	Pod&eacute;is ver aqu&iacute; alguna foto sobre c&oacute;mo lo tengo montado (para pasar el rato XD): <a href=\"http://3.bp.blogspot.com/_sCdzMH40iYM/ReBiBmOe4oI/AAAAAAAAALk/fxkB2Zp0zdA/s1600-h/IMGP4981+%281152+x+864%29.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" id=\"BLOGGER_PHOTO_ID_5035132162980897410\" src=\"http://3.bp.blogspot.com/_sCdzMH40iYM/ReBiBmOe4oI/AAAAAAAAALk/fxkB2Zp0zdA/s200/IMGP4981+%281152+x+864%29.jpg\" style=\"cursor: pointer; float: left; margin: 0pt 10px 10px 0pt;\" /></a><a href=\"http://2.bp.blogspot.com/_sCdzMH40iYM/ReBjKWOe4pI/AAAAAAAAALs/GxhR6ltx94w/s1600-h/IMGP4984+%281152+x+864%29.jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" id=\"BLOGGER_PHOTO_ID_5035133412816380562\" src=\"http://2.bp.blogspot.com/_sCdzMH40iYM/ReBjKWOe4pI/AAAAAAAAALs/GxhR6ltx94w/s200/IMGP4984+%281152+x+864%29.jpg\" style=\"cursor: pointer; float: left; margin: 0pt 0pt 10px 10px;\" /></a> <a href=\"http://3.bp.blogspot.com/_sCdzMH40iYM/ReBkumOe4qI/AAAAAAAAAMA/BwCKLzSUwtY/s1600-h/IMGP4995+(1152+x+864).jpg\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" id=\"BLOGGER_PHOTO_ID_5035135135098266274\" src=\"http://3.bp.blogspot.com/_sCdzMH40iYM/ReBkumOe4qI/AAAAAAAAAMA/BwCKLzSUwtY/s200/IMGP4995+(1152+x+864).jpg\" style=\"cursor: hand; cursor: pointer; float: left; margin: 0 10px 10px 0;\" /></a> Y aqu&iacute; pod&eacute;is ver un video de la transici&oacute;n de colores: <object height=\"350\" width=\"425\"><param name=\"movie\" value=\"http://www.youtube.com/v/zDMF89nxZXQ\" /> <param name=\"wmode\" value=\"transparent\" /> <embed height=\"350\" src=\"http://www.youtube.com/v/zDMF89nxZXQ\" type=\"application/x-shockwave-flash\" width=\"425\" wmode=\"transparent\"></embed></object></p>
<div class=\"bgtags\">
	Blogalaxia Tags: <a href=\"http://www.blogalaxia.com/tags/divagaciones\" rel=\"tag\">Arduino</a> <a href=\"http://www.blogalaxia.com/tags/tecnologia\" rel=\"tag\">Tecnolog&iacute;a</a></div>
",
          "wp:post_id": "35",
          "wp:post_date": "2011-06-06 19:32:47",
          "wp:post_date_gmt": "2011-06-06 19:32:47",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "arduino-termometro-grafico",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "sin-categoria",
            "#cdata-section": "Sin categoría"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "Arduino weather forecast",
          "link": "http://eduardomarin.es/blog/?p=37",
          "pubDate": "Mon, 06 Jun 2011 19:33:09 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?p=37"
          },
          "content:encoded": "<p class=\"rtejustify\">
	<img alt=\"\" src=\"http://es.creativecommons.org/images/icons/logos cc retocados/by-nc.eu_petit.png\" style=\"float: right; width: 118px; height: 41px; \" /></p>
<p class=\"rtejustify\">
	<img alt=\"\" src=\"http://farm3.static.flickr.com/2755/4282367047_2798e1258d_m.jpg\" style=\"margin-left: 10px; margin-right: 10px; margin-top: 10px; margin-bottom: 10px; float: left; width: 180px; height: 240px; \" /></p>
<p class=\"rtejustify\">
	&nbsp;</p>
<p class=\"rtejustify\">
	Una de las ventajas que nos ofrece internet, es la posibilidad de suscribirnos a feeds para mantenernos informados en todo momento.</p>
<p class=\"rtejustify\">
	Uno de esos feeds, y que suele ser muy usado, es el que est&aacute; relacionado con la informaci&oacute;n meteorol&oacute;gica. Sin embargo, muchas veces, por el propio hecho de tener que encender el pc, o sin ir tan lejos, sincronizar mediante 3G el widget del m&oacute;vil, nos quedamos sin conocer las condiciones climatol&oacute;gicas que se suceden en el exterior. L&oacute;gicamente, este argumento est&aacute; llevado al extremo dram&aacute;tico, pues es cierto que el acceso y presentaci&oacute;n de los m&oacute;viles de &uacute;ltima generaci&oacute;n a la informaci&oacute;n se realiza de forma muy r&aacute;pida y c&oacute;moda.&nbsp;</p>
<p class=\"rtejustify\">
	No obstante, continuemos con ese dramatismo, y pensemos en aquellas personas que, por pereza o por cualquier otro motivo, desean poder contemplar las inclemencias meteorol&oacute;gicas de forma, cuanto menos, bella.</p>
<p class=\"rtejustify\">
	Por eso, y apoy&aacute;ndome en proyectos anteriores ( <a href=\"http://eduardomarin.es/node/8\">Arduino, Term&oacute;metro Gr&aacute;fico</a>, <a href=\"http://eduardomarin.es/node/6\">Versi&oacute;n 1.1 control Linksys-Arduino</a>&nbsp;), traigo aqu&iacute; un widget o gadget, mejor dicho, que nos informa mediante colores, de las condiciones que ah&iacute; fuera se dan.</p>
<p class=\"rtejustify\">
	<strong style=\"border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-style: initial; border-color: initial; font-size: 14px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; vertical-align: baseline; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: transparent; font-weight: bold; background-position: initial initial; background-repeat: initial initial; \">Objetivo del proyecto</strong></p>
<p class=\"rtejustify\">
	Partiendo del t&aacute;ndem arduino-wrt54g, realizaremos peticiones web al servicio de Google&nbsp;&copy; de sindicaci&oacute;n de informaci&oacute;n meteorol&oacute;gica (API weather), para obtener datos de las condiciones meteorol&oacute;gicas actuales, as&iacute; como de los pr&oacute;ximos 4 d&iacute;as. Esa informaci&oacute;n ser&aacute; tratada mediante un parser xml, para crear una peque&ntilde;a p&aacute;gina web donde se mostrar&aacute; dicha informaci&oacute;n, y, por otro lado, se enviar&aacute;n los datos referentes a la situaci&oacute;n actual a arduino, para que represente con un determinado color, dicha informaci&oacute;n, en el LED rgb. Adem&aacute;s, y para poder conocer con m&aacute;s exactitud qu&eacute; color corresponde con la respectiva situaci&oacute;n meteorol&oacute;gica, se incluye en la peque&ntilde;a p&aacute;gina creada, una escala donde tanto color como icono se asocian y, en caso de pulsar sobre uno de ellos, el LED tomar&aacute; por unos instantes, dicho color.</p>
<p class=\"rtejustify\">
	<strong>Material necesario:<img alt=\"\" src=\"http://farm3.static.flickr.com/2723/4282368985_c2b2194492_m.jpg\" style=\"margin-left: 10px; margin-right: 10px; margin-top: 10px; margin-bottom: 10px; float: right; width: 240px; height: 180px; \" /></strong></p>
<ol>
	<li>
		Placa Arduino</li>
	<li>
		Router linksys wrt54g (fonera, o basado en linux).</li>
	<li>
		LED rgb</li>
	<li>
		3 resistencias de 330 ohm.</li>
	<li>
		(Sistema linksys dd-wrt)</li>
</ol>
<p>
	El esquema b&aacute;sico es muy parecido al que usamos con el term&oacute;metro gr&aacute;fico, salvo que, en este caso, no utilizamos la resistencia NTC, y que debemos conectar al puerto serie con nuestro router linksys:</p>
<p class=\"rtecenter\">
	<img alt=\"esquema\" src=\"http://3.bp.blogspot.com/_sCdzMH40iYM/ReBd6mOe4mI/AAAAAAAAALQ/H6mCWZYAXyo/s400/esquema.jpg\" style=\"width: 333px; height: 400px; \" /></p>
<p class=\"rtejustify\">
	<strong>Preparaci&oacute;n del router</strong></p>
<p class=\"rtejustify\">
	Como hemos indicado en el material a usar, comenzaremos con el router Linksys-wrt54g.</p>
<p class=\"rtejustify\">
	Partimos con un router configurado como en el proyecto - <a href=\"http://eduardomarin.es/node/10\">Control Webcam 2.0</a>&nbsp;-, donde dd-wrt es la distribuci&oacute;n elegida para moverlo. Principalmente, utilizamos esta distro por su robustez, flexibilidad, y amigabilidad con el usuario.</p>
<p class=\"rtejustify\">
	Adem&aacute;s, y al igual que en ese proyecto, debemos configurarlo para que funcione como servidor web, con soporte para php, mediante thttpd. Esta configuraci&oacute;n viene explicada en ese proyecto, y nos limitaremos aqu&iacute; a hablar de los puntos concretos que hemos modificado o a&ntilde;adido.</p>
<p class=\"rtejustify\">
	<img alt=\"\" src=\"http://farm3.static.flickr.com/2726/4283145390_f295dfe0e2_m.jpg\" style=\"margin-left: 10px; margin-right: 10px; margin-top: 10px; margin-bottom: 10px; float: left; width: 240px; height: 180px; \" />As&iacute;, si hemos conseguido poner en marcha nuestro servidor y mostrar satisfactoriamente una p&aacute;gina php, podemos seguir leyendo.</p>
<p class=\"rtejustify\">
	En primer lugar, debemos otorgar al router conexi&oacute;n con internet, ya sea a trav&eacute;s de ethernet, o, si queremos darle mayor movilidad al proyecto, aprovechar que podemos configurarlo en<a href=\"http://ahorcandoeltiempo.blogspot.com/2008/07/linksys-wrt54g-como-repetidor-de-3com.html\"> modo repetidor</a>, para convertirnos al wireless.</p>
<p class=\"rtejustify\">
	Tenemos montado el servidor web en el directorio /mmc/cgi-bin/weather (recordando, por cierto, que yo instal&eacute; en su d&iacute;a soporte para tarjetas sd, y que, en el momento en desarrollo de este proyecto, la tarjeta sd instalada es de 256MB).</p>
<p class=\"rtejustify\">
	As&iacute;, en ese directorio, tendremos, al final, 4 archivos: <em>index.php, actualizar.php, funciones.js, ajax.js</em>.</p>
<p class=\"rtejustify\">
	El primero, <em>index.php</em>, es el cuerpo y n&uacute;cleo de la p&aacute;gina que mostrar&aacute; la interfaz web al usuario, la p&aacute;gina que se encarga de refrescar cada 20 segundos el estado del LED (en este momento, la actualizaci&oacute;n del estado del color del LED se realiza mediante esta p&aacute;gina PHP. Actualizar&eacute; mediante alg&uacute;n script python o similar que permita trabajar en segundo plano al programa, sin necesidad de tener abierta una p&aacute;gina web. Tambi&eacute;n he contemplado lanzarlo mediante CULR, pero no he visto el paquete adecuado para esta distro), y que permitir&aacute;, adem&aacute;s, realizar un peque&ntilde;o test de colores camino a Arduino.</p>
<p class=\"rtejustify\">
	<em>actualizar.php</em> es un peque&ntilde;o script php que utiliza el comando &quot;exec&quot; de php para ejecutar &oacute;rdenes de shell script por debajo, y que ser&aacute; llamado de forma as&iacute;ncrona, mediante ajax, para enviar las cadenas a trav&eacute;s del puerto serie hacia Arduino.</p>
<p class=\"rtejustify\">
	<em>funciones.js, y ajax.js</em>, son funciones de apoyo para dotar a la web del modo as&iacute;ncrono que permiten las t&eacute;cnicas ajax.</p>
<p class=\"rtejustify\">
	<strong>API Weather de Google &copy;</strong></p>
<p class=\"rtejustify\">
	Google&nbsp;&copy; ofrece una API para realizar peticiones web que devuelven texto en formato xml con la situaci&oacute;n meteorol&oacute;gica actual y de los cuatro pr&oacute;ximos d&iacute;as, en un determinado lugar. Dicho lugar, puede ser indicado mediante c&oacute;digo postal o por nombre. As&iacute;, en mi caso particular, quiero realizar la petici&oacute;n sobre la ciudad de Guadalajara, en Castilla la Mancha, Espa&ntilde;a, as&iacute; pues, la petici&oacute;n (se puede comprobar f&aacute;cilmente en navegador), ser&iacute;a la siguiente: &nbsp;<a href=\"http://www.google.com/ig/api?weather=guadalajara,spain\">http://www.google.com/ig/api?weather=guadalajara,spain</a>.</p>
<p class=\"rtejustify\">
	<img alt=\"\" src=\"http://farm3.static.flickr.com/2700/4282372451_7a352ca06a_m.jpg\" style=\"margin-left: 10px; margin-right: 10px; margin-top: 10px; margin-bottom: 10px; float: right; width: 240px; height: 180px; \" />Esto nos devuelve c&oacute;digo en formato xml, con sus respectivos &iacute;tems, que debemos parsear, y extraer la informaci&oacute;n que nos interesa, como es la ruta a los iconos, temperatura actual, m&iacute;nimas, m&aacute;ximas, velocidad del viento, humedad...</p>
<p class=\"rtejustify\">
	<strong>Codificaci&oacute;n index.php</strong></p>
<p class=\"rtejustify\">
	A continuaci&oacute;n indico algunos de los puntos m&aacute;s relevantes del c&oacute;digo del archivo <em>index.php.</em></p>
<p class=\"rtejustify\">
	En primer lugar, tenemos en cuenta que refrescaremos la p&aacute;gina cada 60 segundos:</p>
<pre>
&lt;meta content=&quot;60&quot; http-equiv=&quot;REFRESH&quot;&gt;&lt;/meta&gt;
</pre>
<p>
	Una vez en la funci&oacute;n principal del programa (ver c&oacute;digo completo en adjunto), tenemos</p>
<p>
	&nbsp;</p>
<pre>
$requestAddress = &quot;http://www.google.com/ig/api?weather=guadalajara,spain&quot;;
$xml_str = file_get_contents($requestAddress,0);
$xml = new SimplexmlElement($xml_str);
$count = 0;
echo &#39;&lt;div id=&quot;weather&quot; style=&quot;margin:auto;&quot;&gt;&#39;;
foreach($xml-&gt;weather as $item) {
       foreach($item-&gt;current_conditions as $new) {
                echo &#39;&lt;div class=&quot;weatherIcon &quot; style=&quot;padding:2px; 
border:solid 1px&quot;&gt;&#39;;
                echo &#39;&lt;img align=&quot;absmiddle&quot; src=&quot;http://www.google.com/&#39;
 .$new-&gt;icon[&#39;data&#39;] . &#39; &quot;/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;b&gt;Actualmente&lt;/b&gt;&#39;;
                echo &#39;&amp;nbsp;&amp;nbsp;&lt;b&gt;&#39;;
                echo $new-&gt;temp_c[&#39;data&#39;];
                echo &#39;&amp;deg;C&lt;/b&gt;&lt;br/&gt;&#39;;
                if(!strcmp($new-&gt;icon[&#39;data&#39;],&#39;/ig/images/weather/sunny.gif&#39;)){
                        echo &#39;&lt;script type=&quot;text/javascript&quot;&gt;actuar(&#39;./actual
izar.php?red=128&amp;blue=000&amp;green=255&#39;);&lt;/script&gt;&#39;;
                }</pre>
<p>
	&nbsp;</p>
<p class=\"rtejustify\">
	Es decir, primeramente obtenemos la direcci&oacute;n donde enviaremos la petici&oacute;n, &nbsp;y obtenemos la respuesta en formato xml (xml_str). Trataremos dicha entrada, mediante &quot;SimplexmlElement&quot;, para obtener las diferentes entidades y elementos y, a continuaci&oacute;n, comenzamos a mostrarlos.</p>
<p class=\"rtejustify\">
	<img alt=\"\" src=\"http://farm5.static.flickr.com/4039/4283147406_065e9ae8bb_m.jpg\" style=\"margin-left: 10px; margin-right: 10px; margin-top: 10px; margin-bottom: 10px; float: left; width: 180px; height: 240px; \" />Primero mostramos la situaci&oacute;n actual. Un &uacute;nico icono, que viene identificado en el elemento &quot;icon&quot; del item &quot;current_conditions&quot;. Vemos c&oacute;mo mostramos la imagen y la temperatura y, tras un salto de l&iacute;nea, realizamos una comparaci&oacute;n. Esta comparaci&oacute;n es la clave que se relaciona directamente con Arduino. En el c&oacute;digo completo hay bastantes, pues lo que con esta comparaci&oacute;n se consigue es ver si el nombre que Google&nbsp;&copy; le da al icono que en ese momento se est&aacute; mostrando es igual al de la comparaci&oacute;n, entonces debemos actualizar el LED rgb con el color asociado a dicha situaci&oacute;n. Es lo que sucede a continuaci&oacute;n si se diera el caso de que el momento actual es soleado (sunny.gif). Entonces, escribir&iacute;amos el c&oacute;digo javascript que ejecuta la funcion &quot;actuar&quot;, implementada en el archivo funciones.js, y que se trata de una llamada ajax al archivo &quot;actualizar.php&quot; con los par&aacute;metros &quot;red&quot;, &quot;green&quot;, &quot;blue&quot; y los valores asociados a dicha situaci&oacute;n. En este aso, es un verde claro.</p>
<p class=\"rtejustify\">
	Tras unas cuantas comparaciones (se tienen en cuenta todos los estados meteorol&oacute;gicos que muestra&nbsp;Google&nbsp;&copy;, se muestran, &uacute;nicamente para interfaz web, la predicci&oacute;n para los siguientes d&iacute;as.</p>
<p class=\"rtejustify\">
	Tras esto, una sucesi&oacute;n de iconos con bordes de colores, nos muestran la correspondencia entre un estado meteorol&oacute;gico y su color asociado. Adem&aacute;s, se definen como enlaces, con llamada ajax que, en el momento de ser pulsado uno de los iconos, se &nbsp;realiza la llamada a la funci&oacute;n &quot;actuar&quot;, del mismo modo que hab&iacute;amos visto anteriormente, para modificar el color del LED rgb, como puede verse en el c&oacute;digo siguiente.</p>
<p>
	&nbsp;</p>
<pre>
Escala:
&lt;div align=&quot;center&quot; class=&quot;weatherIcon &quot; style=&quot;padding:2px; &quot;&gt;

&lt;div class=&quot;weatherIcon&quot; style=&quot;float:left; margin:3px; border: solid 5px 
#80FF00&quot;&gt;
&lt;a href=&quot;javascript:actuar(&#39;./actualizar.php?red=128&amp;green=255&amp;blue=000&#39;);&quot;&gt;
&lt;img src=&quot;http://www.google.com/ig/images/weather/sunny.gif&quot;/&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;div class=&quot;weatherIcon&quot; style=&quot;float:left; margin:3px; border: solid 5px 
#00FF00&quot;&gt;
&lt;a href=&quot;javascript:actuar(&#39;./actualizar.php?red=000&amp;green=255&amp;blue=000&#39;);&quot;&gt;
&lt;img src=&quot;http://www.google.com/ig/images/weather/mostly_sunny.gif&quot;/&gt;&lt;/a&gt;
&lt;/div&gt;</pre>
<p class=\"rtejustify\">
	Entonces, &quot;actualizar.php&quot; hemos dicho que se encarga de enviar la cadena con la orden a trav&eacute;s del puerto serie hacia Arduino. Qu&eacute; formato o convenio hemos utilizado en dicha cadena. Veamos primeramente el contenido del archivo &quot;actualizar.php&quot;.</p>
<p>
	&nbsp;</p>
<pre>
&lt;?php
$red = $_GET[&#39;red&#39;];
$blue = $_GET[&#39;blue&#39;];
$green = $_GET[&#39;green&#39;];

$toexec = &quot;echo R&quot;.$red.&quot;r&quot;.$red.&quot;B&quot;.$blue.&quot;b&quot;.$blue.&quot;G&quot;.$green.&quot;g&quot;.$green.&quot; &gt;
 /dev/cua/1&quot;;
$exec = exec($toexec);
?&gt;</pre>
<p class=\"rtejustify\">
	Vemos, por tanto, que se reciben los par&aacute;metros de entrada &quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, y concatenados para<img alt=\"\" src=\"http://farm5.static.flickr.com/4057/4283158660_052c0c3d26_m.jpg\" style=\"margin-left: 10px; margin-right: 10px; margin-top: 10px; margin-bottom: 10px; float: right; width: 180px; height: 240px; \" /> formar la cadena que debe ejecutarse como shell script. Como ejemplo, supongamos que llega la orden de enviar a Arduino el color rojo. En hexadecimal, su c&oacute;digo es #FF0000, en decimal es red = 255, green = 000, y blue = 000, por lo tanto, la cadena a enviar ser&iacute;a: R255r255B000b000G000g000, a trav&eacute;s del puerto serie.</p>
<p class=\"rtejustify\">
	En un primer lugar, simplemente codifiqu&eacute; mediante R255B000G000, pero demasiadas veces el color del LED no correspond&iacute;a con el c&oacute;digo que se enviaba. Tras diversas pruebas llegu&eacute; a la conclusi&oacute;n de que la transmisi&oacute;n por el puerto serie no era muy buena y el ruido provocaba bastantes errores. As&iacute;, al introducir esa redundancia de datos, nos aseguramos de que s&oacute;lo se tome en consideraci&oacute;n aquellos valores que llegan por duplicado.</p>
<p class=\"rtejustify\">
	Teniendo ya esta premisa en mente, &uacute;nicamente queda por analizar el c&oacute;digo que se mueve dentro de Arduino.</p>
<p>
	<strong>Codificaci&oacute;n en Arduino</strong></p>
<p class=\"rtejustify\">
	<img alt=\"\" src=\"http://farm3.static.flickr.com/2777/4282416497_cddbc49b96_m.jpg\" style=\"margin-left: 10px; margin-right: 10px; margin-top: 10px; margin-bottom: 10px; float: left; width: 180px; height: 240px; \" />Como hemos dicho, Arduino tiene que interactuar con el router linksys &nbsp;a trav&eacute;s del puerto serie, para controlar el LED rgb. As&iacute;, Arduino realizar&aacute; cont&iacute;nuas pasadas de lectura a su puerto serie, en busca de movimiento. En el c&oacute;digo adjunto, as&iacute; se observa. En el momento en que suceda algo en el puerto serie, Arduino comprueba si se trata de una de las letras utilidadas para indicar los tres colores (R,r,B,b,G,g). Si alguno de los bytes le&iacute;dos coincide, entonces sabemos que los tres d&iacute;gitos que le siguen ser&aacute;n los valores de los d&iacute;gitos de las centenas, decenas y unidades que codifican el valor decimal que ataca al color &quot;primario&quot; concreto. En el momento en que se capture tanto el valor del color para la letra en may&uacute;scula como en min&uacute;scula y se compruebe que ambos valores son iguales (valor R = valor r), entonces s&iacute; podemos escribir al pin asignado al color respectivo del LED rgb (analogWrite()).</p>
<p class=\"rtejustify\">
	Veamos, como ejemplo, dicha codificaci&oacute;n para el color rojo.</p>
<p>
	&nbsp;</p>
<pre>
void loop(){
  //Comprobamos si llega se&ntilde;al del router
  if (Serial.available()){
    dato=Serial.read();
    //Si el primer byte es una R, nos llega el valor de red
    if(dato == &#39;R&#39;){    while(! Serial.available()){}
    //Leemos el valor de las centenas
    centenas=Serial.read();
    //Realizamos conversi&oacute;n del d&iacute;gito ascii, a valor centena
    valor_color=(centenas-48)*100;
    //A continuaci&oacute;n, esperamos a que llegue la decena
    while(! Serial.available()){}
    //Leemos el valor de la decena
    decenas=Serial.read();
    //Realizamos conversi&oacute;n del d&iacute;gito ascii, a valor decena
    valor_color=valor_color+((decenas-48)*10);
    //A continuaci&oacute;n, esperamos a que llegue la unidad
    while(! Serial.available()){}
    unidades=Serial.read();
    //Realizamos conversi&oacute;n del d&iacute;gito ascii, a valor unidad
    valor_color=valor_color+(unidades-48);
    }
    if(dato == &#39;r&#39;){    
      while(! Serial.available()){}
      centenas=Serial.read();
      valor_redundante=(centenas-48)*100;
      while(! Serial.available()){}
      decenas=Serial.read();    
      valor_redundante=valor_redundante+((decenas-48)*10);  
      while(! Serial.available()){}
      unidades=Serial.read();   
      valor_redundante=valor_redundante+(unidades-48);
      //Si coinciden los valores de R y r, entonces si escribimos a pin
      if(valor_redundante==valor_color){
        analogWrite(redPin,255-valor_color);
      }
    }

</pre>
<p>
	<strong>Conclusiones</strong></p>
<p class=\"rtejustify\">
	Como he comentado en el texto, este proyecto utiliza como m&oacute;dulo principal una p&aacute;gina web escrita en php que actualiza el LED rgb en funci&oacute;n de la informaci&oacute;n meteorol&oacute;gica que consulta en web. Sin embargo, la soluci&oacute;n ideal est&aacute; en utilizar un script, &nbsp;por ejemplo escrito en python, que trabaje en background, sin necesidad de tener abierta la p&aacute;gina web.</p>
<p class=\"rtejustify\">
	Por otro lado, en el siguiente v&iacute;deo pod&eacute;is ver el funcionamiento del proyecto. Vemos c&oacute;mo el cono de luz est&aacute; iluminado desde un primer momento. Ese color corresponde con la situaci&oacute;n meteorol&oacute;gica actual. A continuaci&oacute;n, y para comprobar que funcionan los dem&aacute;s colores, y as&iacute; saber a qu&eacute; situaci&oacute;n meteorol&oacute;gica corresponde un color, se puede realizar un test de prueba donde, al pulsar sobre uno u otro icono, se ilumina con diferentes colores el cono. Adem&aacute;s, si esperamos un cierto tiempo, el cono vuelve al color inicial, que es el del estado actual meteorol&oacute;gicamente hablando.</p>
<p class=\"rtecenter\">
	<object classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" data=\"http://www.flickr.com/apps/video/stewart.swf?v=71377\" height=\"300\" type=\"application/x-shockwave-flash\" width=\"400\"> <param name=\"flashvars\" value=\"intl_lang=en-us&amp;photo_secret=def0bf9123&amp;photo_id=4282309973\" /> <param name=\"movie\" value=\"http://www.flickr.com/apps/video/stewart.swf?v=71377\" /> <param name=\"bgcolor\" value=\"#000000\" /> <param name=\"allowFullScreen\" value=\"true\" /><embed allowfullscreen=\"true\" bgcolor=\"#000000\" flashvars=\"intl_lang=en-us&amp;photo_secret=def0bf9123&amp;photo_id=4282309973\" height=\"300\" src=\"http://www.flickr.com/apps/video/stewart.swf?v=71377\" type=\"application/x-shockwave-flash\" width=\"400\"></embed></object></p>
<p>
	M&uacute;sica del v&iacute;deo:&nbsp;Painted Water - Sand Storm (Feat. John Holgate) (creative commons)</p>
",
          "wp:post_id": "37",
          "wp:post_date": "2011-06-06 19:33:09",
          "wp:post_date_gmt": "2011-06-06 19:33:09",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "arduino-weather-forecast",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "sin-categoria",
            "#cdata-section": "Sin categoría"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "Autopilot arduino - Control borroso ",
          "link": "http://eduardomarin.es/blog/?p=39",
          "pubDate": "Mon, 06 Jun 2011 19:34:10 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?p=39"
          },
          "content:encoded": "<p class=\"rtejustify\"><img style=\"margin-left: 10px; margin-right: 10px; margin-top: 5px; margin-bottom: 5px; float: right; width: 118px; height: 41px;\" src=\"http://es.creativecommons.org/images/icons/logos cc retocados/by-nc.eu_petit.png\" alt=\"\" /></p>
<p class=\"rtejustify\">&nbsp;</p>
<p class=\"rtejustify\">Hace tiempo que rondaba por mi cabeza implementar un sistema basado en arduino capaz de controlar de forma autónoma un modelo de radiocontrol. Me llamó la atención el entusiasmo y apoyo que está recibiendo, por su parte, el proyecto <a href=\"http://sites.google.com/site/mikuadricoptero/\">Mikuadrioptero</a>, donde, desde cero, desarrollan un modelo particular de \"helicóptero\" movido por cuatro hélices. Desde aquí, transmito mi apoyo, y espero poder llegar a verlo en vuelo en breve.</p>
<p class=\"rtejustify\">Así, y desde una línea algo diferente, partiré de un modelo de radiocontrol comercial, y volcaré la responsabilidad del control a la plataforma arduino.</p>
<p class=\"rtejustify\"><strong>Objetivos del proyecto</strong></p>
<p class=\"rtejustify\">Implementar en arduino el sistema de control de vuelo de un modelo de radiocontrol capaz de guiarlo, de forma autónoma, a lo largo de un \"track\" de vuelo gps.</p>
<p class=\"rtejustify\"><strong>Fases del proyecto</strong></p>

<ol>
	<li class=\"rtejustify\"><a href=\"http://eduardomarin.es/2011/06/1-simulacion-en-matlab-del-comportamiento-del-modelo-de-radiocontrol-virtual-no-track-gps/\"> Simulación en Matlab del comportamiento del modelo de radiocontrol virtual (no track gps)</a>.</li>
	<li class=\"rtejustify\"><a href=\"http://eduardomarin.es/2011/06/2-guiado-del-modelo-de-radiocontrol-virtual-mediante-arduino-con-matlab-como-pasarela-no-track-gps/\"> Guiado del modelo de radiocontrol virtual mediante arduino con Matlab como pasarela (no track gps)</a>.</li>
	<li class=\"rtejustify\"> Simulación en Matlab del comportamiento del modelo de radiocontrol virtual (con track gps).</li>
	<li class=\"rtejustify\"> Guiado del modelo de radiocontrol virtual mediante arduino con Matlab como pasarela (con track gps).</li>
	<li class=\"rtejustify\"> Implementación física en el modelo de radiocontrol real (no track gps).</li>
	<li class=\"rtejustify\"> Pruebas reales de vuelo (apoyo manual - no track gps).</li>
	<li class=\"rtejustify\"> Implementación física en el modelo de radiocontrol real (con track gps).</li>
	<li class=\"rtejustify\"> Pruebas reales de vuelo (apoyo manual - con track gps).</li>
</ol>",
          "wp:post_id": "39",
          "wp:post_date": "2011-06-06 19:34:10",
          "wp:post_date_gmt": "2011-06-06 19:34:10",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "autopilot-arduino-control-borroso",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "sin-categoria",
            "#cdata-section": "Sin categoría"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "1. Simulación en Matlab del comportamiento del modelo de radiocontrol virtual (no track gps)",
          "link": "http://eduardomarin.es/blog/?p=41",
          "pubDate": "Mon, 06 Jun 2011 19:34:30 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?p=41"
          },
          "content:encoded": "<p class=\"rtejustify\">
	Al trabajar con un sistema cuyo prop&oacute;sito final ser&aacute; el de ir montado sobre un modelo&nbsp;<img alt=\"\" src=\"http://farm5.static.flickr.com/4029/4353200211_93a6d87e90_m.jpg\" style=\"margin-left: 10px; margin-right: 10px; margin-top: 10px; margin-bottom: 10px; float: right; width: 160px; height: 240px; \" />de radiocontrol que sobrevolar&aacute; nuestras cabezas y que, probablemente (las probabilidades son muy altas), &eacute;ste acabe en el suelo, lo m&aacute;s sensato pasa por realizar simulaciones previas en un entorno seguro, un entorno virtual.</p>
<p class=\"rtejustify\">
	As&iacute;, en primera instancia, y apoy&aacute;ndonos en <a href=\"http://www.mathworks.com/\">Matlab</a> y en <a href=\"http://www.flightgear.org/\">FlightGear</a>, realizaremos el sistema de control borroso que estabilizar&aacute; a nuestro modelo en relaci&oacute;n a los par&aacute;metros de cabeceo (pitch) y alabeo (roll). En este punto, debo comentar que, en mi caso, para realizar las pruebas reales iniciales usar&eacute; una maqueta de radiocontrol muy conocida (swift o zaggi, un ala), y, virtualmente, con motor. De esta forma, la configuraci&oacute;n inicial es m&aacute;s sencilla. Motor a todo gas, y &uacute;nicamente nos preocuparemos de la estabilidad.</p>
<p class=\"rtejustify\">
	As&iacute;, tenemos la siguiente configuraci&oacute;n. Flightgear, simulador de vuelo de libre distribuci&oacute;n, tiene la particularidad de permitir lectura de variables a trav&eacute;s de diferentes mecanismos, uno de los cuales, es mediante consulta url (se presenta un directorio de variables, capaz de ser modificado mediante consulta http). Esta particularidad es potencialmente tratable a trav&eacute;s de matlab. As&iacute;, podemos consultar los valores en tiempo real y modificarlos, pudiendo observar el comportamiento de la nave.</p>
<p class=\"rtecenter\">
	<img alt=\"\" src=\"http://farm5.static.flickr.com/4007/4354022498_dcb808af47.jpg\" style=\"margin-left: 10px; margin-right: 10px; margin-top: 10px; margin-bottom: 10px; float: center; width: 500px; height: 308px; \" /></p>
<p class=\"rtejustify\">
	Comencemos, por tanto, con el desarrollo de esta fase del proyecto.</p>
<p class=\"rtejustify\">
	<strong>1. Comunicaci&oacute;n flightgear - matlab</strong></p>
<p class=\"rtejustify\">
	Como hemos dicho, flightgear levanta un servidor http donde muestra multitud de variables que pueden ser consultadas y modificadas. Para ello, en la ventana de ejecuci&oacute;n del simulador, en &quot;Avanzado&quot;-&gt;&quot;Red&quot;, habilitamos httpd y elegimos puerto de escucha (en mi caso 5400).</p>
<p class=\"rtecenter \">
	<img alt=\"\" class=\"rtecenter\" src=\"http://farm3.static.flickr.com/2748/4354055096_784f5007b0.jpg\" style=\"margin-left: 10px; margin-right: 10px; margin-top: 10px; margin-bottom: 10px; float: center; width: 500px; height: 392px; \" /></p>
<p class=\"rtejustify\">
	As&iacute;, una vez que ejecutemos el simulador, podremos ver el &aacute;rbol de variables desde el navegador de internet, a trav&eacute;s de la direcci&oacute;n <a href=\"http://localhost:5400\">http://localhost:5400/</a>. En matlab, por su parte, para realizar la lectura y escritura de estos valores, lanzamos consultas url y parseamos la entrada convenientemente. As&iacute;, por ejemplo, para la lectura de una cierta variable escribimos la siguiente funci&oacute;n:</p>
<pre class=\"rteindent1 rteindent2\">
function v = fg_leer(url)
    s = urlread(url);
    [ini,fin]=regexp(s,&#39;value=&quot;-?d+.?d*&quot;&#39;);
    v = str2num(s(ini+7:fin-1));</pre>
<p>
	Por otra parte, para la escritura de una determinada variable, tendremos la siguiente funci&oacute;n:</p>
<pre class=\"rteindent1 rteindent2\">
function fg_escribir(url,v)
    s = [url &#39;?value=&#39; num2str(v)];
    urlread(s);</pre>
<p class=\"rtejustify\">
	De esta forma, una vez que el simulador est&aacute; ejecut&aacute;ndose, podr&iacute;amos leer el valor actual del &aacute;ngulo de cabeceo o de alabeo con tan s&oacute;lo llamar a la primera de las funciones con el valor adecuado, por ejemplo, para el alabeo:</p>
<p class=\"rteindent1 rteindent2\">
	<span class=\"Apple-style-span\" style=\"font-family: Consolas, 'Andale Mono', 'Lucida Console', monospace; white-space: pre; \">alabeo = fg_leer(&#39;http://localhost:5400/orientation/roll-deg&#39;);</span></p>
<p>
	o la escritura para un valor determinado de actuaci&oacute;n en los alerones:</p>
<pre class=\"rteindent1 rteindent2\">
fg_escribir(&#39;http://localhost:5400/controls/flight/aileron&#39;,ataque_aleron);</pre>
<p class=\"rtejustify\">
	Llegados a este punto, estamos en posici&oacute;n de comenzar a desarrollar la parte que se ocupar&aacute; de estabilizar la nave en vuelo.</p>
<p>
	<strong>2. Control borroso o l&oacute;gica difusa para estabilizar el sistema</strong></p>
<p class=\"rtejustify\">
	Posiblemente, uno de los ejemplos m&aacute;s claros que se muestran a los ni&ntilde;os en el colegio para entender la l&oacute;gica binaria sea la del interruptor de la luz que pueden encontrar en sus habitaciones. As&iacute;, 1 o verdad enciende la luz y 0 &oacute; falso apaga la luz. Esta l&oacute;gica tan especial ha sido fundamental en el desarrollo tecnol&oacute;gico actual, sin embargo, tal como se describe en estas l&iacute;neas puede resultar algo limitada.</p>
<p class=\"rtejustify\">
	Aparece as&iacute; la l&oacute;gica difusa para facilitar el control de sistemas (control borroso). Igual que con los ni&ntilde;os, permitidme poner otro ejemplo simple. Si tuvi&eacute;ramos un radiador con un interruptor de l&oacute;gica binaria, el valor posible de salida ser&iacute;a o apagado o encendido, independientemente del calor que hiciera en la habitaci&oacute;n donde &eacute;ste se encontrara. En cambio, un interruptor de l&oacute;gica difusa, ser&iacute;a capaz de devolver un valor de salida proporcional al calor que ah&iacute; hubiera, permitiendo un control m&aacute;s fino y gradual, al fin y al cabo, m&aacute;s inteligente.</p>
<p class=\"rtejustify\">
	Dicho esto, vayamos al grano. Nuestro modelo de radiocontrol, al igual que con la temperatura de la habitaci&oacute;n, puede presentar diferentes grados de inclinaci&oacute;n (simplifiquemos en alabeo). Puede estar nivelado con respecto a la l&iacute;nea del horizonte, o girando un poco a la derecha o a la izquierda, o bastante o mucho. Es decir, la l&oacute;gica binaria no describe bien ese comportamiento. La l&oacute;gica difusa, en cambio, permite registrar esas transiciones permiti&eacute;ndonos construir un controlador borroso que d&eacute; una respuesta adecuada.</p>
<p class=\"rtejustify\">
	Podr&iacute;a hablaros aqu&iacute; con bastante detalle del proceso de borrosificaci&oacute;n de entradas, aplicaci&oacute;n de reglas de implicaci&oacute;n, desborrosificaci&oacute;n y dem&aacute;s, pero hay escrito mucho en la red que pueda aclararos todas las dudas al respecto mejor que lo que pueda aqu&iacute; mostraros. Me limitar&eacute; a presentar los t&eacute;rminos ling&uuml;&iacute;sticos que he utilizado para este sistema, y su traslaci&oacute;n al entorno matlab.</p>
<p class=\"rtejustify\">
	As&iacute;, por un lado, tenemos dos variables de entrada (alabeo y cabeceo) y dos de salida (aleron y elevador).</p>
<p class=\"rtejustify\">
	Los rangos num&eacute;ricos definidos para estas variables, y ajustadas personalmente, son los siguientes:</p>
<p class=\"rtejustify\">
	alabeo = [-150, 150]; cabeceo = [-100, 100]; aleron = [-1, 1]; elevador = [-1, 1]; todos en punto flotante.</p>
<p class=\"rtejustify\">
	Tendremos, entonces, dos sistemas borrosos. El primero, para alabeo, con entrada alabeo y salida aleron, y el segundo, cabeceo, con entrada cabeceo y salida elevador. Ambos sistemas de tipo sugeno, con la siguiente configuraci&oacute;n:</p>
<p>
	Alabeo:</p>
<p class=\"rtecenter\">
	<img alt=\"\" src=\"http://farm3.static.flickr.com/2200/4354253734_05842236b6.jpg\" style=\"margin-left: 10px; margin-right: 10px; margin-top: 10px; margin-bottom: 10px; float: center; width: 500px; height: 217px; \" /></p>
<p class=\"rtejustify\">
	Cuyos conjuntos de entrada son II (muy izquierda), I (izquierda), C (centro), D (derecha), DD (muy derecha), y salida singleton fDD, fD, fC, fI, fII que act&uacute;an de forma inversa a la entrada.</p>
<p>
	As&iacute; las reglas de actuaci&oacute;n son: II -&gt; fDD; I -&gt; fD; C -&gt; fC; D -&gt; fI; DD -&gt; fII.</p>
<p>
	Cabeceo:</p>
<p class=\"rtecenter\">
	<img alt=\"\" src=\"http://farm3.static.flickr.com/2684/4353537311_70a0c65765.jpg\" style=\"margin-left: 10px; margin-right: 10px; margin-top: 10px; margin-bottom: 10px; float: center; width: 500px; height: 217px; \" /></p>
<p>
	&nbsp;</p>
<p class=\"rtejustify\" style=\"border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-style: initial; border-color: initial; font-size: 14px; margin-top: 0px; margin-right: 0px; margin-bottom: 1.5em; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; vertical-align: baseline; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: transparent; background-position: initial initial; background-repeat: initial initial; \">
	Cuyos conjuntos de entrada son A (apunta hacia arriba), C (centro), B (apunta hacia abajo), y salida singleton fA, &nbsp;fCE, &nbsp;fB que act&uacute;an de forma inversa a la entrada.</p>
<p style=\"border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-style: initial; border-color: initial; font-size: 14px; margin-top: 0px; margin-right: 0px; margin-bottom: 1.5em; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; vertical-align: baseline; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: transparent; background-position: initial initial; background-repeat: initial initial; \">
	As&iacute; las reglas de actuaci&oacute;n son: A -&gt; fB; C -&gt; fCE; B -&gt; fA.</p>
<p class=\"rtejustify\" style=\"border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-style: initial; border-color: initial; font-size: 14px; margin-top: 0px; margin-right: 0px; margin-bottom: 1.5em; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; vertical-align: baseline; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: transparent; background-position: initial initial; background-repeat: initial initial; \">
	Con estos elementos ling&uuml;&iacute;sticos, podemos implementar el c&oacute;digo principal del programa en matlab que realice el proceso completo de borrosificaci&oacute;n e inferencia de la salida para este sistema sugeno:</p>
<pre class=\"rteindent1 rteindent2\">
P1 = -200;
P2 = -150;
P3 = -75;
P4 = 0; 
P5 = 75; 
P6 = 150;
P7 = 200;

fDD = -0.66;
fD = -0.33;
fC = 0;
fI = 0.33;
fII = 0.66;

for i=1:5000,
  giro = fg_leer(&#39;http://localhost:5400/orientation/roll-deg&#39;)
  cabeceo = fg_leer(&#39;http://localhost:5400/orientation/pitch-deg&#39;);  

  %Borrosificacion de las entradas
  giroII = trapecio_n(giro,P1,P2,P3)
  giroI = triangulo(giro,P2,P3,P4)
  giroC = triangulo(giro,P3,P4,P5)
  giroD = triangulo(giro,P4,P5,P6)
  giroDD = trapecio_p(giro,P5,P6,P7)

  %Calculo de los consecuentes de salida  
  DD = giroII;
  D = giroI;
  C = giroC;
  I = giroD;
  II = giroDD; 

  % Inferencia sobre la salida 
  ataque_aleron = (fDD*DD + fD*D + fC*C + fI*I + fII*I)/(DD+D+C+I+II)
  fg_escribir(&#39;http://localhost:5400/controls/flight/aileron&#39;,ataque_aleron);
  fg_escribir(&#39;http://localhost:5400/controls/flight/elevator&#39;,ataque_elevador);

end;</pre>
<div>
	&nbsp;</div>
<div class=\"rtejustify\">
	La simulaci&oacute;n fue realizada con &eacute;xito para este sistema. No adjunto estad&iacute;sticas ni v&iacute;deo de comportamiento porque no pude hacerlo, pero s&iacute; para el modelo id&eacute;ntico creado para arduino, que se mostrar&aacute; en el siguiente paso.</div>
<div class=\"rtejustify\">
	&nbsp;</div>
<div class=\"rtejustify\">
	Se adjuntan los scripts de matlab as&iacute; como el modelo en 3d usado en fligthgear.</div>
",
          "wp:post_id": "41",
          "wp:post_date": "2011-06-06 19:34:30",
          "wp:post_date_gmt": "2011-06-06 19:34:30",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "1-simulacion-en-matlab-del-comportamiento-del-modelo-de-radiocontrol-virtual-no-track-gps",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "sin-categoria",
            "#cdata-section": "Sin categoría"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          },
          "wp:comment": [
            {
              "wp:comment_id": "8",
              "wp:comment_author": "abner morales",
              "wp:comment_author_email": "mora_frag_1990@hotmail.com",
              "wp:comment_author_IP": "189.144.41.112",
              "wp:comment_date": "2011-07-19 21:37:10",
              "wp:comment_date_gmt": "2011-07-19 21:37:10",
              "wp:comment_content": "q tal es muy interesante la combinacion entre matlab y arduino bueno estoy tratando de aplicar inteligencia artificial a un brazo pero no logro hacer que tenga una plena comunicacion entre matlab y arduino no se si tu pudieras ayudarme te lo agradeceria bastante",
              "wp:comment_approved": "1",
              "wp:comment_parent": "0",
              "wp:comment_user_id": "0"
            },
            {
              "wp:comment_id": "9",
              "wp:comment_author": "edu",
              "wp:comment_author_email": "e.marin.izquierdo@gmail.com",
              "wp:comment_author_IP": "85.49.209.74",
              "wp:comment_date": "2011-07-20 19:47:47",
              "wp:comment_date_gmt": "2011-07-20 19:47:47",
              "wp:comment_content": "Buenas, Abner. 
Estás utilizando la librería de matlab para comunicación con arduino? o lo estás realizando a pelo.

Un saludo.",
              "wp:comment_approved": "1",
              "wp:comment_parent": "8",
              "wp:comment_user_id": "1"
            },
            {
              "wp:comment_id": "10",
              "wp:comment_author": "abner",
              "wp:comment_author_email": "mora_frag_1990@hotmail.com",
              "wp:comment_author_IP": "189.144.41.112",
              "wp:comment_date": "2011-07-26 15:24:17",
              "wp:comment_date_gmt": "2011-07-26 15:24:17",
              "wp:comment_content": "pues mira eh intentando con la libreria pero me aparecen una serie de errores, tambien lo eh intentado a pelo y al parecer se comunican xq cuando compilo en matlab los leds de mi arduino parpadean como cuando compilas un programa pero no logro enviar datos",
              "wp:comment_approved": "1",
              "wp:comment_parent": "9",
              "wp:comment_user_id": "0"
            },
            {
              "wp:comment_id": "11",
              "wp:comment_author": "edu",
              "wp:comment_author_email": "e.marin.izquierdo@gmail.com",
              "wp:comment_author_IP": "85.54.59.154",
              "wp:comment_date": "2011-07-27 15:00:17",
              "wp:comment_date_gmt": "2011-07-27 15:00:17",
              "wp:comment_content": "Supongo que habrás leído la siguiente entrada a ésta (http://eduardomarin.es/2011/06/2-guiado-del-modelo-de-radiocontrol-virtual-mediante-arduino-con-matlab-como-pasarela-no-track-gps/), donde se detalla la configuración que yo realicé para el puerto serie y que permitía la comunicación con arduino (esto lo hice utilizando el puerto serie virtual que levanta arduino a través de usb). Ahora mismo no recuerdo más detalles, pero intentaré probarlo para ver si funciona. Un saludo.",
              "wp:comment_approved": "1",
              "wp:comment_parent": "10",
              "wp:comment_user_id": "1"
            },
            {
              "wp:comment_id": "12",
              "wp:comment_author": "Adrian",
              "wp:comment_author_email": "adrianushs@hotmail.com",
              "wp:comment_author_IP": "201.198.164.194",
              "wp:comment_date": "2011-08-06 04:15:39",
              "wp:comment_date_gmt": "2011-08-06 04:15:39",
              "wp:comment_content": "Hola que tal estoy tratando de hacer interactual el mat lab con el flig gear mediante este medoto que usaste pero no me sale , me podrias indicar o dar alguna pista te lo agradeceria es mi proyecto final",
              "wp:comment_approved": "1",
              "wp:comment_parent": "0",
              "wp:comment_user_id": "0"
            },
            {
              "wp:comment_id": "13",
              "wp:comment_author": "edu",
              "wp:comment_author_email": "e.marin.izquierdo@gmail.com",
              "wp:comment_author_IP": "85.49.204.234",
              "wp:comment_date": "2011-09-04 17:02:33",
              "wp:comment_date_gmt": "2011-09-04 17:02:33",
              "wp:comment_content": "Perdona Adrián, he estado algo ocupado estos días (entre vacaciones y tareas) y no he podido responderte antes. Espero que hayas conseguido resolver el problema, y hayas adelantado en tu proyecto final.

Un saludo.",
              "wp:comment_approved": "1",
              "wp:comment_parent": "12",
              "wp:comment_user_id": "1"
            }
          ]
        },
        {
          "title": "2. Guiado del modelo de radiocontrol virtual mediante arduino con Matlab como pasarela (no track gps)",
          "link": "http://eduardomarin.es/blog/?p=43",
          "pubDate": "Mon, 06 Jun 2011 19:34:49 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?p=43"
          },
          "content:encoded": "<p class=\"rtejustify\">
	Una vez hemos comprobado que el modelo se comporta de forma aceptable con la simulaci&oacute;n creada en matlab, vamos a trasladar el controlador borroso implementado a arduino. Una vez en arduino, &eacute;ste debe ser <img alt=\"\" src=\"http://farm5.static.flickr.com/4042/4353201995_11d45e9d4e_m.jpg\" style=\"margin-left: 10px; margin-right: 10px; margin-top: 10px; margin-bottom: 10px; float: right; width: 240px; height: 160px; \" />capaz de comunicarse con matlab, para, a su vez, enviarle los datos ajustados a flightgear. &iquest;Qu&eacute; conseguimos con esto? Comprobar que el proceso que realiza arduino es lo suficientemente r&aacute;pido como para que el comportamiento en la simulaci&oacute;n siga siendo el correcto.</p>
<p class=\"rtejustify\">
	De esta forma, lo primero que debemos hacer es comunicar matlab con arduino. Para ello, y sabiendo que arduino tiene la capacidad de comunicarse por puerto serie, utilizaremos en matlab las funciones de lectura y escritura sobre el puerto serie.</p>
<p class=\"rtejustify\">
	El protocolo de inicializaci&oacute;n del puerto serie en matlab, y en concreto para poder hablar con arduino, se ve en las siguientes l&iacute;neas:</p>
<pre class=\"rteindent1 rteindent2\">
s = serial(&#39;COM3&#39;);
set(s,&#39;BaudRate&#39;,9600);
set(s,&#39;DataBits&#39;,8);
set(s,&#39;StopBits&#39;,1);
fopen(s);</pre>
<p class=\"rtejustify\">
	Sabiendo que arduino est&aacute; conectado al puerto COM3 del ordenador, en nuestro caso.</p>
<p class=\"rtejustify\">
	Una vez abierto habilitado el puerto serie para escucha y escritura, asignado al objeto &quot;s&quot;, escribiremos o leeremos, respectivamente, con las siguientes llamadas:</p>
<pre class=\"rteindent1 rteindent2\">
fprintf(s,&#39;%fc&#39;,u);
a = fscanf(s,&#39;%s&#39;);</pre>
<p class=\"rtejustify\">
	<img alt=\"\" src=\"http://farm3.static.flickr.com/2714/4353203235_69c309f8e0_m.jpg\" style=\"margin-left: 10px; margin-right: 10px; margin-top: 10px; margin-bottom: 10px; float: left; width: 240px; height: 160px; \" />Como siempre que nos comunicamos a trav&eacute;s del puerto serie de arduino, el protocolo o mecanismo de comunicaci&oacute;n final que da sentido a los mensajes que se env&iacute;an o reciben depende &uacute;nicamente de nuestra implementaci&oacute;n personal. En nuestro caso, dado que arduino s&oacute;lo debe recibir datos num&eacute;ricos (positivos o negativos en punto flotante) y devolver datos num&eacute;ricos (positivos o negativos en punto flotante), bien para cabeceo, bien para alabeo (giro), codificamos el env&iacute;o como valores num&eacute;ricos finalizados con la letra &quot;g&quot; o &quot;c&quot; seg&uacute;n sea giro o cabeceo: &nbsp;ej: &nbsp; &nbsp;-143.835g</p>
<p class=\"rtejustify\">
	Arduino, por su parte, debe parsear esa entrada, sabiendo que se trata de giro (o cabeceo seg&uacute;n sea), aplicar el control borroso, y devolver el valor num&eacute;rico a matlab.</p>
<p>
	Esquem&aacute;ticamente, qu&eacute; har&iacute;a el programa principal en matlab:</p>
<ol>
	<li>
		Leemos sensores de giro y cabeceo del simulador de vuelo flightgear.</li>
	<li>
		Matlab env&iacute;a datos de giro a arduino (valor num&eacute;rico + g)</li>
	<li>
		Arduino identifica que dato de llegada es giro,&nbsp; procesa aplicando control borroso y devuelve valor num&eacute;rico</li>
	<li>
		Matlab recibe datos para aler&oacute;n</li>
	<li>
		Matlab env&iacute;a datos de cabeceo a arduino (valor num&eacute;rico +c)</li>
	<li>
		Arduino identifica que dato de llegada es cabeceo, procesa aplicando control borroso y devuelve valor num&eacute;rico</li>
	<li>
		Matlab recibe datos para elevador</li>
	<li>
		Matlab env&iacute;a a flightgear esos dos datos (aleron y elevador)</li>
	<li>
		Flightgear simula comportamiento</li>
</ol>
<p>
	As&iacute;, el programa principal en matlab quedar&iacute;a como sigue:</p>
<pre class=\"rteindent1 rteindent2\" style=\"border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-style: initial; border-color: initial; font-size: 14px; margin-top: 1.5em; margin-right: 0px; margin-bottom: 1.5em; margin-left: 80px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; vertical-align: baseline; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: transparent; white-space: pre; font: normal normal normal 1em/normal Consolas, 'Andale Mono', 'Lucida Console', monospace; line-height: 1.5; background-position: initial initial; background-repeat: initial initial; \">
<code>ajuste_aleron = 0.071;
ajuste_elevador = -0.3;

s = serial(&#39;COM3&#39;);
set(s,&#39;BaudRate&#39;,9600);
set(s,&#39;DataBits&#39;,8);
set(s,&#39;StopBits&#39;,1);
fopen(s);

memoria_giro = 0;

for i=1:5000,
    giro = fg_leer(&#39;http://localhost:5400/orientation/roll-deg&#39;)
    cabeceo = fg_leer(&#39;http://localhost:5400/orientation/pitch-deg&#39;)

    ataque_aleron = ajuste_aleron + str2num(escribir_serie_giro(giro,s))
    ataque_elevador = ajuste_elevador + 
str2num(escribir_serie_cabeceo(cabeceo,s));

    memoria_giro_antigua = memoria_giro;
    memoria_giro = giro;

    line([i+1,i],[0,0],&#39;color&#39;,&#39;r&#39;);
    line([i+1,i],[memoria_giro,memoria_giro_antigua]); 
    pause(.0001);hold off;

    fg_escribir(&#39;http://localhost:5400/controls/flight/elevator&#39;,
num2str(ataque_elevador));
    fg_escribir(&#39;http://localhost:5400/controls/flight/aileron&#39;,
num2str(ataque_aleron));

end;
</code></pre>
<p class=\"rtejustify\">
	En dicho c&oacute;digo, se incluyen las l&iacute;neas necesarias para observar la gr&aacute;fica del comportamiento del giro en tiempo real.</p>
<p class=\"rtejustify\">
	El c&oacute;digo en arduino, as&iacute; como el anterior, se encuentran adjuntos junto con los dem&aacute;s scripts de matlab necesarios para la ejecuci&oacute;n.</p>
<p class=\"rtejustify\">
	En la siguiente imagen podemos observar la convergencia que el sistema manifiesta ante desequilibrios intencionados sobre el modelo de radiocontrol virtual. Aproximadamente el ajuste m&aacute;s importante y determinante suele durar unos dos segundos seguido de la fase de amortiguamiento que se alarga unos segundos m&aacute;s.</p>
<p class=\"rtecenter\">
	<img alt=\"\" src=\"http://farm3.static.flickr.com/2743/4354449634_d8c1d9f1c4.jpg\" style=\"margin-left: 10px; margin-right: 10px; margin-top: 10px; margin-bottom: 10px; float: center; width: 500px; height: 271px; \" /></p>
<p class=\"rtejustify\">
	Y a continuaci&oacute;n un v&iacute;deo sobre dicho comportamiento:</p>
<p class=\"rtecenter\">
	<object classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" data=\"http://www.flickr.com/apps/video/stewart.swf?v=71377\" height=\"300\" type=\"application/x-shockwave-flash\" width=\"400\"> <param name=\"flashvars\" value=\"intl_lang=en-us&amp;photo_secret=ca8d84b819&amp;photo_id=4357546624\" /> <param name=\"movie\" value=\"http://www.flickr.com/apps/video/stewart.swf?v=71377\" /> <param name=\"bgcolor\" value=\"#000000\" /> <param name=\"allowFullScreen\" value=\"true\" /><embed allowfullscreen=\"true\" bgcolor=\"#000000\" flashvars=\"intl_lang=en-us&amp;photo_secret=ca8d84b819&amp;photo_id=4357546624\" height=\"300\" src=\"http://www.flickr.com/apps/video/stewart.swf?v=71377\" type=\"application/x-shockwave-flash\" width=\"400\"></embed></object></p>
<p>
	Music Creative Commons: Alexander Blu - May - Emptiness</p>
",
          "wp:post_id": "43",
          "wp:post_date": "2011-06-06 19:34:49",
          "wp:post_date_gmt": "2011-06-06 19:34:49",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "2-guiado-del-modelo-de-radiocontrol-virtual-mediante-arduino-con-matlab-como-pasarela-no-track-gps",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "sin-categoria",
            "#cdata-section": "Sin categoría"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "Presentación Arduino Seminario CAPTA UAH",
          "link": "http://eduardomarin.es/blog/?p=45",
          "pubDate": "Mon, 06 Jun 2011 19:35:25 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?p=45"
          },
          "content:encoded": "<p>
	Aqu&iacute; adjunto la presentaci&oacute;n del Seminario de Arduino que impart&iacute; en la Universidad de Alcal&aacute; de Henares para la <a href=\"http://www.capta.org.es/\">C&aacute;tedra CAPTA</a>.</p>
<p align=\"center\">
	<iframe frameborder=\"0\" height=\"451\" src=\"https://docs.google.com/present/embed?id=dfdnj3h7_448dht9mnfp&amp;size=m\" width=\"555\"></iframe></p>
",
          "wp:post_id": "45",
          "wp:post_date": "2011-06-06 19:35:25",
          "wp:post_date_gmt": "2011-06-06 19:35:25",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "presentacion-arduino-seminario-capta-uah",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "sin-categoria",
            "#cdata-section": "Sin categoría"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "SACAR - 00 - Introducción",
          "link": "http://eduardomarin.es/blog/?p=50",
          "pubDate": "Wed, 13 Jul 2011 19:32:22 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?p=50"
          },
          "content:encoded": "Como parte del desarrollo del proyecto SACAR (Sistema de Alertas en CARreteras) que estoy realizando, intentaré ir documentando, en paralelo a la documentación formal, pasos y puntos que considero determinantes para el correcto avance del mismo.

<strong>Introducción</strong>
<div>
<p id=\"internal-source-marker_0.8782433236483485\" dir=\"ltr\"><em>Hace algo mas de 200 años, en 1771, un ingeniero militar francés, Cugnot, creó el primer automóvil de la historia movido por tracción mecánica [1]. A partir de entonces, y gracias al proceso de fabricación en serie que Henry Ford aplicó en la construcción de su automóvil, el Ford T, el numero de coches en circulación ha crecido espectacularmente en todo el mundo, alcanzando los 800 millones de vehículos en la actualidad.</em></p>
<p dir=\"ltr\"><em>Esta cifra, que en un principio nos hace pensar en un progreso positivo del ser humano, favoreciendo la movilidad, comunicación y productividad, tiene también su lado negativo, y es el numero de accidentes de trafico que cada año se cobran la vida de miles de personas. En este sentido, si observamos la evolución del número de accientes de tráfico en la Unión Europea, vemos como en el año 1995 fueron de aproximadamente unos 65.000, mientras que en el año 2006, se sitúan por debajo de los 50.000 [2]. Vemos por tanto como hay una tendencia a la baja, a pesar de que el numero de vehículos creció en el mismo período. Este hecho se debe, principalmente, a las continuas mejoras en la calidad de los trazados, en la educación vial del ciudadano y en la seguridad de los vehículos.</em></p>
<p dir=\"ltr\"><em>Cabe destacar la importancia que ha tenido el desarrollo de este ultimo aspecto, la seguridad en los vehículos. Así, la agencia norteamericana de seguridad, National Highway Traffic Safety Administration,  ha estimado que, en el periodo 1975-1999, han podido salvarse 123.000 vidas gracias al uso del cinturón, y que, gracias al uso del airbag, se habrían salvado en el periodo 1987-2001, 7200 vidas. Estos dos dispositivos mencionados anteriormente se enmarcan dentro de los elementos de seguridad pasivos, pues realizan su función tras producirse el accidente. Si nos fijamos en los elementos de seguridad activos (entre ellos se encontrarían los frenos), podemos destacar cómo la introducción en los vehículos del ESP (Electronic Stability Program), lograron reducir la gravedad de las heridas severas de un accidente en un 21% [3]. Parecen ser, por lo tanto, razones suficientes para continuar en el empeño de mejorar los dispositivos de seguridad, aprovechando las ventajas que nos ofrece la tecnología.</em></p>
<p dir=\"ltr\"><em>En este sentido, los vehículos han ido mejorandose día a día hasta el punto de lograr una inteligencia muy particular, gracias a la inclusión de electrónica y sensores como par fundamental en la fabricación actual de vehículos. Sin embargo, la percepción que el vehículo tiene del exterior mediante estos sensores esta limitada, y podríamos hablar de una percepción local, que se extendería pocos metros a su alrededor (incluiríamos en este punto los sensores mas avanzados como son los sistemas de control de crucero basados en radares de corto alcance). Parece ser, por tanto, un limite real que habría que cruzar, otorgando un mayor campo de visión al vehículo para potenciar esa inteligencia anteriormente habíamos mencionado.</em></p>
<p dir=\"ltr\"><em>En 1997, el Centro Europeo para la Estandarización (CEN), adoptó un nuevo estándar de comunicación bajo el protocolo TC 278 (ISO TC 204), llamado DSRC (Dedicated Short-Range Communication) [5]. Gracias a este nuevo protocolo, desarrollado expresamente para el intercambio de información entre los distintos medios de transporte, podríamos establecer comunicaciones de hasta 1km de distancia, permitiendo así el intercambio de información entre los vehículos que se encontraran dentro de ese radio de acción.</em></p>
<p dir=\"ltr\"><em>En 2005 esta tecnología fue aprovechada por General Motors para desarrollar su sistema v2v que permitía la comunicación entre vehículos (de forma similar a como se intercambia información en redes p2p), para así \"montar\" una red dinámica en carretera que transmite información relevante en cuanto al estado de la vía y situaciones peligrosas en la circulación. La idea era crear una red de comunicación \"al vuelo\" cuyos nodos fueran los propios vehículos, que generase el contenido necesario para la prevención de incidentes o accidentes.</em></p>
<p dir=\"ltr\"><em>Una de las características de este sistema, como su nombre así lo indica, es que utiliza tecnología dedicada a tal propósito, utilizando un protocolo de comunicación inalámbrica que opera en el rango de los 5.9GHz (IEE 802.11p), característica que se refleja en una mayor capacidad de propagación, pero que encarece los equipos de transmisión que integran dicho protocolo.</em></p>
<p dir=\"ltr\"><em>Por ello, como alternativa de bajo coste, proponemos aquí el desarrollo de un sistema similar que utilice una tecnología de comunicación  basada en el estándar 802.15.4 para redes de área personal con tasas bajas de transmisión de datos (low-rate wireless personal area network, LR-WPAN)[6]. La ventaja de esta tecnología es que, en contra de los sistemas DSRC, los dispositivos que la implementan son baratos, livianos y con alta capacidad de integración. Por contra, y como es de suponer, el radio de actuación es inferior que el de los equipos DSRC. Aún así, podemos lograr distancias de enlace de hasta 1km en dispositivos de 100mW.</em></p>
<p dir=\"ltr\"><em>Así, junto a la capacidad de crear redes de enlace entre vehículos próximos entre sí (red v2v), tendremos la capacidad de situarlos en un contexto geográfico, a través de módulos GPS instalados en cada uno de ellos, para obtener diferentes respuestas. Además, una ventaja del sistema es la capacidad de ampliación y escalabilidad que ofrece, gracias a la variada cantidad de dispositivos de captura de datos que pueden acoplarse, como pudieran ser acelerómetros para ser más precisos en desplazamientos laterales o colisiones, sensores de proximidad para alertar sobre alcance en caso de frenada, o incluso ofrecer servicios de captura de datos a terceros al montar en este sistema otro tipo de sensores  (temperatura, presión, químicos...).</em></p>
<p dir=\"ltr\"><em>Visto esto, ¿qué aplicaciones prácticas podrían desarrollarse? Sabemos que en caso de accidente en una autovía, ésta se colapsa y las retenciones pueden provocar aparatosos y peligrosos alcances que podrían evitarse con este sistema. Además, podríamos facilitar el paso de ambulancias y vehículos de emergencia al conocer su posición. Podríamos incluso evitar la retención, tomando una ruta alternativa que, además, facilitaría la descongestión de la misma. Pero no solo seria útil en este tipo de vías. En carreteras interurbanas y urbanas podrían evitarse colisiones en cruces y adelantamientos pues el sistema seria capaz de advertirnos de la presencia de otro automóvil dirigiéndose hacia un punto de cruce en nuestra trayectoria.</em></p>
<p dir=\"ltr\">&nbsp;</p>
<p dir=\"ltr\"><em>2   Objetivos</em></p>
<p dir=\"ltr\"><em>El propósito principal del trabajo se centra en el desarrollo un sistema de alertas en carretera para vehículos rodados basado en redes de comunicación V2V LR-WPAN (low-rate wireless personal area network) bajo el protocolo 802.15.4.</em></p>
<p dir=\"ltr\"><em>Para conseguirlo, se plantean los siguientes objetivos específicos:</em></p>
<p dir=\"ltr\">&nbsp;</p>

<ol>
	<li>
<p dir=\"ltr\"><em>Realización de un proceso de investigación previo basado en una revisión bibliográfica sobre la situación actual en el campo de la comunicación en el tráfico rodado.</em></p>
</li>
	<li>
<p dir=\"ltr\"><em>Realización de un estudio previo sobre el estandar 802.15.4 y sobre las redes de comunicación LR-WPAN.</em></p>
</li>
	<li>
<p dir=\"ltr\"><em>Estudio, evaluación y selección de herramientas de simulación de tráfico y de redes de comunicación que permitan la realización de pruebas previas a la implementación física del sistema.</em></p>
</li>
	<li>
<p dir=\"ltr\"><em>Simulación de diferentes situaciones reales candidatas a la generación de alertas que incluyan la simulación del comportamiento de los vehículos y la comunicación entre ellos.</em></p>
</li>
	<li>
<p dir=\"ltr\"><em>Evaluar y seleccionar un dispositivo de implantación del sistema final basado en microcontroladores.</em></p>
</li>
	<li>
<p dir=\"ltr\"><em>Evaluar y seleccionar un módulo gps de entre las opciones disponibles en el mercado. Implementar el sistema de adquisición de los datos geograficos que nos reporta el modulo elegido.</em></p>
</li>
	<li>
<p dir=\"ltr\"><em>Evaluar y seleccionar un módulo de comunicación inalámbrica basada en el estándar IEEE 802.15.4</em></p>
</li>
	<li>
<p dir=\"ltr\"><em>Estudio y desarrollo del sistema del módulo de captura y procesado de la información que nos devuelve el módulo gps.</em></p>
</li>
	<li>
<p dir=\"ltr\"><em>Estudiar e implementar un modulo para la gestión y difusión de la información procesada a toda la red.</em></p>
</li>
	<li>
<p dir=\"ltr\"><em>Estudio e implementación de una interfaz de usuario que permita presentar la información relevante al conductor, aumentando, de esta forma, el grado de seguridad activa en el vehículo.</em></p>
</li>
</ol>
</div>
&nbsp;",
          "wp:post_id": "50",
          "wp:post_date": "2011-07-13 19:32:22",
          "wp:post_date_gmt": "2011-07-13 19:32:22",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "sacar-introduccion",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": [
            {
              "-domain": "category",
              "-nicename": "arduino",
              "#cdata-section": "arduino"
            },
            {
              "-domain": "category",
              "-nicename": "mixim",
              "#cdata-section": "mixim"
            },
            {
              "-domain": "category",
              "-nicename": "omnet",
              "#cdata-section": "omnet"
            },
            {
              "-domain": "category",
              "-nicename": "sacar",
              "#cdata-section": "sacar"
            },
            {
              "-domain": "category",
              "-nicename": "sommer",
              "#cdata-section": "sommer"
            },
            {
              "-domain": "category",
              "-nicename": "sumo",
              "#cdata-section": "sumo"
            },
            {
              "-domain": "category",
              "-nicename": "vanet",
              "#cdata-section": "vanet"
            }
          ],
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "SACAR - 01 - Preparación del entorno de simulación",
          "link": "http://eduardomarin.es/blog/?p=57",
          "pubDate": "Thu, 21 Jul 2011 08:29:58 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?p=57"
          },
          "content:encoded": "Para el desarrollo de nuestro proyecto SACAR, utilizaremos un entorno de simulación de redes de comunicación bien conocido, el Framework <a href=\"http://www.omnetpp.org/\">OMNeT++</a>. Como leemos en su carta de presentación \"<strong><em>OMNeT++ is an extensible, modular, component-based C++ simulation library and framework, primarily for building network simulators</em>\"</strong>. Además, la ventaja de este entorno de simulación es que hay un fuerte apoyo de desarrollo común en la red, con multitud de módulos creados para dar soporte a funciones específicas y herramientas que se integran perfectamente con OMNET. En este sentido, nos debemos fijar en otra herramienta de simulación, <a href=\"http://sourceforge.net/apps/mediawiki/sumo/index.php?title=Main_Page\">SUMO</a>, \"<em><strong>S</strong>imulation of <strong>U</strong>rban <strong>MO</strong>bility\" (SUMO) is an open source, highly portable, microscopic road traffic simulation package designed to handle large road networks</em>\" y en el módulo \"<em>traci</em>\" del framework \"<em>mixim-sommer</em>\" que <a href=\"http://veins.car2x.org/\">VEINS</a> ofrece a OMNET++ la interfaz necesaria para poder comunicarse con SUMO. De esta forma, con el tándem OMNET + traci + SUMO, nos encontramos dispuestos para comenzar el desarrollo de proyectos de carácter VANET (Vehicular ad hoc networks) pudiendo centrarnos en el desarrollo de partes específicas o poner a prueba algoritmos y soluciones que hacen uso de toda esta base ya creada.

Finalmente, y para terminar de presentar el entorno de simulación en el cual realizaremos nuestras pruebas, cabe destacar que en este proyecto, para realizar la comunicación V2V, podíamos utilizar un protocolo de comunicación desarrollado para tal propósito, como pudiera ser el que emplea la tecnología <strong><a href=\"http://en.wikipedia.org/wiki/Dedicated_short-range_communications\">DSRC</a></strong> (﻿﻿<strong><em>Dedicated short-range communications</em></strong>), sin embargo, dado que la implementación real es cara, para nuestro caso particular haremos uso del protocolo 802.15.4, que se aplica en la tecnología xbee (zigbee), mucho más barata, y con alcances de hasta 80km (modelos de 500mW, visión directa).

Así, para realizar la simulación correctamente, debemos utilizar dicho protocolo. Las capas que componen dicho protocolo podemos encontrarlas ya implementadas en el módulo que <a href=\"http://veins.car2x.org/\">VEINS</a> nos ofrece dentro del paquete \"mixim-sommer\".

<img class=\"aligncenter\" title=\"VEINS - VANETS\" src=\"http://veins.car2x.org/features/masthead_pic.jpg\" alt=\"\" width=\"468\" height=\"128\" />
<div style=\"text-align: center;\"><img class=\"alignnone\" title=\"VEINS\" src=\"http://veins.car2x.org/media/logo_veins.png\" alt=\"\" width=\"208\" height=\"96\" /> <img class=\"alignnone\" title=\"OMNET++\" src=\"http://www.omnetpp.org/templates/omnetpp_bizcity_felix/images/logo.png\" alt=\"\" width=\"231\" height=\"46\" /> <img class=\"alignnone\" title=\"SUMO\" src=\"http://sourceforge.net/apps/mediawiki/sumo/nfs/project/s/su/sumo/7/70/MediaWikiSidebarLogo.png\" alt=\"\" width=\"128\" height=\"128\" /></div>
&nbsp;

<strong>INSTALACIÓN DEL ENTORNO DE SIMULACIÓN</strong>

En primer lugar, debemos instalar el framework OMNET++ y SUMO.

Para ello, en primer lugar instalaremos SUMO y, seguidamente OMNET++.

Antes de instalar SUMO, debemos tener instalados los siguientes módulos (mediante synaptic, en ubuntu 10.04):<em>xorg-dev</em>, <em>libXext-dev</em> y <em>autoconf</em>.

Descargamos los siguientes paquetes: fox-1.6.36.tar.gz, gdal-1.6.0.tar.gz, proj-4.6.0.tar.gz, xerces-c-current.tar.gz, sumo-src-0.12.0.tar.gz, y seguimos los siguientes pasos:

<code>tar xzf fox-1.6.36.tar.gz
cd fox-1.6.36
./configure --prefix=$HOME &amp;&amp; make install
cd ..
tar xzf gdal-1.6.0.tar.gz
cd gdal-1.5.1
./configure --prefix=$HOME &amp;&amp; make install
cd ..
tar xzf proj-4.6.0.tar.gz
cd proj-4.6.0
./configure --prefix=$HOME &amp;&amp; make install</code>

<code>tar xzf xerces-c-current.tar.gz
export XERCESCROOT=/home/edu/xerces-c-src_2_7_0
cd $XERCESCROOT/src/xercesc
autoconf
./runConfigure -plinux -cgcc -xg++ -minmem -nsocket -tnative -rpthread -P$HOME
make
make install</code>

<code>sudo aptitude install libtool libgdal1-dev proj libxerces-c2-dev
sudo aptitude install libfox-1.6-dev libgl1-mesa-dev libglu1-mesa-dev
cd /usr/lib; sudo ln -s libgdal1.6.0.so libgdal.so</code>

<code>tar xzf sumo-src-0.12.0.tar.gz
cd sumo-0.12.0
./configure --with-fox=$HOME --with-proj-gdal=$HOME --with-xerces=$HOME --prefix=$HOME</code>

<code>./configure --with-fox-includes=/usr/include/fox-1.6 --with-gdal-includes=/usr/include/gdal --with-proj-libraries=/usr --with-gdal-libraries=/usr --with-proj-gdal</code>

<code>make</code>

A continuación, instalamos OMNET++.

Descargamos la última versión de OMNET++, en nuestro caso, la versión 4.1

Copiamos el comprimido en un directorio temporal,
<span style=\"font-family: Monaco, Consolas, 'Andale Mono', 'DejaVu Sans Mono', monospace; font-size: 13px; line-height: 19px;\">$ cp omnetpp-4.1-src.tgz /usr/local</span>

y lo descomprimimos
<code>$ tar -xvf omnetpp-4.1-src.tgz</code>
<code>$ ln -s omnetpp-4.1 omnetpp</code>.

A continuación, instalamos los siguientes paquetes:

<code>$ sudo apt-get install bison flex blt lmodern giftrans doxygen libxml2-dev graphviz imagemagick tcl8.4 tk8.4 tcl8.4-dev tk8.4-dev</code>

e incluimos las siguientes líneas al archivo .bashrc, de forma que queden bien definidas las variables de entorno LD_LIBRARY, TCL_LIBRARY y PATH.
<code>
$ vi ~/.bashrc
$ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/omnetpp/lib
$ export TCL_LIBRARY=/usr/share/tcltk/tcl8.4
$ export PATH=$PATH:/usr/local/omnetpp/bin</code>

Tras reiniciar la shell, (o aplicando el comando <code>$ source ~/.bashrc</code>) para que los cambios tomen efecto, podremos personalizar diversos puntos de la instalación mediante la edición del archivo de configuración:

<code>$ cd /usr/local/omnetpp
$ vi configure.user</code>

Tras esto, comprobamos que todas las dependencias están satisfechas y que se guarde la configuración adecuada previo a la instalación

<code>$ sudo ./configure</code>

*Si ejecutamos este comando en modo root (vía sudo), podemos obtener warnings indicando que PATH y LD_LIBRARY_PATH no están incluidas en los directorios de
OMNeT++. Sin embargo, esto se debe a que el superusuario root no incluye estos directorios en su ruta, lo cual es normal, puesto que no han sido incluidos. Pese a que se trata únicamente de avisos warning convendría que sí definiéramos correctamente las variables de entorno para root, tal y como se especifica a continuación.

<code>$ su
$ vi ~/.bashrc</code>

Añadimos las siguientes líneas al fichero, con un proceso análogo al anterior.

<code>$ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/omnetpp/lib
$ export TCL_LIBRARY=/usr/share/tcltk/tcl8.4
$ export PATH=$PATH:/usr/local/omnetpp/bin</code>

Actualizamos el entorno y comprobamos de nuevo que la configuración es correcta:

<code>$ source ~/.bashrc
$ ./configure</code>

Finalmente, realizamos la instalación en base a nuestra configuración:

<code>$ make</code>

Si en algún momento debemos volver a recompilar, aplicando cualquier variación en nuestra configuración, limpiamos la instalación y reinstalamos:

<code>$ ./configure
$ make clean
$ make</code>

Finalmente, podremos ejecutar OMNET++ mediante la orden:

<code>$ omnetpp</code>

<a href=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/07/omnetpp.jpg\"><img class=\"aligncenter size-full wp-image-67\" title=\"omnetpp\" src=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/07/omnetpp.jpg\" alt=\"\" width=\"493\" height=\"323\" /></a>
<p style=\"text-align: center;\">Figura A.1 OMNET++ 4</p>
En este punto, tenemos OMNET++ y SUMO listos para trabajar, sin embargo, como habíamos comentado, vamos a utilizar un protocolo de comunicación en nuestro proyecto utilizado en los dispositivos de comunicación inalámbrica como Xbee o Zigbee. Este protocolo es el 802.15.4, y podemos encontrarlo ya implementado en el paquete mixim-sommer, que puede descargarse desde: <a href=\"git://github.com/sommer/mixim-sommer.git\">git://github.com/sommer/mixim-sommer.git</a>",
          "wp:post_id": "57",
          "wp:post_date": "2011-07-21 08:29:58",
          "wp:post_date_gmt": "2011-07-21 08:29:58",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "sacar-preparacion-del-entorno-de-simulacion",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": [
            {
              "-domain": "category",
              "-nicename": "arduino",
              "#cdata-section": "arduino"
            },
            {
              "-domain": "category",
              "-nicename": "mixim",
              "#cdata-section": "mixim"
            },
            {
              "-domain": "category",
              "-nicename": "omnet",
              "#cdata-section": "omnet"
            },
            {
              "-domain": "category",
              "-nicename": "sacar",
              "#cdata-section": "sacar"
            },
            {
              "-domain": "category",
              "-nicename": "sommer",
              "#cdata-section": "sommer"
            },
            {
              "-domain": "category",
              "-nicename": "sumo",
              "#cdata-section": "sumo"
            },
            {
              "-domain": "category",
              "-nicename": "vanet",
              "#cdata-section": "vanet"
            }
          ],
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "SACAR - 02a - Modificación nivel del aplicación en un host 802.15.4",
          "link": "http://eduardomarin.es/blog/?p=69",
          "pubDate": "Wed, 27 Jul 2011 17:20:42 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?p=69"
          },
          "content:encoded": "<p>Como dijimos en la anterior entrada, el paquete <em>mixim-sommer </em>implementa el protocolo de comunicación IEEE 802.15.4 en todas sus capas. Como podemos ver a continuación,</p>
<p><a href=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/07/arquitectura_802154.gif\"><img class=\"aligncenter size-full wp-image-70\" title=\"arquitectura_802154\" src=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/07/arquitectura_802154.gif\" alt=\"\" width=\"450\" height=\"322\" /></a></p>
<p>este protocolo abarca el nivel físico y de enlace (MAC Y LLC) y por encima se sostienen capas que el usuario puede definir en función de sus necesidades. En el caso de la implementación de ejemplo que nos ofrece mixim-sommer, desarrollan una capa de aplicación particular y que nosotros modificaremos de forma evolutiva para ir integrando nuestras propias funciones.</p>
<div>
<p>Dentro de los ejemplos del framework, existe una implementación de ese protocolo llamada ieee802154a. Para no modificar ese ejemplo, directamente duplicaremos el directorio (desde omnetpp) y cambiaremos el nombre al duplicado (en nuestro caso: mi_ieee802154a). Internamente, debemos modificar correctamente toda referencia al antiguo nombre, y sustituirlo por el nuevo (empezando por el nombre del paquete: package org.mixim.examples.mi_ieee802154a; y continuando con posibles importaciones y llamadas a clases que hagan referencia a elementos internos a ese directorio).</p>
<p>Una vez realizados estos cambios, nos fijaremos en la capa más externa, la que implementa el nivel de aplicación de este protocolo. Este nivel será el que debamos modificar para adecuarlo al comportamiento que nosotros deseamos otorgarle.</p>
<p>Como primera funcionalidad de prueba, para comprobar la correcta comunicación entre pares, implementaremos un nivel de aplicación que permita enviar mensajes en modo BROADCAST.</p>
<p>Así, partimos del módulo implementado original cuya estructura interna es la siguiente:</p>
</div>
<div><img src=\"https://lh5.googleusercontent.com/C8f3qfwxkQuL5SyILqdnB-ZPif09BVOhkMWRZasTKq70TWjFHRqOL1CfgZK-iUPpy-xyFdky6BgksVbC4oBEOy8SCT89lPUgDmVOHW_lRIG_G7IziA\" alt=\"\" width=\"225px;\" height=\"370px;\" /></div>
<p>El primer paso será copiar (duplicar) dicho directorio y cambiar el nombre a los archivos para evitar duplicidad con el original.</p>
<div>
<p><img src=\"https://lh6.googleusercontent.com/_ieY2j_PmMMvOujzpSXEsPQlVpUrX0gJTFLBMdNXsFoGfeA-scK9gyHxNbaseLTaTi2eWpKTTnpiuIMai2__7umxtfPGqTiN95AlkyigpdnnDDt8Bw\" alt=\"\" width=\"311px;\" height=\"299px;\" /></p>
<p>Vemos como hemos cambiado el nombre del archivo .ned y del script sh. Este último tampoco es importante, pues su finalidad es la de automatizar el lanzamiento de la red desde un terminal.</p>
<p>En cambio, el archivo .ned (en nuestro caso mi_ieee802154a.ned) es uno de los módulos principales en la simulación de esta red. A través de éste podemos definir una determinada red de forma gráfica (mediante la interfaz que ofrece omnet) y modular. La modularización es una de las ventajas de omnet. Permite aprovechar implementaciones más sencillas o específicas para construir sistemas más complejos. Así, mi_ieee82154a.ned define un escenario en el que se indica la aparición de un elemento más simple, un “host” implementado previamente para este protocolo dentro del framework, “Host802154A.ned”. Más tarde lo analizaremos.</p>
<p>Así, en nuestro archivo mi_ieee802154a.ned nos encontramos con el siguiente código:</p>
<p><code>network mi_ieee802154a<br />
{<br />
parameters:<br />
double playgroundSizeX @unit(m); // x size of the area the nodes are in (in meters)<br />
double playgroundSizeY @unit(m); // y size of the area the nodes are in (in meters)<br />
double playgroundSizeZ @unit(m); // z size of the area the nodes are in (in meters)<br />
double numHosts; // total number of hosts in the network</code></p>
<p><code>@display(\"bgb=$playgroundSizeX,$playgroundSizeY,white,,;bgp=10,50\");<br />
submodules:<br />
world: BaseWorldUtility {<br />
parameters:<br />
playgroundSizeX = playgroundSizeX;<br />
playgroundSizeY = playgroundSizeY;<br />
playgroundSizeZ = playgroundSizeZ;<br />
@display(\"p=251,50;i=misc/globe\");<br />
}</code></p>
<p><code>channelControl: ConnectionManager {<br />
parameters:<br />
@display(\"p=450,0;b=42,42,rect,red,,;i=abstract/multicast\");<br />
}</code></p>
<p><code>node[numHosts]: mi_Host802154A {<br />
parameters:<br />
numHosts = numHosts;<br />
@display(\"p=121,123;b=42,42,rect,red;i=device/wifilaptop\");<br />
}</code></p>
<p><code>connections allowunconnected:<br />
// all connections and gates are to be generated dynamically<br />
}</code></p>
<p>Que simplemente se trata de la codificación que representa el siguiente entorno:</p>
<p><img src=\"https://lh3.googleusercontent.com/rDXY7PG5kqrC_rEG2lDHnBtjpQyn6cDGcgAmyHp8tq--iPL64lwZF9SN_H55LqGjtTBLG8hpk9gGsYHnGK8ieDXNV8G33iiUQ7GGXtG5u0Jg0gA9Kw\" alt=\"\" width=\"327px;\" height=\"270px;\" /></p>
<p>Como hemos dicho antes, esta declaración reutiliza un módulo (objeto) que implementa el comportamiento de un nodo o “host” determinado. Este nodo existe dentro del framework mixim-sommer y se llama “Host802154A.ned”. Si recordamos, mi_ieee802154a era una copia del directorio ieee802154, y, como tal, estará reutilizando ese mismo módulo (“Host802154A.ned”). Si bien podríamos dejar que nuestra versión reutilizara directamente ese módulo, estaríamos duplicando el comportamiento de la versión original. Así pues, lo que nosotros haremos será duplicar el módulo “Host802154A.ned”, renombrarlo (“mi_Host802154A.ned”) y modificarlo internamente. (Obs: Este módulo lo podemos encontrar en el directorio mixim-sommer/modules/node/).</p>
<p><img src=\"https://lh3.googleusercontent.com/nnDsKGqZEALmJVEBPrSY1mhgTuC8UvoZVntEiP4EE7ab27Qq3md_X3BKJIRR9WPl6tDo37rKl1iNXEmdUQ9e9pAO66oDoUeFC3layFip_k6XJKVuOg\" alt=\"\" width=\"224px;\" height=\"74px;\" /></p>
<p>“Host802154A.ned” implementa el comportamiento de un nodo o dispositivo basado en el protocolo ieee 802.15.4 como pudiera ser un zigbee. En concreto, se basa en el comportamiento real del chipset de los transmisores zigbee CC2420 de Texas Instrument (<a href=\"https://docs.google.com/leaf?id=0B_6aJnYyz90jY2NjZGMzM2YtZmJkYS00M2Y3LWE2MmUtMTk1YTk3NjE1ZGU2&amp;hl=es\">enlace</a>). Volviendo al comportamiento virtual, en el editor omnet, podemos visualizar la torre de protocolos que define este módulo:</p>
<p><img src=\"https://lh6.googleusercontent.com/I3Gl161o_aY_vuxpe2ANd9KU9BiuRaBY5PU0Vlia5ha6eNgFrsICkL652enqGdSeSwoQW3loDY2j8Zk39Wy4iYjxYak399iSxTZqyfDHJ-1CWvWFIQ\" alt=\"\" width=\"388px;\" height=\"389px;\" /></p>
<p>Observamos cómo vuelve a repetirse la reutilización de módulos más sencillos, simplificando la construcción de los elementos. De un vistazo intuimos diversos elementos que podrían resultarnos familiares. Estos elementos son los que aparecen en el lado izquierdo, interconectados, y que representan la torre de protocolos de ieee 802.15.4. Esta torre de protocolos sería la siguiente. Así, el módulo “nic” se encarga de implementar la funcionalidad de los dos bloques inferiores “IEEE 802.15.4 868/915 MHz PHY” - “IEEE 802.15.4 2400 Mhz PHY” (en nuestro caso concreto, el chipset trabaja sobre el espectro de los 2.4 Ghz). Por otro lado, el módulo “net” encapsula el segundo y tercer nivel del protocolo (nivel de enlace). En la imagen, IEEE 802.15.4 MAC, IEEE 802.15.4 LLC y IEEE 802.2 LLC, Type1.</p>
<p><img src=\"https://lh3.googleusercontent.com/TI9l3uryDkeJv_QLeHwrkuw9iCXpCujjAIG9LnQc_2FBv2GF4qb3k4JlRZ67vhdJUqph2FuK8_5X13qVxY3VHwxJLOtDctzKrFRWM35aVnHVD81Wvw\" alt=\"\" width=\"450px;\" height=\"322px;\" /></p>
<p>Dado que esos niveles son propios del protocolo IEEE 802.15.4, nosotros no debemos modificarlos, y los dejaremos como están. Por último, el tercer nivel llamado “app” se corresponde con las capas superiores que representa la imagen (en ésta, se extiende hacia zigbee), y éste será el que nosotros necesitamos modificar.</p>
<p>Aparte de esa torre de protocolos, encontramos una serie de módulos en el lado derecho. Estos módulos implementan una serie de funcionalidades complementarias al propio protocolo que permiten simular de forma más aproximada el comportamiento del dispositivo físico (“battery”, “arp”), permiten obtener ciertas estadísticas de uso (“battery stats”, “stats”), o que, simplemente, son necesarios para el correcto funcionamiento de la simulación (“utility”, “mobility”).</p>
<p>Volviendo al nivel de aplicación (“app”), como señalamos, queda fuera del protocolo y de él depende el comportamiento último que deseamos otorgar al nodo o dispositivo. En la implementación original, este nivel es muy parecido al que nosotros queremos construir en primer lugar. Internamente, el módulo utiliza la implementación desarrollada en C++ llamada “TestAppLayer.cc” que permite el envío en modo broadcast de un único mensaje. Pero, entonces, ¿por qué debemos modificar esta capa, y crear una nosotros? En la implementación original, este mensaje broadcast hace uso de una clase especial para el envío de mensajes “<a href=\"http://www.omnetpp.org/doc/omnetpp40/api/classcMessage.html\">cMessage</a>”. Esta clase encapsula determindada información relativa, mayormente, con parámetros de control (tipo de mensaje, timestamp, prioridad), pero carece, por ejemplo, de un campo de datos donde enviar información de usuario del nivel de aplicación. El objetivo de esta elección se basa en dejar al usuario que implemente su propio mensaje aprovechando esta clase como “template” básico.</p>
<p>Así, lo primero que debemos realizar es la creación de nuestro propio mensaje para este nivel de aplicación, eligiendo los campos que creamos oportunos. Como primera aproximación, crearemos un paquete con un campo de datos, y campos relativos a la dirección fuente y destino IP.</p>
<p>Para ello, en omnet, vamos al directorio de mixim-sommer: mixim-sommer/base/messages. Una vez aquí, botón derecho “New-Message Definition (msg)”. Daremos nombre a nuestro mensaje (Mi_paquete.msg), seleccionaremos la clase padre (packet), y finalizaremos su creación. Habremos creado un archivo que tendrá el siguiente código:</p>
<p><code>message Mi_paquete {<br />
int someField;<br />
string anotherField;<br />
double arrayField1[];<br />
double arrayField2[10];<br />
}</code></p>
<p>Este código, a modo de plantilla, será modificado según lo que habíamos comentado anteriormente.</p>
<p><code>packet Mi_paquete {<br />
int destAddr = -1; // dirección destino<br />
int srcAddr = -1; // dirección fuente<br />
string datos; // datos<br />
}</code></p>
<p>A partir de esta definición, crearemos, mediante un tool que provee omnet, la clase para este nuevo paquete. Para ello, desde un terminal, iremos hasta donde se encuentre este nuevo archivo (“mis_documentos/omntpp/mixim-sommer/base/messages”). Una vez aquí, basta con ejecutar esta herramienta: opp_msgc Mi_paquete.msg. Automáticamente se crearán dos archivos:  Mi_paquete_m.cc y Mi_paquete_m.h que contendrá la nueva clase para este mensaje, con funciones propias para poder acceder a los datos encapsulados en ella.</p>
<p>Una vez definida esta clase, ya podemos implementar nuestro nivel de aplicación.</p>
</div>

",
          "wp:post_id": "69",
          "wp:post_date": "2011-07-27 17:20:42",
          "wp:post_date_gmt": "2011-07-27 17:20:42",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "sacar-02a-modificacion-nivel-del-aplicacion-en-un-host-802-15-4",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": [
            {
              "-domain": "category",
              "-nicename": "arduino",
              "#cdata-section": "arduino"
            },
            {
              "-domain": "category",
              "-nicename": "mixim",
              "#cdata-section": "mixim"
            },
            {
              "-domain": "category",
              "-nicename": "omnet",
              "#cdata-section": "omnet"
            },
            {
              "-domain": "category",
              "-nicename": "sacar",
              "#cdata-section": "sacar"
            },
            {
              "-domain": "category",
              "-nicename": "sommer",
              "#cdata-section": "sommer"
            },
            {
              "-domain": "category",
              "-nicename": "sumo",
              "#cdata-section": "sumo"
            },
            {
              "-domain": "category",
              "-nicename": "vanet",
              "#cdata-section": "vanet"
            }
          ],
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "SACAR – 02b – Modificación nivel del aplicación en un host 802.15.4",
          "link": "http://eduardomarin.es/blog/?p=75",
          "pubDate": "Wed, 27 Jul 2011 17:33:28 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?p=75"
          },
          "content:encoded": "<div>

Pero antes, vamos a señalar algunos conceptos que permitirán comprender mejor el código que en nuestra aplicación vamos a usar.

Anteriormente hemos visto cómo habíamos utilizado la clase cPacket para crear nuestro propio paquete. cPacket es una sublcase de cMessage. Algo más básica, padre de cPacket, puede utilizarse para intercambiar información entre clases o incluso utilizarse como “selfMessages”. Pero, ¿para qué enviarse mensajes a sí mismos?. La idea es simple. Se envían mensajes “programados”, con una indicación temporal, permitiendo de esta forma planificar el flujo de ejecución de una determinada instancia (en nuestro caso, del nivel de aplicación).

Dicho esto, parece que en líneas sucesivas veremos un determinado tipo de mensajes “selfMessages” que “recordarán” al propio nivel de aplicación qué y cuando deben hacer algo.
Se trata de una forma original de scheduling que nosotros aprovecharemos y que veremos a continuación.

mi_applayer.c

El objetivo de esta clase (que implementa nuestro nivel de aplicación), será el de dotar a cada nodo de la posibilidad de enviar mensajes broadcast a sus vecinos.

Para ello, podríamos preguntarnos qué valores o parámetros debemos tener en cuenta a la hora de enviar estos mensajes. Podemos pensar en el número de mensajes que cada nodo enviará, qué información voy a enviar en esos mensajes, qué hacer cuando reciba los de mis vecinos... Tendremos que pensar, incluso, en qué funciones serán necesarias para manejar dichos parámetros, y en la propia implementación de la clase.

Así, tendremos en cuenta los siguientes parámetros:

Número de mensajes a enviar, dirección broadcast, mensajes enviados e información del mensaje.

En cuanto a las funciones que entran necesarias:

Inicialización y finalización de la aplicación, manejador de mensajes de la capa inferior y de automensajes, planificador de siguiente mensaje, envio de mensaje broadcast hacia nivel inferior y envío de respuesta a otro nodo.

Código fuente:

<code>/***************************************************************************
* file:        SensorApplLayer.h
*
* author:      Eduardo Marín
*
* copyright:   (C) 2010-2011
*
*              This program is free software; you can redistribute it
*              and/or modify it under the terms of the GNU General Public
*              License as published by the Free Software Foundation; either
*              version 2 of the License, or (at your option) any later
*              version.
*              For further information see file COPYING
*              in the top level directory
*
***************************************************************************
* part of:    Modifications to the MF-2 framework by CSEM
**************************************************************************/</code>

<code>#include \"mi_app_layer.h\"
#include \"NetwControlInfo.h\"</code>

<code>#include &lt;SimpleAddress.h&gt;</code>

<code>#include \"mi_app_layer.h\"</code>

<code>#define DIR_BROADCAST 2147483647 //255.255.255.255 en decimal
Define_Module(mi_app_layer)
;</code>

<code>/**
* Mediante esta función inicializamos el módulo convenientemente, en primer lugar
* a través del módulo BasicAppLayer.
**/
void mi_app_layer::initialize(int stage) {</code>

<code>BaseApplLayer::initialize(stage);
//Realizamos inicialización del módulo en dos fases
//En la primera, creamos el mensaje de control que activará el envío BROADCAST
//Inicializamos variables para llevar el control del número de mensajes enviados
if(stage == 0) {
delayTimer = new cMessage( \"delay-timer\", SEND_BROADCAST_TIMER );
mensajes_enviados = 0;
num_mensajes_a_enviar = par(\"num_mensajes_a_enviar\");
}</code>
<code>//En la segunda fase añadimos al planificador el mensaje de control
else if(stage==1) {
scheduleAt(simTime() + dblrand()*10, delayTimer);
}</code>

<code>}</code>

<code>/**
* Manejador de mensajes de la capa inferior
**/
void mi_app_layer::handleLowerMsg(cMessage *msg) {</code>

<code>Mi_paquete *mensaje;
const void *datos;</code>

<code>//Debemos identificar el tipo de mensaje recibido
switch( msg-&gt;getKind() ){
//Si se trata de un mensaje BROADCAST, procesamos el mensaje
case BROADCAST_MESSAGE:
mensaje = static_cast&lt;Mi_paquete *&gt;(msg);
EV &lt;&lt; \"Se ha recibido un paquete broadcast desde [\"&lt;&lt;mensaje-&gt;getSrcAddr()&lt;&lt;\"] -&gt; enviando respuestan\";
datos = mensaje-&gt;getDatos();
EV&lt;&lt;(char *)datos&lt;&lt;endl;
sendReply(mensaje);
break;
//En caso de tratarse de una respuesta de broadcast (BROADCAST_REPLY), simplemente lo anunciamos
case BROADCAST_REPLY_MESSAGE:
mensaje = static_cast&lt;Mi_paquete *&gt;(msg);
EV &lt;&lt; \"Se ha recibido respuesta desde [\"&lt;&lt;mensaje-&gt;getSrcAddr()&lt;&lt;\"]; borrando el mensajen\";
delete msg;
break;
//En caso de no ser de ninguno de los dos tipos, se lanza error.
default:
EV &lt;&lt;\"Error! paquete desconocido: \" &lt;&lt; msg-&gt;getKind()&lt;&lt;endl;
delete msg;
}
}</code>

<code>/**
* Esta función actúa de disparador de una nueva acción a partir de la recepción de
* un automensaje. Cuando se recibe un automensaje (SEND_BROADCAST_TIMER, en este caso)
* el nivel \"despertará\" para llevar a cabo el envío de un nuevo mensaje BROADCAST.
* Tras eso, volverá a autoplanificar un nuevo automensaje que le volverá a despertar
* al cabo de un tiempo igual al establecido.
*
**/</code>
<code>void mi_app_layer::handleSelfMsg(cMessage * msg) {
//Informamos del número de mensajes que el nivel ha enviado
EV &lt;&lt; \"numero de mensajes enviados: \"&lt;&lt; mensajes_enviados &lt;&lt; endl;
//Si se trata del tipo de mensaje correcto, actuamos en consecuencia
switch( msg-&gt;getKind() ){
case SEND_BROADCAST_TIMER:
//Si no hemos alcanzado el umbral máximo de mensajes enviados continuamos
if(num_mensajes_a_enviar &gt; mensajes_enviados){
mensajes_enviados++;
//Llamamos a la función de envío de mensaje
sendBroadcast();
//Planificamos nueva acción
planificar_siguiente_mensaje();
}
delete msg;
break;
//En caso de no corresponder el tipo, informamos del error
default:
EV &lt;&lt; \"Automensaje desconocido! -&gt; borrándolo, tipo: \"&lt;&lt;msg-&gt;getKind() &lt;&lt;endl;
delete msg;
}
}</code>

<code>/**
* Creamos la función planificadora de mensajes
**/
void mi_app_layer::planificar_siguiente_mensaje()
{
delayTimer = new cMessage( \"delay-timer\", SEND_BROADCAST_TIMER );
scheduleAt(simTime() + dblrand()*10, delayTimer);
}</code>

<code>/**
* Mediante esta función creamos un nuevo mensaje broadcast, que en un principio
* únicamente contendrá un mensaje \"Hola mundo\" para enviarlo a la capa inferior
**/
void mi_app_layer::sendBroadcast()
{</code>

<code>Mi_paquete *mensaje = new Mi_paquete(\"BROADCAST_MESSAGE\", BROADCAST_MESSAGE);</code>

<code>//Incluido en información del mensaje, indicamos la dirección de destino (broadcast)
mensaje-&gt;setDestAddr(DIR_BROADCAST);
// usamos la función getIndex() del módulo para obtener nuestra dirección (fuente)
mensaje-&gt;setSrcAddr( myApplAddr() );
//Establecemos la información dentro del campo de datos
mensaje-&gt;setDatos(\"Hola mundo\");
// Establecemos la dirección de envío del paquete. En este caso, dirección broadcast
mensaje-&gt;setControlInfo( new NetwControlInfo(DIR_BROADCAST) );</code>

<code>EV &lt;&lt; \"Enviando paquete!n\";
//Enviamos a la capa inferior
sendDown( mensaje );
}</code>

<code>/**
* Mediante esta función se simula la funcionalidad de un paquete ACK para nuestro nivel
* de aplicación. De esta forma, al recibir un mensaje broadcast se informa al nodo
* fuente de que hemos recibido el mensaje
**/
void mi_app_layer::sendReply(Mi_paquete *mensaje)
{
simtime_t delay;</code>

<code>delay = uniform(0, 0.01);</code>

<code>mensaje-&gt;setDestAddr(mensaje-&gt;getSrcAddr());
mensaje-&gt;setSrcAddr(myApplAddr());
mensaje-&gt;setKind(BROADCAST_REPLY_MESSAGE);
mensaje-&gt;setName(\"BROADCAST_REPLY_MESSAGE\");
sendDelayedDown(mensaje, delay);</code>

<code>EV &lt;&lt; \"Enviando la respuesta con retraso: \" &lt;&lt; delay &lt;&lt; endl;</code>

<code>//NOTE: the NetwControl info was already ste by the network layer
//and stays the same
}</code>

<code>/**
* Finalizamos el módulo a través de esta función
**/
void mi_app_layer::finish()
{
BaseApplLayer::finish();
if(!delayTimer-&gt;isScheduled()) delete delayTimer;
}
</code>

Una vez creado este nuevo nivel de aplicación, cuya clase <a href=\"http://mi_app_layer.cc/\">mi_app_layer.cc</a> se encontrará en el directorio: mixim-sommer/base/modules/, junto con el archivo de cabecera mi_app_layer.h que contendrá la siguiente información (con declaraciones y definiciones necesarias):

<code>/***************************************************************************
* file:        mi_app_layer.h
*
* author:      Eduardo Marín
*
* copyright:   (C) 2010-2011
*
*              This program is free software; you can redistribute it
*              and/or modify it under the terms of the GNU General Public
*              License as published by the Free Software Foundation; either
*              version 2 of the License, or (at your option) any later
*              version.
*              For further information see file COPYING
*              in the top level directory
*
***************************************************************************
* part of:    Modifications to the MF-2 framework by CSEM
**************************************************************************/</code>

<code>#ifndef MI_APPL_LAYER_H
#define MI_APPL_LAYER_H</code>

<code> </code><code>#include \"BaseApplLayer.h\"
#include \"NetwControlInfo.h\"
//#include \"cstat.h\"
#include \"BaseMacLayer.h\"
#include \"Mi_paquete_m.h\"</code>

<code>using namespace std;</code>

<code>class mi_app_layer : public BaseApplLayer
{</code>
<code>public:
/** @brief Initialization of the module and some variables*/
virtual void initialize(int);
virtual void finish();</code>

<code>enum APPL_MSG_TYPES{
SEND_BROADCAST_TIMER,
BROADCAST_MESSAGE,
BROADCAST_REPLY_MESSAGE
};</code>

<code>protected:
cMessage *delayTimer;
int num_mensajes_a_enviar;
int mensajes_enviados;</code>

<code>protected:
/** @brief Handle self messages such as timer... */
virtual void handleSelfMsg(cMessage*);</code>

<code>/** @brief Handle messages from lower layer */
virtual void handleLowerMsg(cMessage*);</code>

<code>/** Generación de automensajes */
void planificar_siguiente_mensaje();</code>

<code>/** @brief send a broadcast packet to all connected neighbors */
void sendBroadcast();</code>

<code>/** @brief send a reply to a broadcast message */
void sendReply(Mi_paquete *msg);
};</code>

<code>#endif</code>

Finalmente, para nuestra red mi_ieee802154a, creada a partir de la copia de la original ieee802154a, modificaremos el nivel de aplicación utilizado por defecto y seleccionaremos el que acabamos de implementar, que, tras la construcción de todo el espacio (Menú: Project-&gt;build all), nos debe aparecer el módulo automáticamente en el espacio de trabajo:

<img src=\"https://lh3.googleusercontent.com/JpC2xTsigqy8vAFErX-6fHjGMipAyAf9H0qsDjdWQ-al4ZRwLFBDwpXj5P58Gu7Rh6za2o3fk9NwofrAk0JzQpkv6At7Km9n5S4IkOkXJuqZD8MlHQ\" alt=\"\" width=\"620px;\" height=\"300px;\" />

Estamos ya en disposición de poder ejecutar esta red. Para ello, en el directorio de nuestra red (mixim-sommer/examples/mi_ieee802154a), botón derecho sobre el fichero mi_ieee802154a.ned, “Run as”-&gt;”Run configurations...”. En la nueva ventana, damos un nuevo nombre a la configuración de ejecución, comprobamos que se selecciona el archivo de configuración adecuado (omnetpp.ini) y ejecutamos:

<img src=\"https://lh3.googleusercontent.com/0rlzulExUwqRN-ufRfBKFUg77HCS4gPxII4c1D6MCVKjm2J71Vx7ZDoaMgDj4Y8eqhf5iYONfc5t-qMS7nmuUIb2DKGX6ii1QpRSteqyRtU-9ZV9aQ\" alt=\"\" width=\"647px;\" height=\"360px;\" />

El archivo “omnetpp.ini” mencionado, es un archivo de configuración inicial que guarda valores para realizar, sobre una misma red, diferentes tipos de inicio o configuraciones. En nuestro caso, este archivo, para esta red, contiene el siguiente código:

<code>[General]
network = mi_ieee802154a
debug-on-errors = false
fname-append-host = false
**.module-eventlog-recording = false
**.vector-recording = true
#**.debug = false
num-rngs = 88
ned-path = ../../base;../../modules;../../examples;</code>

<code># tkenv-default-run=1</code>

<code># cmdenv-runs-to-execute=1
cmdenv-express-mode = true</code>

<code># Because of the battery module, there are always scheduled events
# thus we need a fallback sim-time-limit.
# Otherwise the battery module will eventually lead to a simtime_t overflow
sim-time-limit=3 d # 30s for 10000 packets</code>

<code>mi_ieee802154a.**.coreDebug = false
mi_ieee802154a.playgroundSizeX = 500 m
mi_ieee802154a.playgroundSizeY = 500 m
mi_ieee802154a.playgroundSizeZ = 500 m</code>

<code>mi_ieee802154a.world.useTorus = false
mi_ieee802154a.world.use2D = false</code>

<code>mi_ieee802154a.channelControl.sendDirect = false
mi_ieee802154a.channelControl.pMax = 1000 mW
mi_ieee802154a.channelControl.sat = -100 dBm
mi_ieee802154a.channelControl.alpha = 2.0
mi_ieee802154a.channelControl.carrierFrequency = 4500e+6 Hz</code>

<code>################ PhyLayer parameters #####################
mi_ieee802154a.node[*].nic.phy.usePropagationDelay = false</code>

<code>mi_ieee802154a.node[*].nic.phy.analogueModels = xmldoc(\"config.xml\")
mi_ieee802154a.node[*].nic.phy.useThermalNoise = true</code>

<code>################ MAC layer parameters ####################
mi_ieee802154a.node[*].nic.mac.txPower = 1mW  # [mW]
mi_ieee802154a.node[*].nic.mac.notAffectedByHostState = true
mi_ieee802154a.node[*].nic.mac.macMinBE = 1
mi_ieee802154a.node[*].nic.mac.macMaxBE = 6
mi_ieee802154a.node[*].nic.mac.macMaxCSMABackoffs = 20
mi_ieee802154a.node[*].nic.mac.macAckWaitDuration = 0.000864s
mi_ieee802154a.node[*].nic.mac.aUnitBackoffPeriod = 0.02s</code>

<code>***.debug = false</code>

<code>**.battery.nominal = 99999mAh
**.battery.capacity = 99999mAh
**.battery.voltage = 3.3V
**.battery.resolution = 10s
**.battery.publishDelta = 0.1
**.battery.publishTime = 0
**.battery.numDevices = 1  # only the PHY module uses energy from the battery
**.batteryStats.detail = false
**.batteryStats.timeSeries = false</code>

<code>mi_ieee802154a.node[*].nic.mac.headerLength = 16 bit
mi_ieee802154a.node[*].nic.mac.stats = true
mi_ieee802154a.node[*].nic.mac.trace = false</code>

<code>## Nodes positions
mi_ieee802154a.node[0].mobility.x = 170
mi_ieee802154a.node[0].mobility.y = 170
mi_ieee802154a.node[0].mobility.z = 0
mi_ieee802154a.node[1].mobility.x = 300
mi_ieee802154a.node[1].mobility.y = 170
mi_ieee802154a.node[1].mobility.z = 0
**.mi_app_layer.num_mensajes_a_enviar = 40</code>

<code>[Config Pruebabroadcast]
**.numHosts = 2
mi_ieee802154a.node[*].mi_app_layer.num_mensajes_a_enviar = 4</code>

</div>",
          "wp:post_id": "75",
          "wp:post_date": "2011-07-27 17:33:28",
          "wp:post_date_gmt": "2011-07-27 17:33:28",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "sacar-02b-modificacion-nivel-del-aplicacion-en-un-host-802-15-4",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": [
            {
              "-domain": "category",
              "-nicename": "arduino",
              "#cdata-section": "arduino"
            },
            {
              "-domain": "category",
              "-nicename": "mixim",
              "#cdata-section": "mixim"
            },
            {
              "-domain": "category",
              "-nicename": "omnet",
              "#cdata-section": "omnet"
            },
            {
              "-domain": "category",
              "-nicename": "sacar",
              "#cdata-section": "sacar"
            },
            {
              "-domain": "category",
              "-nicename": "sommer",
              "#cdata-section": "sommer"
            },
            {
              "-domain": "category",
              "-nicename": "sumo",
              "#cdata-section": "sumo"
            },
            {
              "-domain": "category",
              "-nicename": "vanet",
              "#cdata-section": "vanet"
            }
          ],
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "SACAR - 03 - Probando nuestro host 802.15.4 personalizado",
          "link": "http://eduardomarin.es/blog/?p=79",
          "pubDate": "Wed, 27 Jul 2011 17:44:19 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?p=79"
          },
          "content:encoded": "<div>

El siguiente paso será aprovechar el host utilizado en la prueba anterior, con soporte para el protocolo IEEE 802.15.4 y con el nivel de aplicación que hemos creado para probar la comunicación con el simulador de tráfico SUMO y adelantar el paso final para construir el entorno adecuado para nuestro sistema SACAR.

Para ello, en el framework mixim-sommer, existe un ejemplo de conexión con SUMO (traci), con el nombre “traci_launchd” (mixim-sommer/examples/traci_launchd). Dicho ejemplo ejecuta una comunicación inalámbrica sobre redes IEEE 802.11 sobre nodos que circulan por una determinada red de carreteras previamente definida en SUMO.

Partiendo de este ejemplo, la acción más inmediata será la de modificar la funcionalidad o clase utilizada como nodo y reutilizar la que nosotros hemos implementado en “mi_ieee802154a”.

Para ello, en primer lugar, duplicamos dicho directorio, para no trabajar sobre el original, y lo renombramos (mi_traci). A continuación copiaremos el archivo “mi_Host802154a.ned” que creamos en el ejemplo anterior (localizado en mixim-sommer/modules/nodes) y, directamente, lo copiamos sobre este directorio. Para acercarlo más al entorno de simulación, optamos por renombrar el archivo: “Car.ned”. Al igual que hicimos en la anterior ocasión, debemos modificar internamente el archivo para adaptarlo al nuevo nombre y directorio del paquete, de la misma forma que los archivos que fueron duplicados desde “traci_launchd” a “mi_traci”.

Una vez adaptados estos valores, modificaremos una serie de parámetros necesarios para que la simulación funcione correctamente.

En primer lugar, debemos notificar dicho cambio. Así, en el archivo de configuración “omnetpp.ini” cambiaremos el tipo de nodo a utilizar:
*.manager.moduleType = \"org.mixim.examples.mi_traci.Car\"

Añadiremos, además, datos de configuración de la batería del módulo 802.15.4, pues en “traci_launchd” esos parámetros no eran necesarios:

<code>**.battery.nominal = 99999mAh
**.battery.capacity = 99999mAh
**.battery.voltage = 3.3V
**.battery.resolution = 10s
**.battery.publishDelta = 0.1
**.battery.publishTime = 0
**.battery.numDevices = 1  # only the PHY module uses energy from the battery
**.batteryStats.detail = false
**.batteryStats.timeSeries = false</code>

Añadiremos también parámetros sobre el número de nodos y de mensajes a enviar:

<code>[Config Pruebabroadcast]
**.numHosts = 2
mi_traci.node[*].mi_app_layer.num_mensajes_a_enviar = 4</code>

(he agregado config de batería (desde <a href=\"http://omnetpp.in/\">omnetpp.in</a>i de mi_802154a) y archivo Nic802154_TI_CC1100_Decider.xml)

</div>",
          "wp:post_id": "79",
          "wp:post_date": "2011-07-27 17:44:19",
          "wp:post_date_gmt": "2011-07-27 17:44:19",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "sacar-03-probando-nuestro-host-802-15-4-personalizado",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": [
            {
              "-domain": "category",
              "-nicename": "arduino",
              "#cdata-section": "arduino"
            },
            {
              "-domain": "category",
              "-nicename": "mixim",
              "#cdata-section": "mixim"
            },
            {
              "-domain": "category",
              "-nicename": "omnet",
              "#cdata-section": "omnet"
            },
            {
              "-domain": "category",
              "-nicename": "sacar",
              "#cdata-section": "sacar"
            },
            {
              "-domain": "category",
              "-nicename": "sommer",
              "#cdata-section": "sommer"
            },
            {
              "-domain": "category",
              "-nicename": "sumo",
              "#cdata-section": "sumo"
            },
            {
              "-domain": "category",
              "-nicename": "vanet",
              "#cdata-section": "vanet"
            }
          ],
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "SACAR - 04 - Creando nuestras propias vías de circulación",
          "link": "http://eduardomarin.es/blog/?p=82",
          "pubDate": "Wed, 27 Jul 2011 18:18:26 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?p=82"
          },
          "content:encoded": "En la simulación que hemos realizado anteriormente, para comprobar que la comunicación entre OMNET++ y SUMO se establecía correctamente, utilizábamos un ejemplo ya creado en traci al que habíamos añadido nuestro propio host basado en el protocolo 802.15.4 modificado. En ese ejemplo, se utilizaba una red de vías de circulación ya predeterminada, en la cual un flujo constante de vehículos aparecía en un aparcamiento, y comenzaban a circular hacia un punto determinado de dicha red.

A efectos prácticos, nosotros debemos crear nuestras propias vías de circulación, comenzando con ejemplos sencillos y finalizar con redes más complejas. La sencillez en las primeras nos facilitarán la depuración de los diferentes algoritmos que más tarde crearemos, pudiendo sacar conclusiones más claras y obtener unos resultados más consistentes. A medida que la validez de estos algoritmos aumente, aumentaremos la complejidad de las vías para realizar diferentes test que nos permitan sacar conclusiones en relación a la carga de vehículos y de la estructura de la red.
<div>Partiendo de la configuración del ejemplo que anteriormente hemos modificado (en ella aparece una configuración de una carretera determinada), comprobaremos que el funcionamiento es correcto sobre una red simple como es un cruce en aspa:</div>
<div>

&nbsp;

<img src=\"https://lh3.googleusercontent.com/pqNuQNRb80mjpVpO_gI5QmeEXixYUaHsmw2q84lTd-crWGJCMmFuJOdSYcxyJXC1kC4P0u1GkvtEQo_CQNHcSlNMzskL-6DTSLnEaERBC6jVs_UQtw\" alt=\"\" width=\"370px;\" height=\"258px;\" />

Dentro de las simulaciones que llevemos a cabo, tendremos que contemplar tres archivos.

Por un lado, un archivo de definición de la propia red (red de vías), en la cual se definen los elementos que constituyen una determinada topología (vías, cruces, puntos de inicio y fin,...). Para nuestro caso, este archivo es “net.net.xml” (omitiremos el código por ser algo amplio).

Por otro lado, un archivo que define el comportamiento y la identidad de los propios vehículos. En nuestro ejemplo, “routes.rou.xml”. Este archivo identifica cada vehículo que aparecerá en el escenario, su velocidad, su inicio y su fin, los puntos intermedios por los que pasará, ... Además, dado que trabajamos conjuntamente con el simulador OMNET++, debe existir una relación con el módulo que define un determinado nodo o host en él (en nuestro caso, se trataba del módulo “Car”. Observamos el código del cual se deducen los puntos aquí señalados:

<code>&lt;routes&gt;
&lt;vtype id=\"org.mixim.examples.mi_traci.Car;i=misc/node2;is=vs;r=0,,#707070,1\" accel=\"2.6\" decel=\"4.5\" sigma=\"0.5\" length=\"5\" maxspeed=\"14\" color=\"1,1,0\"/&gt;
&lt;vehicle type=\"org.mixim.examples.mi_traci.Car;i=misc/node2;is=vs;r=0,,#707070,1\" id=\"host[0]\" depart=\"0\"&gt;
&lt;route id=\"always_right\" multi_ref=\"x\" edges=\"1i 4o 4i 2o 2i 3o 3i 1o 1i\"/&gt;
&lt;/vehicle&gt;
&lt;vehicle type=\"org.mixim.examples.mi_traci.Car;i=misc/node2;is=vs;r=0,,#707070,1\" id=\"host[1]\" depart=\"3\"&gt;
&lt;route id=\"always_left\" multi_ref=\"x\" edges=\"3i 2o 2i 4o 4i 1o 1i 3o 3i\"/&gt;
&lt;/vehicle&gt;
&lt;vehicle type=\"org.mixim.examples.mi_traci.Car;i=misc/node2;is=vs;r=0,,#707070,1\" id=\"host[2]\" depart=\"6\"&gt;
&lt;route id=\"horizontal\" multi_ref=\"x\" edges=\"2i 1o 1i 2o 2i\"/&gt;
&lt;/vehicle&gt;
&lt;vehicle type=\"org.mixim.examples.mi_traci.Car;i=misc/node2;is=vs;r=0,,#707070,1\" id=\"host[3]\" depart=\"9\"&gt;
&lt;route id=\"vertical\" multi_ref=\"x\" edges=\"3i 4o 4i 3o 3i\"/&gt;
&lt;/vehicle&gt;
&lt;/routes&gt;</code>

Finalmente, descripción de red y descripción de comportamiento deben reflejarse en el simulador de redes OMNET++ a través de un tercer archivo de configuración. Este es un archivo de configuración de la propia simulación en el que se indica explícitamente el nombre de esos dos archivos, y los datos de conexión que necesitaría OMNET++ para comunicarse con el servidor SUMO-TRACI. Este archivo, que nosotros llamamos “sumo.sumo.cfg” contiene las siguientes líneas:

<code>&lt;configuration&gt;</code>

<code>&lt;files&gt;
&lt;net-file&gt;net.net.xml&lt;/net-file&gt;
&lt;route-files&gt;routes.rou.xml&lt;/route-files&gt;
&lt;remote-port&gt;8888&lt;/remote-port&gt;
&lt;penetration&gt;1&lt;/penetration&gt;</code>

<code>&lt;srand&gt;88888&lt;/srand&gt;
&lt;abs-rand&gt;false&lt;/abs-rand&gt;
&lt;/files&gt;</code>

<code>&lt;simulation&gt;
&lt;route-steps&gt;200&lt;/route-steps&gt;
&lt;begin&gt;0&lt;/begin&gt;
&lt;end&gt;86400&lt;/end&gt;
&lt;/simulation&gt;
&lt;/configuration&gt;</code>

</div>
<div>

<strong>Construyendo nuestras vías:</strong>

El caso anterior aprovechaba uno de las redes de ejemplo existentes dentro del simulador SUMO. A continuación, describiremos la forma de construir nuestras propias redes partiendo de descripciones realizadas mediante archivos xml. La idea es analizar el comportamiento futuro de nuestro sistema en redes complejas, partiendo de situaciones muy particulares y aisladas.

Así, comencemos con el caso básico en el cual necesitamos tener una vía de un único sentido y un único carril unidireccional.

En primer lugar, crearemos el archivo de descripción de nodos. En nuestro caso, lo llamamos “via_recta_ud.node.xml”.

</div>
<div><a href=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/07/sy1HRLne5BL7A3agQHdg5MQ.png\"><img class=\"aligncenter size-full wp-image-116\" title=\"sy1HRLne5BL7A3agQHdg5MQ\" src=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/07/sy1HRLne5BL7A3agQHdg5MQ.png\" alt=\"\" width=\"341\" height=\"34\" /></a>&nbsp;

La idea esquemática de la vía la mostramos en la anterior figura, y la descripción de este esquema, en términos xml, será la siguiente:

<code>&lt;nodes&gt; &lt;!-- The opening tag --&gt;
&lt;node id=\"0\" x=\"0.0\" y=\"0.0\"/&gt; &lt;!-- def. of node \"0\" --&gt;
&lt;node id=\"1\" x=\"500.0\" y=\"0.0\"/&gt; &lt;!-- def. of node \"1\" --&gt;
&lt;/nodes&gt; &lt;!-- The closing tag --&gt;</code>

Por otro lado, uniremos los dos nodos mediante una configuración de vías determinada, otorgando un número de carriles por sentido, y el inicio y final de dichas vías.

<code>&lt;edges&gt;
&lt;edge id=\"0t1\" fromnode=\"0\" tonode=\"1\" priority=\"1\" nolanes=\"1\" speed=\"11.11\"/&gt;
&lt;edge id=\"1t0\" fromnode=\"1\" tonode=\"0\" nolanes=\"1\" speed=\"11.11\"/&gt;
&lt;/edges&gt;</code>

A partir de estos dos archivos descriptivos, crearemos el archivo de red propiamente dicho (.ned.xml), mediante la herramienta que toma como entrada ambos archivos y nos devuelve la red:

<code>netconvert --xml-node-files=net.nod.xml --xml-edge-files=net.edg.xml --output-file=net.net.xml</code>

Finalmente, necesitaremos un archivo de rutas, donde se describe el tipo de vehículo que circulará por las vías, su trayectoria y, opcionalmente, un flujo de vehículos que permite automatizar la creación de vehículos: (incluiremos directamente el tipo de vehículo para utilizarlo en omnetpp como nodo mixim-sommer)

<code>&lt;vtype id=\"org.mixim.examples.mi_traci.Car;i=misc/node2;is=vs;r=0,,#707070,1\" accel=\"2.6\" decel=\"4.5\" sigma=\"0.5\" length=\"5\" maxspeed=\"14\" color=\"1,1,1\"/&gt;
&lt;route id=\"from0\" multi_ref=\"x\" edges=\"0t1 1t0\"/&gt;
&lt;flow id=\"from0\" type=\"org.mixim.examples.mi_traci.Car;i=misc/node2;is=vs;r=0,,#707070,1\" route=\"from0\" begin=\"1\" end=\"5002\" period=\"1\"/&gt;
&lt;/routes&gt;</code>
<img src=\"https://lh6.googleusercontent.com/JoAo0p65AixDURA05B0yR0GAOnz8EFh6JeI6YjENc5irFneUc9xMTAETIOxxvnTO4WTlDW0hhI6tBUuN1cI0V6_udhMGnPvtlzeYdQYP_N2extKnqA\" alt=\"\" width=\"406px;\" height=\"170px;\" />

</div>",
          "wp:post_id": "82",
          "wp:post_date": "2011-07-27 18:18:26",
          "wp:post_date_gmt": "2011-07-27 18:18:26",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "sacar-04-creando-nuestras-propias-vias-de-circulacion",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": [
            {
              "-domain": "category",
              "-nicename": "arduino",
              "#cdata-section": "arduino"
            },
            {
              "-domain": "category",
              "-nicename": "mixim",
              "#cdata-section": "mixim"
            },
            {
              "-domain": "category",
              "-nicename": "omnet",
              "#cdata-section": "omnet"
            },
            {
              "-domain": "category",
              "-nicename": "sacar",
              "#cdata-section": "sacar"
            },
            {
              "-domain": "category",
              "-nicename": "sommer",
              "#cdata-section": "sommer"
            },
            {
              "-domain": "category",
              "-nicename": "sumo",
              "#cdata-section": "sumo"
            },
            {
              "-domain": "category",
              "-nicename": "vanet",
              "#cdata-section": "vanet"
            }
          ],
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "SACAR - 05 - Extraer estadísticas - El observador externo",
          "link": "http://eduardomarin.es/blog/?p=86",
          "pubDate": "Wed, 10 Aug 2011 18:55:47 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?p=86"
          },
          "content:encoded": "<div>

Uno de los puntos determinantes del proyecto se centra en los resultados. Debemos ofrecer un tipo de resultado, bien un sistema funcional que cumpla con un objetivo determinado, bien una serie de muestras o valores que nos permitan extrapolarlos y obtener ciertas conclusiones. En nuestro caso, dado que estamos contemplando el envío de mensajes en difusión, en un entorno dinámico, en el que influye tanto la forma de la red como del entorno que rodea a la misma, debemos atender a valores relacionados con esos mensajes, tiempo de vida media en escena, en función del número de vehículos, de la velocidad de estos, del escenario y su impacto, el número de vehiculos “ciegos” que no logran recibir los mismos...

Por otra parte, este tipo de información, en un escenario como en el que estamos trabajando (centrémonos ya en la propia simulación bajo el entorno OMNET), requiere de ciertos ajustes para realizar correctamente las mediciones.

Si observamos nuestro escenario de simulación, desde el nivel más alto de abstracción, nos encontramos con el siguiente panorama:
<img src=\"https://lh4.googleusercontent.com/Ogk5RKdWPh0BjDhyqLv8YnQQ-RuzFM81So7NLiHlTWiWe_uml-VLtjC8aTmLM6Kp3IeqAUrUQOQmjVfToVvAlj8StbfmdzdQ5RZ2wOpSKyapQLuYo80\" alt=\"\" width=\"288px;\" height=\"106px;\" />

Nos encontramos con tres módulos (manager, world y connectionManager). Si estudiáramos un ejemplo simple, en el que no utilizásemos SUMO, veríamos en el escenario algún elemento “host” que es el que realiza, en nuestro caso, las funciones de comunicación dentro de nuestros vehículos. Sin embargo, la particularidad de MIXIM es que un gestor superior (manager) permite comunicarse con SUMO para obtener indicaciones de cómo mover cada uno de nuestros vehículos (nuestros host) dentro de OMNET, ayudándose de los otros dos módulos para manejar la comunicación entre ellos y otro tipo de parámetros. En resumidas cuentas, no veremos directamente en este nivel el módulo que modela el comportamiento de cada host, pues es instanciado de forma interna por el “manager”, pero sí debemos saber que existen. Así, y para ilustrar esta idea veamos el siguiente gráfico:

<a href=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/08/sADfBr7OuWgSKzrtKSsJMlg.png\"><img class=\"aligncenter size-full wp-image-110\" title=\"sADfBr7OuWgSKzrtKSsJMlg\" src=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/08/sADfBr7OuWgSKzrtKSsJMlg.png\" alt=\"\" width=\"482\" height=\"341\" /></a>

Vemos entonces cómo “manager” indica a cada host cómo debe comportarse en el escenario en base a las indicaciones que recibe del motor SUMO (que es realmente el simulador de la red de vehículos). Y en este punto, y viendo el gráfico, podemos pensar que cada host es un módulo diferente, y que debemos crearlos todos, sin embargo (como cabría esperar), son instancias de un único módulo, que se muestra a continuación (car.ned):

<img src=\"https://lh5.googleusercontent.com/ob8q3saAG4HeIeFuho9Bn2hpYBYVM7nGZRMzpNUecgmMAtL1hIvZitCQ6PAQMpgOMudRW768x1xmPpXVSkIjIJSaIZZuyxdGXYuRq_0jBZk2_38JDq0\" alt=\"\" width=\"374px;\" height=\"378px;\" />

Estamos ya familiarizados con este módulo, que es el que contiene el protocolo 802.15.4 con nuestro propio nivel de aplicación. Es en ese nivel de aplicación donde hemos ido realizando las modificaciones, añadiendo nuestros algoritmos APAL, y donde manejábamos los mensajes que recibíamos y enviábamos. Es en ese módulo (mi_app_layer) donde tenemos acceso a los valores que comentábamos anteriormente y que deben convertirse en los resultados a mostrar. Y es en ese nivel de aplicación donde podemos hacer uso de las herramientas que nos ofrece OMNET para mostrar resultados estadísticos. Sin embargo, no lo haremos así. Veamos por qué.

Si creamos dentro de nuestro módulo “mi_app_layer” las funciones necesarias para almacenar las estadísticas que deseamos, nos encontraremos con un número de estadísticas “paralelas” equivalente al número de host que tengamos en el escenario. Frente a esto, necesitamos un observador, externo al host, que se instancie de forma independiente, y que pueda comunicarse con cada uno de los host.

OMNET y MIXIM utilizan el concepto de “blackboard” para este cometido. Siendo más precisos, se trata de un “tablón de anuncios” en el que un “editor” puede publicar y un “lector” puede suscribirse al tablón y ser avisado cuando el primero publique en el mismo. Podemos decir que es un canal “bidireccional” a través del cual pueden comunicarse módulos independientes y ser alertados cuando suceden cambios. Sin embargo, en nuestro caso, podemos evitar el uso de esta solución (que es algo más compleja), pues no necesitamos comunicación bidireccional para mostar los resultados (se muestran y ya está). Así pues, basta con crear un módulo externo, emplazado en el nivel superior del escenario, accesible a todos los “hosts”, con métodos determinados que permitan el almacenamiento de estadísticas.

Así, el panorama cambia de la siguiente forma:
<img src=\"https://lh5.googleusercontent.com/bX2kJnu1R5ARLIG7QclaU8dyOGl1JULb_zfwUJRkgEEIzyf1V4bqoaqln1lSDHlOugy9j4Q7SfRbgpmda4PLO0Y27ohrst94wQPM4uVfCrOQUwk5nI8\" alt=\"\" width=\"284px;\" height=\"170px;\" />

<a href=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/08/sFSUGnoOREnvrEbv3KNoHpA.png\"><img class=\"aligncenter size-full wp-image-111\" title=\"sFSUGnoOREnvrEbv3KNoHpA\" src=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/08/sFSUGnoOREnvrEbv3KNoHpA.png\" alt=\"\" width=\"482\" height=\"341\" /></a>

&nbsp;

Qué valores debemos almacenar?

-Tiempo medio que tarda en llegar un mensaje a los hosts de la red
- en función del número de vehículos
- en función de la velocidad
- en función del entorno (ver implementación de simulación de atenuación)
- Número de vehículos ciegos (no logran recibir mensaje)
- en función del tiempo máximo de vida del mensaje
- en función del número de vehículos
- en función de la velocidad
- en función del escenario (manhattan, ciudad real)

Para comprobar el correcto planteamiento y funcionamiento del observador que nos hace un registro estadístico, vamos a partir de un caso básico. Una vía con forma de cuadrado, en el que inyectamos un tráfico de 10 vehículos que circulan en sentido horario y que el primero es el único que hace de emisor. Obtendremos el tiempo medio en llegar a los vehículos.

</div>
<div>

net.nod.xml:

<code>&lt;nodes&gt;
&lt;node id=\"a\" x=\"0.0\" y=\"300\" /&gt;
&lt;node id=\"b\" x=\"300.0\" y=\"300\" /&gt;
&lt;node id=\"c\" x=\"300.0\" y=\"0\" /&gt;
&lt;node id=\"d\" x=\"0.0\" y=\"0\" /&gt;
&lt;/nodes&gt;</code>

net.edg.xml:

<code>&lt;edges&gt;
&lt;edge id=\"ed_ab\" fromnode=\"a\" tonode=\"b\" priority=\"1\" nolanes=\"1\" speed=\"11.111\" /&gt;
&lt;edge id=\"ed_bc\" fromnode=\"b\" tonode=\"c\" priority=\"1\" nolanes=\"1\" speed=\"11.111\" /&gt;
&lt;edge id=\"ed_cd\" fromnode=\"c\" tonode=\"d\" priority=\"1\" nolanes=\"1\" speed=\"11.111\" /&gt;
&lt;edge id=\"ed_da\" fromnode=\"d\" tonode=\"a\" priority=\"1\" nolanes=\"1\" speed=\"11.111\" /&gt;
&lt;/edges&gt;</code>

net.rou.xml:

<code>&lt;routes&gt;
&lt;route id=\"basica\" multi_ref=\"x\" edges=\"ed_ab ed_bc ed_cd ed_da ed_ab ed_bc ed_cd ed_da ed_ab ed_bc ed_cd ed_da ed_ab ed_bc ed_cd ed_da ed_ab ed_bc ed_cd ed_da ed_ab ed_bc ed_cd ed_da ed_ab ed_bc ed_cd ed_da ed_ab ed_bc ed_cd ed_da ed_ab ed_bc ed_cd ed_da\"/&gt;
&lt;flow id=\"flujo_basico\" route=\"basica\" begin=\"50\" end=\"500\" no=\"10\"/&gt;
&lt;/routes&gt;</code>

<img src=\"https://lh4.googleusercontent.com/zJ9vBhUyq0kJiGD3WJBsxlgV8SNASh-owLPaBW-d-emFpxgwJQQB9JRfOU0r8PBqu9wQ3Zx1Aa77WZNtMjQPk4xIuJ5RzjDFPvu-um6IOqm-RtfYMYw\" alt=\"\" width=\"541px;\" height=\"541px;\" />

A continuación, debemos implementar tanto en nuestra capa de aplicación como en el observador, las correspondientes funciones que permitan extraer el tiempo medio que tarda en llegar un mensaje a cada receptor, desde que el primer vehículo lo envía. Debemos tener en cuenta que este emisor realiza broadcast de un mensaje nuevo cada segundo y, por tanto, debemos diferenciar todos y cada uno de los mensajes que coexistan y calcular para cada uno de ellos su tiempo medio de recepción y promediar el total.

Para ello, crearemos un vector que vaya guardando los tiempos medios que van acumulándose para cada uno de esos mensajes, que podremos identificar mediante su campo de identificación único, y gracias al sello “timestamp” de inicio que también se almacena en los mensajes en su respectivo campo.

Así pues, el flujo de trabajo para obtener el tiempo de vida que tarda un mensaje en llegar a un determinado host sería el siguiente:

<a href=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/08/s31FKpqwMIn7PXv_Z8gekKA.png\"><img class=\"aligncenter size-full wp-image-112\" title=\"s31FKpqwMIn7PXv_Z8gekKA\" src=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/08/s31FKpqwMIn7PXv_Z8gekKA.png\" alt=\"\" width=\"473\" height=\"466\" /></a>

&nbsp;
<div>

Así, el observador en cuestión, con la funcionalidad simplificada a obtener el tiempo medio que un mensaje tarda en llegar a un receptor, es el siguiente:

observador.h

<code>#ifndef __MIXIM_SOMMER_OBSERVADOR_H_
#define __MIXIM_SOMMER_OBSERVADOR_H_</code>

<code>#include &lt;omnetpp.h&gt;</code>

<code>/**
* TODO - Generated class
*/</code>
<code>{
protected:
virtual void initialize();
virtual void handleMessage(cMessage *msg);
virtual void finish();</code>

<code>double valores_asociados[4][10000];
int i_valores_asociados;
cOutVector st_valor;</code>

<code>public:
void grabar_estadistica(double);
void inserta_valor(double,int);//inserta_valor(valor,indice)
void actualiza_valor(double,int);//actualiza_valor(valor,indice)
double consulta_valor(int);//consulta_valor(indice)
double haz_media();
int existe_valor(int);
};</code>

<code>#endif</code>

observador.cc

<code>#include \"observador.h\"</code>

<code>Define_Module(Observador);</code>

<code>void Observador::initialize()</code>
<code>{
// TODO - Generated method body
st_valor.setName(\"estadisticas\");
}</code>

<code>void Observador::handleMessage(cMessage *msg)</code>
<code>{
// TODO - Generated method body
}</code>

<code>void Observador::grabar_estadistica(double valor)
{
st_valor.record(valor);</code>

<code>}</code>

<code>void Observador::inserta_valor(double valor, int uid){</code>

<code>int i,encontrado;
i = 0;
encontrado = 0;</code>

<code>if(!existe_valor(uid) &amp;&amp; (valor &gt; 0.0000001)){
valores_asociados[0][i_valores_asociados]=valor;
valores_asociados[1][i_valores_asociados]=uid;
valores_asociados[2][i_valores_asociados]=1;
EV &lt;&lt; \"valor asociado:\" &lt;&lt; valor &lt;&lt; endl;
i_valores_asociados ++;
}else{
if(valor &gt; 0.0000001){
while((i&lt; i_valores_asociados)&amp;&amp;(!encontrado)){
if(uid == valores_asociados[1][i]) encontrado = 1; else i++;
}
EV &lt;&lt; \"el valor actualizado es:\" &lt;&lt; valores_asociados[0][i] &lt;&lt; endl;
//número de actualizaciones de promedio (cuantos vehículos han recibido dicho mensaje)
valores_asociados[2][i]=(valores_asociados[2][i])+1;
//actualizamos promedio para el mensaje que acabamos de recibir
valores_asociados[0][i]=(valores_asociados[0][i] * (((valores_asociados[2][i])-1)/valores_asociados[2][i]))+(valor/valores_asociados[2][i]);</code>

<code>EV &lt;&lt; \"junto con este nuevo:\" &lt;&lt; valor &lt;&lt; endl;
EV &lt;&lt; \"el número de lecturas es:\" &lt;&lt; valores_asociados[2][i] &lt;&lt; endl;
EV &lt;&lt; \"y la nueva media es:\" &lt;&lt; valores_asociados[0][i] &lt;&lt; endl;
}
}
}</code>

<code>int Observador::existe_valor(int uid){
int i, encontrado;
i=0;
encontrado = 0;
while((i&lt; i_valores_asociados)&amp;&amp;(!encontrado)){
if(uid == valores_asociados[1][i]) encontrado = 1; else i++;
}
return encontrado;
}</code>

<code>double Observador::consulta_valor(int uid){</code>

<code>int i, encontrado;
encontrado = 0;
i = 0;
while((i &lt;= i_valores_asociados) &amp;&amp; (!encontrado)){
if(uid == valores_asociados[1][i]) encontrado = 1; else i++;
}</code>

<code>if(encontrado) return valores_asociados[0][i]; else return -1;
}</code>

<code>double Observador::haz_media(){</code>

<code>int i;
double aux, aux1;
aux = 0;</code>

<code>for(i=0; i&lt; i_valores_asociados; i++){
aux = aux + valores_asociados[0][i];
EV &lt;&lt; \"valores asociados\" &lt;&lt; valores_asociados[0][i] &lt;&lt; endl;
}
aux1 = (aux / i_valores_asociados);
return aux1;
}</code>

<code>/**
* Finalizamos el módulo a través de esta función
**/
void Observador::finish()
{
this-&gt;grabar_estadistica(this-&gt;haz_media());
}</code>

Así, con este primer acercamiento a la obtención de estadísticas, definimos el siguiente escenario:

Tiempo de simulación: 3000 segundos.
Dimensiones de la vía: cuadrado 2500 m x 2500 m.

tiempo medio recepción mensajes:

25 vehículos:
0.010148903914739 s = 10 ms

50 vehiculos:
0.0094382959530603 s = 9 ms

100 vehiculos:
0.08707856405782 s = 80 ms

150 vehiculos:
0.11929866066083 s = 119 ms

200 vehiculos:
0.17646911908468 s = 176 ms

250 vehiculos:
0.16912641416451 s = 169 ms

300 vehiculos:
0.19146343009296 s = 191 ms
<img src=\"https://lh3.googleusercontent.com/lMe3rT3xDONqQsEkt4kzO0rJnnm_XNEgKhMSxBi7fL18EeJnU0QLzRvZmZnOD7pbSErBwTgVcDsJWtaUt2YN1Vcivli_En_vzKjg-bfRUWv2tl5MMkc\" alt=\"\" width=\"600px;\" height=\"371px;\" />

</div>
</div>",
          "wp:post_id": "86",
          "wp:post_date": "2011-08-10 18:55:47",
          "wp:post_date_gmt": "2011-08-10 18:55:47",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "sacar-05-extraer-estadisticas-el-observador-externo",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": [
            {
              "-domain": "category",
              "-nicename": "mixim",
              "#cdata-section": "mixim"
            },
            {
              "-domain": "category",
              "-nicename": "omnet",
              "#cdata-section": "omnet"
            },
            {
              "-domain": "category",
              "-nicename": "sacar",
              "#cdata-section": "sacar"
            },
            {
              "-domain": "category",
              "-nicename": "sommer",
              "#cdata-section": "sommer"
            },
            {
              "-domain": "category",
              "-nicename": "sumo",
              "#cdata-section": "sumo"
            },
            {
              "-domain": "category",
              "-nicename": "vanet",
              "#cdata-section": "vanet"
            }
          ],
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "SACAR - 06 - Estadísticas Blind Vehicles",
          "link": "http://eduardomarin.es/blog/?p=96",
          "pubDate": "Wed, 24 Aug 2011 18:07:01 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?p=96"
          },
          "content:encoded": "<div>

Como se dijo en el punto anterior, entre los valores a estudiar, se encuentra el número de vehículos ciegos (“blind vehicles”), esto es, el número de vehículos que no consiguen recibir un mensaje de alerta concreto en el tiempo de vida de este último.

Conocer este parámetro nos permite deducir si el algoritmo de reenvío es demasiado agresivo, lo que implica realizar pocos intentos de “rebroadcast” y bajas probabilidades de alcanzar vehículos cercanos al área de cobertura; o demasiado suave, donde el control sobre los reenvíos es menor y el problema de “broadcast storming” aumenta.

Así pues, necesitamos conocer, por cada mensaje que se genere, llevar el control de las veces que un vehículo lo recibe. Para ello, el observador debe ser avisado cada vez que un vehículo recibe un mensaje. El observador entonces anotará en el vector de valores tal suceso, relacionando la recepción de ese mensaje y el número de vehículos que lo han recibido hasta entonces. Al final, obtendremos, por cada mensaje, el total de vehículos que recibieron cada uno de ellos, y podremos promediar entre el total de mensajes.

Esquemáticamente, podemos hacernos una idea del proceso descrito:

<a href=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/08/s8ebqy4RjmmvnwQUvGp3XOg.png\"><img class=\"aligncenter size-full wp-image-106\" title=\"s8ebqy4RjmmvnwQUvGp3XOg\" src=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/08/s8ebqy4RjmmvnwQUvGp3XOg.png\" alt=\"\" width=\"473\" height=\"466\" /></a>

Así, como estructura de datos para llevar dicho control, únicamente utilizaremos una tercera fila en nuestro array bidimensional para contabilizar el número de vehículos que han leído un mensaje con uid determinado, como puede verse a continuación.

<a href=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/08/sPvVDHhm8_oEQo4xOX7p99w.png\"><img class=\"aligncenter size-full wp-image-107\" title=\"sPvVDHhm8_oEQo4xOX7p99w\" src=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/08/sPvVDHhm8_oEQo4xOX7p99w.png\" alt=\"\" width=\"433\" height=\"91\" /></a>
A continuación podemos ver el muestreo realizado, manteniendo las condiciones de simulación anteriores (vía cuadrangular de 2500 x 2500 metros), en la que variamos, en cada simulación, el número de vehículos en circulación:

Total vehículos / Media Vehículos reciben mensaje / % Vehículos ciegos

20 / 4,76 / 76,2

40 / 4,6 / 88,5

60 / 4,928 / 91,78

80 / 5,3 / 93,37

100 / 48,5 / 51,5

120 / 76,87 / 35,94

140 / 92,26 / 34,1

160 / 129,36 / 19,15

180 / 138,16 / 23,24

200 / 156,7 / 21,65

220	166,23	24,44

240	174,2	27,41

260	180,63	30,52

<img src=\"https://lh4.googleusercontent.com/XDR1ddN7CflEUxNrxPduAgIFd0RiwxBjlAUMA7Uz_Wu2neselH-T5buG9fbyohKBq0x63pQjx-G10iLGlBrmovvKUf2Rw_EMjil2uHPwboxCZPBXGRM\" alt=\"\" width=\"697px;\" height=\"357px;\" />

Si observamos el gráfico, vemos como para una baja densidad de vehículos, el número de “blind vehicles” es bastante alto, llegando a cotas cercanas al 95% para 80 vehículos. La razón es que el bajo número de vehículos en proporción a las distancias entre ellos facilita la existencia de zonas en sombra, donde los mensajes no alcanzan a los vecinos más próximos, que se ven incapaces de reenviar hacia los más alejados del punto de alerta. En cambio, mientras aumenta el número de vehículos en el escenario, esas zonas en sombra pueden rellenarse, permitiendo mayores cotas de alcance, próximas al 15 % para 160 vehículos. Sin embargo, es interesante observar cómo, a partir de un cierto número de vehículos en escena, el algoritmo de reenvío pierde fuerza y reaparece el “broadcast storm problem”, donde las colisiones impiden que los mensajes alcancen finalmente su objetivo.

Resumiendo, el número de vehículos ciegos depende fuertemente de la densidad de tráfico existente en nuestro escenario, disminuyendo cuando ésta aumenta, hasta alcanzar un límite de saturación determinado (broadcast storm problem).

Para obtener estos resultados, únicamente hemos modificado la clase “observador”, añadiendo un nuevo vector de estadísticas (podríamos haber utilizado sin problemas un escalar), añadiendo otro método para obtener la media de estos vehículos ciegos, y modificando el método para guardar las estadísticas:

<code>double Observador::haz_media_valores(){</code>

<code>int i;</code>

<code>double aux, aux1;

</code><code>aux = 0;</code>

<code>for(i=0; i&lt; i_valores_asociados; i++){</code>

<code>aux = aux + valores_asociados[0][i];

}

aux1 = (aux / i_valores_asociados);

return aux1;

</code><code>}</code>

<code>double Observador::haz_media_bind_vehicles(){</code>

<code>int i;</code>

<code>double aux, aux1;

</code><code>aux = 0;</code>

<code>for(i=0; i&lt; i_valores_asociados; i++){</code>

<code>aux = aux + valores_asociados[2][i];

}

aux1 = (aux / i_valores_asociados);

return aux1;

</code><code>}</code>

<code>void Observador::grabar_estadistica(double valor, double valor1)</code>

<code>{

st_valor.record(valor);

st_valor_02.record(valor1);

</code><code>}</code>

<code>void Observador::finish()</code>

<code>{

this-&gt;grabar_estadistica(this-&gt;haz_media_valores(),this-&gt;haz_media_bind_vehicles());

</code><code>}</code>

</div>
<code> </code>

&nbsp;",
          "wp:post_id": "96",
          "wp:post_date": "2011-08-24 18:07:01",
          "wp:post_date_gmt": "2011-08-24 18:07:01",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "sacar-06-estadisticas-blind-vehicles",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": [
            {
              "-domain": "category",
              "-nicename": "802-15-4",
              "#cdata-section": "802.15.4"
            },
            {
              "-domain": "category",
              "-nicename": "arduino",
              "#cdata-section": "arduino"
            },
            {
              "-domain": "category",
              "-nicename": "mixim",
              "#cdata-section": "mixim"
            },
            {
              "-domain": "category",
              "-nicename": "omnet",
              "#cdata-section": "omnet"
            },
            {
              "-domain": "category",
              "-nicename": "sacar",
              "#cdata-section": "sacar"
            },
            {
              "-domain": "category",
              "-nicename": "sommer",
              "#cdata-section": "sommer"
            },
            {
              "-domain": "category",
              "-nicename": "sumo",
              "#cdata-section": "sumo"
            },
            {
              "-domain": "category",
              "-nicename": "v2v",
              "#cdata-section": "v2v"
            },
            {
              "-domain": "category",
              "-nicename": "vanet",
              "#cdata-section": "vanet"
            },
            {
              "-domain": "category",
              "-nicename": "xbee",
              "#cdata-section": "xbee"
            },
            {
              "-domain": "category",
              "-nicename": "zigbee",
              "#cdata-section": "zigbee"
            }
          ],
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "SACAR - 07 - Grid Manhattan scenario",
          "link": "http://eduardomarin.es/blog/?p=119",
          "pubDate": "Sun, 28 Aug 2011 17:47:04 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?p=119"
          },
          "content:encoded": "Las pruebas que hemos realizado hasta ahora se han desarrollado bajo un escenario sencillo, una vía cuadrada, sin intersecciones, donde el flujo de vehículos es bastante homogéneo, lineal y previsible.
Dado que estas condiciones no serán las que nos encontremos en un escenario real, debemos aproximarnos cuanto podamos a esas condiciones reales. Así, lo ideal sería salir a la calle, con unos cuantos cientos de módulos independientes, que nos reportaran esos resultados reales. Dado que eso es inviable (y por ello realizamos estas simulaciones), acercaremos el entorno de simulación a uno real. Este entorno ideal sería una copia exacta de una pequeña ciudad, población o barrio, con calles, cruces, rotondas y un dibujo de la vía muy irregular. Pero antes de llevar las pruebas a ese escenario, pasemos por uno intermedio, un escenario de tipo “rejilla Manhattan”, cuyo trazado se hizo famoso en 1811 en el plan de desarrollo urbano de la isla de Manhattan (<a href=\"http://es.wikipedia.org/wiki/Manhattan\">Gouverneur Morris, John Rutherfurd y Simeon De Witt</a>).
<div><img class=\"aligncenter\" src=\"https://lh5.googleusercontent.com/9ziHROwO1-39XZJ3_K4neKfnwFMj22U3Qu9s8yypxrxXBQInEffwwwiKsdCav5vlIivGmtZN_jxlD9akTfZeNPu2EYwza9I3a0QPOogQRkdwhpHC13I\" alt=\"\" width=\"544px;\" height=\"189px;\" />
Así, con este tipo de trazado, muy utilizado para diferentes operaciones heurísticas (“<a href=\"http://en.wiktionary.org/wiki/Manhattan_distance\">manhattan distance</a>”), podremos obtener de los vehículos un comportamiento más irregular, aleatorio, variable y caótico. Más real, a fin de cuentas.&nbsp;

Como describimos en un punto anterior, podemos realizar nuestras propias descripciones de caminos y vías de forma manual, mediante la definición de nodos, bordes y carriles. Para un escenario simple como en el que hemos llevado a cabo las simulaciones anteriores, dicha descripción es sencilla y rápida. Sin embargo, para el nuevo escenario que proponemos, el número de nodos aumenta, así como los bordes y carriles asociados, lo que conlleva un trabajo meticuloso y arduo. Para evitar la definición manual y ahorrar tiempo, podemos utilizar una serie de herramientas que automatizan este proceso.

<strong>Creación automática del archivo de red - MOVE</strong>

Así, una de las herramientas que permiten generar automáticamente el archivo que define el mapa de carreteras (*.net.xml), es la aplicación MOVE (MObility model generator for VEhicular networks). Podemos descargarla desde la página oficial (<a href=\"http://lens1.csie.ncku.edu.tw/wiki/doku.php?id=%E2%80%A7realistic_mobility_generator_for_vehicular_networks\">http://lens1.csie.ncku.edu.tw/wiki/doku.php?id=%E2%80%A7realistic_mobility_generator_for_vehicular_networks</a>).

En nuestro caso, como habíamos comentado, crearemos un escenario basado en “rejilla manhattan”, en concreto definida por seis calles horizontales y seis calles verticales, con una separación entre ellas de cuatrocientos metros:

</div>
<div>

<a href=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/08/grid_manhattan.png\"><img class=\"aligncenter size-full wp-image-123\" title=\"grid_manhattan\" src=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/08/grid_manhattan.png\" alt=\"\" width=\"393\" height=\"393\" /></a>

Para ello, situándonos en el directorio donde hemos descargado MOVE.jar, ejecutaremos MOVE de la siguiente forma:

<code>java -jar MOVE.jar</code>

Nos encontraremos entonces con la siguiente ventana:

<img class=\"aligncenter\" src=\"https://lh6.googleusercontent.com/jyBnpH-_Tjlul_PK_JmfRm6Me7rJWggb74ACGWi3jkRxF2CCD5yUR_gdLOUGeMwCNLjSI8h1CmHpwDVukBEYO23IwFjsKDa5EEZxU6469F2WKMkvpRw\" alt=\"\" width=\"465px;\" height=\"140px;\" />

Tras seleccionar “Mobility Model”, nos encontraremos con las siguientes opciones:

<img class=\"aligncenter\" src=\"https://lh3.googleusercontent.com/QNFucsDgR1redIrU2z8Wxv3qvbVY-UavThx9eaFwDTzs7uz9WHXk0KS3646XxR4uc7TQ49yl1FIDMHc9CFUDzTPaaUTyJyUuotk-LCY3Hw8cwNoNXbc\" alt=\"\" width=\"416px;\" height=\"496px;\" />

Tras seleccionar “Random Map” la aplicación nos presenta la opción de definir una serie de parámetros antes de generar el mapa aleatorio. Así, en nuestro caso, seleccionamos el método de generación basado en rejilla (“grid layout”), estableciendo el número de intersecciones vertical y horizontal igual a seis y una separación entre ellas de cuatrocientos metros. Establecemos el nombre de salida de nuestro archivo de red (“manhattan.net.xml”) y confirmamos.

<img class=\"aligncenter\" src=\"https://lh3.googleusercontent.com/b6gxWJd2f6qkNkHjRIUlmIuGmeydWIe41fkLY5iDdbbKZfwBqq2L-9-eBcq1EbYoJXZ_j43iaoIYi4FGft0S9OF_qkcKxIqjSmNDUzyv3Z2OlKnpfzQ\" alt=\"\" width=\"443px;\" height=\"509px;\" />

El resultado es un archivo xml que contiene la descripción de dicha red, y que más tarde SUMO podrá interpretar adecuadamente:

<img class=\"aligncenter\" src=\"https://lh4.googleusercontent.com/xA0CMbvkR7vegwONVensUa3hsuajOC88QUAvsYyn6t13hkMsDF90V1fAobdloIf0FUF079Sdd0ZoJlAgFqjgbo9TFWWBNed0Zf0Jf7K8CkAomQDl9Yg\" alt=\"\" width=\"382px;\" height=\"380px;\" />

&nbsp;

<strong>Creación automática del archivo de rutas - JTRROUTER</strong>

Una vez disponemos del archivo de red con la rejilla manhattan, necesitamos generar el comportamiento de cada uno de los vehículos. De la misma forma que con la definición del mapa, o archivo de red de carreteras, podríamos ir carril por carril, intersección por intersección, para cada uno de los vehículos que vayamos a inyectar en nuestro escenario, realizar la descripción de rutas únicas que permitan concluir en una simulación más o menos aleatoria. Sin embargo, si la definicion manual del mapa era tediosa, la definición de rutas de esta forma lo es mucho más.

Por suerte, de la misma manera que existe una herramienta para generar de forma automática la descripción del archivo de red, existe otra aplicación que facilita y automatiza la generación del archivo de rutas. Se trata de JTRROUTER (<a href=\"http://sourceforge.net/apps/mediawiki/sumo/index.php?title=JTRROUTER\">http://sourceforge.net/apps/mediawiki/sumo/index.php?title=JTRROUTER</a>), una aplicación que, mediante la entrada de diferentes archivos, genera el archivo de rutas que necesitamos.

En concreto, esta aplicación puede tomar como entrada el archivo de red (*.net.xml) que hemos generado anteriormente; un archivo de flujos, que establezca el número de flujos diferentes que podemos tener; un archivo de “giros”, que define las probabilidades de que un determinado vehículo tome una u otra trayectoria en una intersección; o un archivo de configuración global que jtrrouter interpreta y aplica en consecuencia.

Para nuestro caso, basta con el archivo de red (“manhattan.net.xml”), el archivo de flujos (“mahattan.flows.xml”) y el archivo de configuración (“manhattan.jtr.cfg”) que detallamos a continuación:

<code>&lt;configuration&gt;
&lt;input
net-file=\"manhattan.net.xml\"
flow-definition=\"manhattan.flows.xml\"
/&gt;
&lt;output
output-file=\"manhattan.rou.xml\"
/&gt;
&lt;processing
continue-on-unbuild=\"true\"
turn-defaults=\"25,25,25,25\"
sinks=\"4/0to5/0\"
/&gt;
&lt;/configuration&gt;</code>

Mediante este archivo de configuración, indicamos a jtrrouter que deseamos generar un archivo de rutas para un mapa que se encuentra definido en “manhattan.net.xml” y que, mediante el archivo de flujos “manhattan.flows.xml”, cuyo contenido es el siguiente,

<code>&lt;flowdefs&gt;
&lt;flow id=\"flow0\" from=\"0/5to0/4\" begin=\"0\" end=\"100\" no=\"25\" /&gt;
&lt;/flowdefs&gt;</code>

tenemos la intención de que las rutas que se generen partan desde el edge “0/5to0/4” y se aplique a un total de 25 vehículos, que serán generados entre el intervalo de tiempo 0 a 100 segundos.

Pero además, y lo que es más importante, y que es lo que otorga a nuestro escenario el carácter aleatorio y caótico, se encuentra en las últimas líneas. En concreto, “turn-defaults”, que indica la probabilidad de que un vehículo gire a la izquierda, a la derecha, al frente, o hacia atrás, y que establecemos en un valor de 25% (el valor “sinks” define el punto final en el que muere un vehículo).

Finalmente, ejecutaremos, en línea de comandos:

</div>
<div>
<p dir=\"ltr\"><code>jtrrouter -c manhattan.jtr.cfg -t manhattan.turns.xml</code></p>
El resultado es un archivo (“manhattan.rou.xml”) que podremos inyectar a SUMO, junto con el archivo de red (“manhattan.net.xml”) para generar la simulación en la rejilla manhattan.

</div>
&nbsp;",
          "wp:post_id": "119",
          "wp:post_date": "2011-08-28 17:47:04",
          "wp:post_date_gmt": "2011-08-28 17:47:04",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "sacar-07-grid-manhattan-scenario",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": [
            {
              "-domain": "category",
              "-nicename": "802-15-4",
              "#cdata-section": "802.15.4"
            },
            {
              "-domain": "category",
              "-nicename": "arduino",
              "#cdata-section": "arduino"
            },
            {
              "-domain": "category",
              "-nicename": "mixim",
              "#cdata-section": "mixim"
            },
            {
              "-domain": "category",
              "-nicename": "omnet",
              "#cdata-section": "omnet"
            },
            {
              "-domain": "category",
              "-nicename": "sacar",
              "#cdata-section": "sacar"
            },
            {
              "-domain": "category",
              "-nicename": "sommer",
              "#cdata-section": "sommer"
            },
            {
              "-domain": "category",
              "-nicename": "sumo",
              "#cdata-section": "sumo"
            },
            {
              "-domain": "category",
              "-nicename": "v2v",
              "#cdata-section": "v2v"
            },
            {
              "-domain": "category",
              "-nicename": "vanet",
              "#cdata-section": "vanet"
            },
            {
              "-domain": "category",
              "-nicename": "xbee",
              "#cdata-section": "xbee"
            },
            {
              "-domain": "category",
              "-nicename": "zigbee",
              "#cdata-section": "zigbee"
            }
          ],
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "SACAR 08 - Escenario real. Campus externo UAH",
          "link": "http://eduardomarin.es/blog/?p=131",
          "pubDate": "Mon, 29 Aug 2011 16:19:16 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?p=131"
          },
          "content:encoded": "Tras la generación del escenario basado en la cuadrícula manhattan, el siguiente paso es recrear un mapa de carreteras real, basado en una zona urbana, con diversidad de intersecciones, rotondas, giros, curvas y demás componentes que podemos encontrar al circular por cualquier ciudad con nuestro vehículo.

Para ello, nos aproximaremos, a vista de satélite, hasta el campus externo de la Universidad de Alcalá, para fijarnos en sus calles, y barrios anexos.<br/>

<img class=\"aligncenter\" src=\"https://lh6.googleusercontent.com/VtyINvyQr6ulsQRr9WiXodqD8GJDqu2vizwPNywsXYhBQjaSNYZI4h5WPK0Gw77bcdDCn2gI4PfEyZtp-hnrd2CwkwXjYexmqxaPH-laate34G_ABds\" alt=\"\" width=\"601px;\" height=\"309px;\" />

De nuevo, como comentamos a la hora de realizar la definición del archivo de red para la rejilla manhattan, podríamos, armados de tiempo y paciencia, realizar la descripción de la red nodo a nodo, conectándolos entre sí, definiendo cada uno de los carriles, curvas y rotondas.

Y, de nuevo, volvemos a recurrir a una serie de herramientas que nos facilitan este proceso.

Para ello, lo primero que debemos hacer es localizar el escenario que deseamos describir en el navegador de mapas open source por excelencia, Open Street Map.

Open Street Map, (también conocido como OSM), es un proyecto colaborativo para crear mapas libres y editables, un concepto muy próximo a Wikipedia.

Una de las ventajas de Open Street Map es que, libre de derechos, podemos extraer los metadatos asociados a una zona geográfica y trabajar libremente con ellos. Así pues, una vez en el navegador openstreetmap (<a href=\"http://www.openstreetmap.org/\">http://www.openstreetmap.org</a>), en la sección “exportar”, basta con seleccionar la opción “Datos formato OpenStreetMap XML”, “seleccionar a mano otro área” (si no deseamos exportar toda la ventana) y confirmar. Inmediatamente comenzará la descarga del archivo .xml que contiene la descripción de dicha zona.<br/>

<img class=\"aligncenter\" src=\"https://lh6.googleusercontent.com/13sK6aAOitZhD_v2vN1SDi5_c2MmBjvEgPg8eIUoNPZmSVrMizr2t8Ct-_s8nvQyUrBjXBkx6To_Pyw9s1cGt2eP2n1T3mpzT57wVm2_RzdahG2mXmI\" alt=\"\" width=\"598px;\" height=\"390px;\" />

El siguiente paso es convertir dicho archivo a un archivo de red (*.net.xml) válido para SUMO. Para ello, utilizaremos de nuevo la herramienta NETCONVERT, de la siguiente forma:
<p dir=\"ltr\"><code>netconvert --osm-files alcala.osm.xml -o alcala.net.xml</code></p>
El resultado es el archivo de red que utilizaremos para trabajar con SUMO.

En este punto volvemos a encontrarnos con una descripción de vías compleja, con multitud de intersecciones y carriles, pero sin un archivo de rutas que defina el comportamiento de cada vehículo. Basta con volver unas líneas atrás y comprobar que debemos proceder de la misma forma que con el archivo de red de manhattan.

Definimos un archivo de flujo que defina el número de vehículos que pondremos en escena, y desde un punto de partida (“alcala.flows.xml”):

<code>&lt;flowdefs&gt;
&lt;flow id=\"flow0\" from=\"-50170608#0\" begin=\"0\" end=\"100\" no=\"25\" /&gt;
&lt;/flowdefs&gt;</code>

Y un archivo de configuración para la herramienta JTRROUTER (“alcala.jtr.cfg”):

<code>&lt;configuration&gt;
&lt;input
net-file=\"alcala.net.xml\"
flow-definition=\"alcala.flows.xml\"
/&gt;
&lt;output
output-file=\"alcala.rou.xml\"
/&gt;
&lt;processing
continue-on-unbuild=\"true\"
turn-defaults=\"25,25,25,25\"
sinks=\"-50170573\"
/&gt;
&lt;/configuration&gt;</code>

Finalmente, utilizando JTRROUTER, obtendremos el archivo de rutas que necesitamos para generar la simulación sobre este escenario:
<p dir=\"ltr\"><code>jtrrouter -c alcala.jtr.cfg</code></p>
<img class=\"aligncenter\" src=\"https://lh5.googleusercontent.com/K66YR6N7su0tWQ6GJR5gdjn7LI4a7PzlMCErTgdw9s1atU_91qT6y5wuyC9j-_v-kQdZ1ZJCRZXVtu5Tf6Flwv2aPnthR5hko5XgZPE3w0Qahy-dUaE\" alt=\"\" width=\"563px;\" height=\"332px;\" />

&nbsp;",
          "wp:post_id": "131",
          "wp:post_date": "2011-08-29 16:19:16",
          "wp:post_date_gmt": "2011-08-29 16:19:16",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "sacar-08-escenario-real-campus-externo-uah",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "sin-categoria",
            "#cdata-section": "Sin categoría"
          },
          "wp:postmeta": [
            {
              "wp:meta_key": "_edit_last",
              "wp:meta_value": "1"
            },
            {
              "wp:meta_key": "_wp_old_slug",
              "wp:meta_value": "sacar-08"
            }
          ]
        },
        {
          "title": "SACAR 09 - Resultados de simulación",
          "link": "http://eduardomarin.es/blog/?p=141",
          "pubDate": "Mon, 05 Sep 2011 20:15:37 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?p=141"
          },
          "content:encoded": "<div><strong>ESTADÍSTICAS - GRID MANHATTAN</strong>&nbsp;

Una vez definidos los dos escenarios, el siguiente paso será obtener una serie de medidas en función de unos determinados parámetros que nos permitan obtener ciertas conclusiones.

Para ello, en primer lugar, debemos establecer unos parámetros fijos, que no variarán en ninguno de los dos escenarios:

</div>
<table><colgroup> <col width=\"171\"></col> <col width=\"274\"></col> </colgroup>
<tbody>
<tr>
<td>Parámetro</td>
<td>Valor</td>
</tr>
<tr>
<td>Wireless Interfaz</td>
<td>802.15.4</td>
</tr>
<tr>
<td>Potencia de transmisión</td>
<td>500 mW</td>
</tr>
<tr>
<td>Modelo de movilidad</td>
<td>Modelo de velocidad variable</td>
</tr>
<tr>
<td>Número de vehículos de alerta</td>
<td>1</td>
</tr>
<tr>
<td>Paquetes enviados por el/los vehículo/s de alerta</td>
<td>1 por segundo</td>
</tr>
<tr>
<td>Algoritmo de control “storm broadcast”</td>
<td>APAL</td>
</tr>
<tr>
<td>Velocidad m/s para pruebas con velocidad fija</td>
<td>15 m/s (54 km/h)</td>
</tr>
<tr>
<td>Dimensiones escenario</td>
<td>2000m x 2000m</td>
</tr>
<tr>
<td>Tiempo total de simulación</td>
<td>3500 segundos</td>
</tr>
<tr>
<td>Tiempo de inicio de envío de mensajes de alerta</td>
<td>1000 segundos</td>
</tr>
</tbody>
</table>
<div>

A continuación se presentan los resultados para diferentes pruebas:

<strong>Tiempo medio de recepción de mensaje de alerta (en función del número de vehículos)</strong>

<strong>nº vehiculos	tiempos medios (segundos)</strong>
25		0,007072685627817
50		0,007199787745076
75		0,010987959991301
100		0,013574591837651
125		0,016334174503593
150		0,035179274952087
175		0,045466363075213
200		0,049251359616137
225		0,06505717896325
250		0,062109701641809
275		0,061436680713181
300		0,071436680713181
<img class=\"aligncenter\" src=\"https://lh5.googleusercontent.com/ahgcCsu5dVGsib8xdkrg58MqHaELE3XLn2nnTzknv8zLf1q2-IsyN4b6Vdfm-c045hl1vxWwyd9VYn21pZrWTYaNBpDeMTBGwwEcQQJNNE52t7zEk_Y\" alt=\"\" width=\"600px;\" height=\"371px;\" />
Observamos en estos resultados como, a medida que aumentamos el número de vehículos en circulación, aumenta el tiempo medio de recepción de los paquetes de alerta. Este resultado es lógico pues a mayor número de vehículos, mayor probabilidad de que un paquete deba atravesar más nodos de la red, con el consiguiente retardo que cada uno de ellos suma en el reenvío del mismo. No obstante, aunque pueda esto significar que para un aumento de vehículos el resultado global nos pueda parecer negativo, esto no es así como podremos ver a continuación.

<strong>Blind Vehicles - Número de vehículos ciegos que no reciben el mensaje de alerta (en función del número de vehículos)</strong>

<strong>nº vehiculos		vehículos no ciegos		% vehículos ciegos</strong>
25			2,71				89,16
50			4,08				91,84
75			7,48				90,0266666666667
100			13,75				86,25
125			18,63				85,096
150			50,36				66,4266666666667
175			85,68				51,04
200			129,3				35,35
225			193,31				14,0844444444444
250			208,35				16,66
275			214,8				21,8909090909091
300			228,64				23,7866666666667<img class=\"aligncenter\" src=\"https://lh4.googleusercontent.com/zsVXhyqr6P5Z53Q9hiDzxlTvBwgZ2PExZo5oWTXQ6VgtqGFcK4w8yFn_JXwNJpSRLXLM5UDu9VSnqmxuMn_G7QcGfsO2xe-z4QocoUmkTyegheXU6Y8\" alt=\"\" width=\"697px;\" height=\"357px;\" />
Así, como comentábamos en la gráfica anterior, podría pensarse que un retardo mínimo, como el que se obtiene para un bajo número de vehículos en escena, sería preferible que un retardo algo mayor como el que tenemos si nos aproximamos a la centena de vehículos activos. Sin embargo, fijándonos en esta otra gráfica, donde se muestra el porcentaje de vehículos que no consiguen recibir el mensaje de alerta, la sensación global cambia, y nos damos cuenta de que aunque el retardo aumente, para 225 vehículos activos el número de vehículos ciegos disminuye por debajo del 25%.

Vemos por tanto una tendencia a la baja según aumentamos el número de vehículos en circulación. Esto se debe a que para pocos vehículos, los huecos existentes entre ellos impiden una cobertura amplia en la que difundir los mensajes, y mejora según aumenta la densidad de vehículos.

Pero cabe señalar un punto de inflexión existente en los resultados, a partir de la cifra 225 vehículos en circulación, donde comienza a aumentar lentamente el número de vehículos ciegos. Este hecho pone de manifiesto el problema de “broadcast storming” que se produce con un número grande de vehículos conviviendo en un determinado espacio.

<strong>Tiempo medio de recepción de mensaje de alerta (en función de la velocidad)</strong>

<strong>velocidad (m/s)	tiempos medios</strong>
5			0,048343629270837
10			0,061024494525718
15			0,062833164664556
20			0,053831343588155
25			0,053874989359417
30			0,0426030364312
35			0,041898096643327
<img class=\"aligncenter\" src=\"https://lh6.googleusercontent.com/QDcT-E9OJAcIU-l05sAxmrPLmHgVRPowjHzhSPqCz2zfGUfOksr4EHEr2WbK8S3gQ6YHD50GtAiQyhzmbi6ikP1zHVopdGneVjlpR2NpJPH7ZTo6ISM\" alt=\"\" width=\"600px;\" height=\"371px;\" />
El siguiente resultado nos ofrece unos valores de eficacia de entrega, en tiempo medio de entrega, en función de la velocidad a la que se mueven los vehículos. Para realizar esta prueba hemos seleccionado el número de vehículos en circulación que ofrecía menor número de “blind vehicles”, esto es 225 vehículos en escena.

Observamos como para bajas velocidades (5 m/s) el tiempo medio de entrega es bajo, mientras que según aumentamos la velocidad hasta los 15 m/s dicho valor aumenta para volver a disminuir. Estos resultados, lejos de ser concluyentes, podrían darnos una idea de lo que realmente ocurre para diferentes velocidades.

Así, podríamos suponer que para velocidades próximas a 30 m/s (100 km/h aprox.) cada nodo puede estar facilitando la entrega a un nodo próximo que, de no ser por la velocidad a la que se mueve, dependería de un nodo intermedio para realizarla, con el consiguiente aumento de tiempo que esto conlleva. No obstante, estas conclusiones requerirían un estudio más profundo para extraer los motivos reales que originan estos tiempos de entrega.

<strong>Blind Vehicles - Número de vehículos ciegos que no reciben el mensaje de alerta (en función de la velocidad)</strong>

<strong>Velocidad (m/s)	nº vehiculos	vehículos no ciegos		% vehículos ciegos</strong>
5			225		169,93				24,4755555555556
10			225		176,96				21,3511111111111
15			225		187,2				16,8
20			225		162,93				27,5866666666667
25			225		144,96				35,5733333333333
30			225		120,03				46,6533333333333
35			225		118,34				47,4044444444444

<img class=\"aligncenter\" src=\"https://lh6.googleusercontent.com/v9mNHzRpUIvWpSunKsmdb7q_BttP2gtHtcfsB_eDHLmIVhPUuYa7xhPMBP3oDbndyrTCEJqCm6XroQOuCbIDq6RdJfXLiSlNxWtiDhu9j8PasqZ3WBY\" alt=\"\" width=\"616px;\" height=\"288px;\" />

Como para las primeras gráficas, vemos cómo el número de vehículos ciegos nos ayuda a comprender mejor los resultados obtenidos sobre tiempos medios de entrega. Aún cuando suponíamos que para velocidades mayores el tiempo medio de entrega disminuía gracias a que esas velocidades favorecían dichos resultados, comparando con estos datos podemos deducir que esa disminución se debe a un número mayor de vehículos que no reciben dichos mensajes, es decir, a altas velocidades, un vehículo tiene mayor dificultad para alcanzar a sus vecinos. Esto es lógico si pensamos que éstos le acompañarán por menos tiempo debido a la rapidez con la que se mueven.

Además, como en la primera gráfica, aquí también podemos ver un punto de inflexión que devuelve un mayor número de vehículos ciegos según nos aproximamos hacia velocidades más lentas, a partir de los 15 m/s. Podría pensarse en esta gráfica como una simetría inversa de la anterior. En este caso, que los vehículos se muevan más lentamente hace que el problema de “broadcast storming” aumente, favoreciendo el incremento de vehículos ciegos.

<strong>ESTADÍSTICAS - MAPA CAMPUS EXTERNO UAH</strong>

Repetimos las mismas pruebas, pero esta vez para el escenario basado en el campus externo de la Universidad de Alcalá de Henares.

<strong>Tiempo medio de recepción de mensaje de alerta (en función del número de vehículos)</strong>

<strong>nº vehiculos		tiempos medios</strong>
25			0,006970784380327
50			0,015033684924406
75			0,020233480086205
100			0,01832821694987
125			0,019000897152919
150			0,027706380111591
175			0,025834554016553
200			0,027218716558081
225			0,02595455744488
250			0,028664003185155
275			0,030286470339648
300			0,03243668071318
<img class=\"aligncenter\" src=\"https://lh6.googleusercontent.com/BoA0wum6ctk-y5N1p5NIkwzqtgE3-kCzVB9qamuf_6GGpl57ZfBBuNTZ6PRyJVakEF1aIvh25FXa5sNy73r9TE7oLwVwYetXCNTN3Oldjq7th4FpPsw\" alt=\"\" width=\"600px;\" height=\"371px;\" />

<strong>Blind Vehicles - Número de vehículos ciegos que no reciben el mensaje de alerta (en función del número de vehículos)</strong>

<strong>nº vehiculos		vehículos no ciegos		% Vehículos ciegos</strong>
25			6,78				72,88
50			22,8				54,4
75			38,5				48,6666666666667
100			63,3				36,7
125			95,53				23,576
150			113,53				24,3133333333333
175			113,26				35,28
200			145,6				27,2
225			176,36				21,6177777777778
250			188,76				24,496
275			211				23,2727272727273
300			228,64				23,7866666666667

<img class=\"aligncenter\" src=\"https://lh6.googleusercontent.com/Z8RG7t16a8SguhT35d6L11Vr8uRELWdF-NCBsswkxPRmXRqaIZsNqIGl2XC3JLfh3GCr9BR2tgx3o1GCtpK3rnOzuMWFspVZzmZhIu8ktLCanPCRp-Q\" alt=\"\" width=\"697px;\" height=\"357px;\" />

Analizando conjuntamente la gráfica de tiempos medios de recepción de mensajes y el porcentaje de vehículos ciegos en escena, y comparándolo con los que obtuvimos en el escenario de “red manhattan”, podemos observar cómo en este caso el número de vehículos ciegos es menor, y que acusa una disminución más temprana de ellos frente a dicho escenario. Este hecho se debe principalmente a que en un escenario real, el número de caminos posibles que puede tomar un vehículo es mucho mayor que el que determina la rejilla manhattan, que obliga a un mayor número de vehículos a ir en una sola dirección (cuatro máximo), repartiendo de una forma más heterogénea a los vehículos y dejando un mayor hueco entre ellos (para manhattan) que para el caso real que se contempla en esta gráfica, en la que los vehícuos se distribuyen aleatoriamente, favoreciendo el alcance cuando hay pocos vehículos, y disminuyendo el problema de “broadcast storming” cuando crece.

<strong>Tiempo medio de recepción de mensaje de alerta (en función de la velocidad)</strong>

<strong>velocidad (m/s)	tiempos medios</strong>
5			0,018167114012302
10			0,026948991491393
15			0,018931593578406
20			0,024597942705083
25			0,023744718627626
30			0,020520994142238
35			0,025668026274513

<img class=\"aligncenter\" src=\"https://lh5.googleusercontent.com/_kKE3PdDop4ZnZ010bJ8_w5ct4oOUO_OXMtZmQMWgWgU-oFBLnMRKDv1uyUu74VEzw1SX9hj65ew3TBNX7NDKfU7zcbDhAh_MAQYlQXS0wAA-5nHOf8\" alt=\"\" width=\"600px;\" height=\"371px;\" />
Si nos fijamos ahora en los resultados que obtenemos al variar la velocidad de los vehículos, observamos una gráfica poco definida, que no nos indica concreto, a priori, del hecho de aumentar o disminuir la velocidad máxima a la que se mueven los mismos. No obstante, es una gráfica coherente con las condiciones que un escenario aleatorio y heterogéneo como es que se sirve en la simulación impone. Al ofrecer tantas vías, con tantos cruces, la velocidad de los vehículos realmente no va a mantenerse constante y cercana al límite que hemos marcado, y, por tanto, no podemos extraer unos resultados válidos de dicha gráfica.

<strong>Blind Vehicles - Número de vehículos ciegos que no reciben el mensaje de alerta (en función de la velocidad)</strong>

<strong>Velocidad (m/s)	nº vehiculos	vehículos no ciegos		% vehículos ciegos</strong>
5			225		183,33				18,52
10			225		136,93				39,1422222222222
15			225		177,93				20,92
20			225		161,63				28,1644444444444
25			225		168,4				25,1555555555556
30			225		167,3				25,6444444444444
35			225		157,56				29,9733333333333

<img class=\"aligncenter\" src=\"https://lh3.googleusercontent.com/19y6riKED_JouAsiYphDcUQp7vgk4YhNL2gwoXD2Xs0J9ZerJ2dhj-hprPBt0fSb8NeujaOTeeMu67krzGp9EWX7GSrfJS-q9WWlUSbviqpqS3oqa94\" alt=\"\" width=\"616px;\" height=\"288px;\" />

De la misma forma, el gráfico que nos indica el número de vehículos ciegos genera valores incoherentes que llevan a confusión, aunque podemos deducir cierto aumento del número de vehículos ciegos a medida que aumentamos la velocidad de los vehículos, de la misma forma que ocurría en el escenario de manhattan.

</div>",
          "wp:post_id": "141",
          "wp:post_date": "2011-09-05 20:15:37",
          "wp:post_date_gmt": "2011-09-05 20:15:37",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "sacar-09-resultados-de-simulacion",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": [
            {
              "-domain": "category",
              "-nicename": "802-15-4",
              "#cdata-section": "802.15.4"
            },
            {
              "-domain": "category",
              "-nicename": "mixim",
              "#cdata-section": "mixim"
            },
            {
              "-domain": "category",
              "-nicename": "omnet",
              "#cdata-section": "omnet"
            },
            {
              "-domain": "category",
              "-nicename": "sacar",
              "#cdata-section": "sacar"
            },
            {
              "-domain": "category",
              "-nicename": "sommer",
              "#cdata-section": "sommer"
            },
            {
              "-domain": "category",
              "-nicename": "sumo",
              "#cdata-section": "sumo"
            },
            {
              "-domain": "category",
              "-nicename": "v2v",
              "#cdata-section": "v2v"
            },
            {
              "-domain": "category",
              "-nicename": "vanet",
              "#cdata-section": "vanet"
            }
          ],
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "SACAR 10 - IEEE 802.15.4 Radio Shadowing in Urban Enviroments - Obstacles",
          "link": "http://eduardomarin.es/blog/?p=149",
          "pubDate": "Wed, 05 Oct 2011 20:59:49 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?p=149"
          },
          "content:encoded": "<div>Hasta ahora, las mediciones y estadísticas que habíamos realizado se habían circunscrito a entornos con una visibilidad entre vehículos directa, sin ningún tipo de obstáculo que pudiera interferir en la recepción de los mensajes que se enviaran. No obstante, esta situación idónea será difícil de encontrar en escenarios urbanos, donde la arquitectura impone barreras físicas que modifican el comportamiento de la señal, afectando en definitiva, a nuestra capacidad de recibir un determinado mensaje.&nbsp;

Así, en primer lugar, deberíamos establecer un parámetro o valor que nos indique en qué medida nuestra capacidad de recibir un mensaje ha sido alterada, en función de la distancia entre emisor y receptor, de la calidad del medio de transmisión, de los elementos que obstaculicen el camino que recorre la señal de transmisión...

Nos encontramos entonces con un parámetro que, en telecomunicaciones, nos permite determinar ese tipo de variación en la señal frente a pérdidas o interferencias. Este parámetro es el decibelio (db), y representa la relación existente entre la potencia de señal en el emisor y la potencia de señal en el receptor : dB = 10  log10 (Ps/Pe)

Gracias a este parámetro podemos evaluar cuantitativamente en valores relativos la calidad de nuestra señal en el receptor respecto a la del emisor. Sin embargo, el siguiente paso es determinar qué factores y en qué medida influyen sobre dicha relación. Las simulaciones en redes de comunicación se ven influenciadas por pérdida de señal debido a largas distancias, pérdidas determinísticas a pequeñas escalas o atenuaciones por efectos probabilísticos, por lo que el cómputo total es normalmente calculado como la suma independiente de procesos de atenuación Lx.  En este proyecto contemplaremos únicamente dos tipos de factores de atenuación sobre la señal de transmisión:

<strong>- Right Two-Ray Model</strong>

</div>
<div><img class=\"aligncenter\" src=\"https://lh4.googleusercontent.com/BPGQcU3lUBd2c_4ClqRVVfUhGhsAhb-u2pZB_-SbTsiFl_7aHLMH_xOS13kKJZ7hKMxyxFEVtuNOk6JYjgoJdrrmzN52TixZS8kxG1HBimobMskTqxk\" alt=\"\" width=\"395px;\" height=\"163px;\" />&nbsp;

En términos simplificados, este tipo de pérdida de señal viene dada por la forma en que la onda se propaga, como podemos observan en la imagen. Por un lado, el receptor tiene una visión directa del emisor, a una distancia dlos, desde donde se recibe la señal, pero, por otro lado, la misma señal se ve reflejada sobre la tierra, con un cierto ángulo de reflexión, produciendo un retardo en la señal que origina un tipo de interferencia conocido como Two-Ray Interference, y que viene dado por la siguiente expresión:

</div>
<div>
<p dir=\"ltr\"><a href=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/10/formula_01.jpg\"><img class=\"size-full wp-image-153 alignnone\" title=\"formula_01\" src=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/10/formula_01.jpg\" alt=\"\" width=\"192\" height=\"30\" /></a></p>

</div>
<div><strong>- Attenuation per wall and attenuation per meter of penetration approaches</strong></div>
<div>

Este tipo de pérdida de señal viene determinado directamente por el entorno en el que nos encontremos, con los obstáculos que se dibujen alrededor de cada vehículo y de su forma y composición. El valor de atenuación que nos impone cada uno de los obstáculos que pudiéramos encontrarnos podría determinarse empleando algoritmos basados en ray-tracing con gran exactitud y granularidad, sin embargo, podemos realizar aproximaciones basadas en medidas empíricas anteriores. En este caso, nos apoyaremos en los estudios realizados por Christoph Sommer &amp; Co. Univ. of Eralngen, Germany [<a href=\"http://www.google.es/url?sa=t&amp;source=web&amp;cd=4&amp;ved=0CEUQFjAD&amp;url=http%3A%2F%2Fccs.uibk.ac.at%2Fbib%2Fpdf%2Fsommer2011computationally.pdf&amp;ei=KL-MTtfTHbL44QSal6itCQ&amp;usg=AFQjCNFkg9kZrBttZHbD9n7uWe84DpRpqQ&amp;sig2=ClvgOWxOJ6k8y8Zp4josiA\">REF</a> ] en el cual determinan que la pérdida de señal al atravesar un determinado obstáculo (un edificio común en un área urbana) tiene en cuenta el número de paredes que se atraviesan multiplicado por un factor de atenuación  (que para un edificio se aproxima a 9.6 dB) y el espacio interno multiplicado por un factor de atenuación  aproximado a 0.45 dB/m.

De esta forma, nos encontramos ante la siguiente expresión:

<a href=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/10/formula_02.jpg\"><img class=\"size-full wp-image-154 alignnone\" title=\"formula_02\" src=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/10/formula_02.jpg\" alt=\"\" width=\"146\" height=\"30\" /></a>

Con estos dos parámetros de atenuación a tener en cuenta definimos un entorno de simulación simple donde podamos comprobar dicha influencia en valores relativos dB. Para ello, situamos dos vehículos a una cierta distancia, uno de ellos fijos, y otro en movimiento, donde, en un determinado momento un obstáculo se interpondrá entre ambos, como muestra la siguiente figura:

</div>
<div><a href=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/10/esquema_vehiculos.png\"><img class=\"aligncenter size-full wp-image-152\" title=\"esquema_vehiculos\" src=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/10/esquema_vehiculos.png\" alt=\"\" width=\"574\" height=\"157\" /></a>&nbsp;

El resultado de las mediciones es el siguiente:
<p style=\"text-align: left;\"><img src=\"https://lh6.googleusercontent.com/n2FepfO4KakJWq-Dfx3jFcVui84afJHkDkfqhZsOZCNm49WJrUY3sAEemROX89jGLsHIr2SWzqLqtzWigUqZCrQiBuR8mEtFo_Xd3j9kidZeFNiu8fk\" alt=\"\" width=\"600px;\" height=\"371px;\" />
Una vez comprobado que el modelo con obstáculos se comporta como esperamos, incluyendo los dos parámetros de atenuación comentados, el siguiente paso es llevar dichos valores al escenario con el que hemos venido trabajando hasta ahora.</p>
En este sentido, podríamos incluirlos tanto en el escenario de grid manhattan como en el escenario real del campus universitario de Alcalá, sin embargo, dado que la definición de la estructura que representa los obstáculos es compleja de elaborar, para el escenario real del campus se hace demasiado laboriosa. No obstante, podemos obtener unos resultados concluyentes con el grid manhattan como observamos en las estadísticas que se presentan a continuación.
<p style=\"text-align: left;\">Para ello, hemos incluido en el grid manhattan una retícula de obstáculos en los espacios existentes entre las vías de circulación como se muestra en la siguiente imagen:</p>
<p style=\"text-align: center;\"><img class=\"aligncenter\" src=\"https://lh4.googleusercontent.com/7ppR2xwaBczseK1OCYutZMz2bCdP0pYryGvmBfM6pkNcQI2dhAJWC3pHotYbTw4IfcYKrBhqXTsYUBZTCC2vwrHsbVIY6quIvP4EemsIqZbK_xGJ9pk\" alt=\"\" width=\"367px;\" height=\"328px;\" /></p>
Estadísticas con obstáculos:

En las siguientes gráficas se muestran los resultados obtenidos con obstáculos, y los que se obtuvieron sin tenerlos en cuenta.
nº vehiculos	tiempos medios
25	0,007209680001107	0,007072685627817
50	0,007617448143321	0,007199787745076
75	0,008395350651071	0,010987959991301
100	0,013129935217123	0,013574591837651
125	0,018938251818686	0,016334174503593
150	0,025972732589758	0,035179274952087
175	0,030080657313761	0,045466363075213
200	0,031529364457014	0,049251359616137
225	0,044340576195803	0,06505717896325
250	0,036982368803253	0,062109701641809
275	0,043089638515126	0,061436680713181
300	0,046655336079543	0,071436680713181
<img class=\"aligncenter\" src=\"https://lh3.googleusercontent.com/RtE0EWFkZFXXruDHSzJV-bc-58mDOnVmkaL6OoSgVuPHDSkXF_BXaop8CCCUktLo4ZyNHAWp-Q_c10tXib13KsX-9IQa-BsDXCpNy13ewMuEPKUJNds\" alt=\"\" width=\"600px;\" height=\"371px;\" />
nº vehiculos	no ciegos
25	2,52	89,92	89,16
50	4,51	90,98	91,84
75	5,45	92,7333333333333	90,02
100	12,62	87,38	86,25
125	19,16	84,672	85,09
150	35,43	76,38	66,42
175	44,33	74,6685714285714	51,04
200	48,03	75,985	35,35
225	99,03	55,9866666666667	14,08
250	104,13	58,348	16,66
275	144,8	47,3454545454545	21,89
300	141,73	52,7566666666667	23,78
<img class=\"aligncenter\" src=\"https://lh5.googleusercontent.com/9FtW8K_8ovbnmmUd4dM6oi90ogPTUr3ddmSZ7tR6-d4q6yPxx_CkMCM66YFR6tjzSc_SLtenP9BE_sLtTe8dEoPwUFwfTG3aURgHPWEgnEBXml1d04g\" alt=\"\" width=\"697px;\" height=\"357px;\" />

velocidad (m/s)	tiempos medios
5	0,048370934391316	0,048343629270837
10	0,055500794271592	0,061024494525718
15	0,063731446790672	0,062833164664556
20	0,05123674211268	0,053831343588155
25	0,052311978312052	0,053874989359417
30	0,042951989775603	0,0426030364312
35	0,044822091702791	0,041898096643327
<img class=\"aligncenter\" src=\"https://lh3.googleusercontent.com/lhI2gWilb2sc4tWfSoC4skq-bzFps9E5MmE3UyZLC26ZRKa0hy02PcJ1yDfHugSDrs0DLSDWS-nU07mYOw8HaSbzKYDxpJTg-t7nqBuqUM0rsjuK5Oo\" alt=\"\" width=\"600px;\" height=\"371px;\" />

Velocidad (m/s)	nº vehiculos	no ciegos
5	225	154,36	31,3955555555555	24,47
10	225	138,4	38,4888888888889	21,35
15	225	174,16	22,5955555555556	16,8
20	225	149,46	33,5733333333333	27,58
25	225	127,83	43,1866666666667	35,57
30	225	112,06	50,1955555555556	46,65
35	225	107,43	52,2533333333333	47,4

<img class=\"aligncenter\" src=\"https://lh4.googleusercontent.com/eaetcy7iaxiIkmMRBg-EMkL3xrRFtcTA7yYklIU18FEFkY_TNeWPOBHU-W9MMdrPsFYHEB6HHKqcf9Azy9clGBsUiPkQ34aX8PnEo-ddyPduEPYAuJU\" alt=\"\" width=\"616px;\" height=\"288px;\" />

</div>
&nbsp;",
          "wp:post_id": "149",
          "wp:post_date": "2011-10-05 20:59:49",
          "wp:post_date_gmt": "2011-10-05 20:59:49",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "sacar-10-ieee-802-15-4-radio-shadowing-in-urban-enviroments-obstacles",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "sin-categoria",
            "#cdata-section": "Sin categoría"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "Hello world!",
          "link": "http://eduardomarin.es/blog/?p=1",
          "pubDate": "Tue, 31 Dec 2013 09:25:40 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin-nefele.rhcloud.com/?p=1"
          },
          "content:encoded": "Welcome to WordPress. This is your first post. Edit or delete it, then start blogging!",
          "wp:post_id": "1",
          "wp:post_date": "2013-12-31 09:25:40",
          "wp:post_date_gmt": "2013-12-31 09:25:40",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "hello-world",
          "wp:status": "trash",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "uncategorized",
            "#cdata-section": "Uncategorized"
          },
          "wp:postmeta": [
            {
              "wp:meta_key": "_wp_trash_meta_status",
              "wp:meta_value": "publish"
            },
            {
              "wp:meta_key": "_wp_trash_meta_time",
              "wp:meta_value": "1388942969"
            },
            {
              "wp:meta_key": "_wp_trash_meta_comments_status",
              "wp:meta_value": "a:1:{i:1;s:1:\"1\";}"
            }
          ],
          "wp:comment": {
            "wp:comment_id": "1",
            "wp:comment_author": "Mr WordPress",
            "wp:comment_author_url": "http://wordpress.org/",
            "wp:comment_date": "2013-12-31 09:25:40",
            "wp:comment_date_gmt": "2013-12-31 09:25:40",
            "wp:comment_content": "Hi, this is a comment.
To delete a comment, just log in and view the post&#039;s comments. There you will have the option to edit or delete them.",
            "wp:comment_approved": "post-trashed",
            "wp:comment_parent": "0",
            "wp:comment_user_id": "0"
          }
        },
        {
          "title": "SACAR 11 - Seguridad en redes VANET bajo protocolo 802.15.4",
          "link": "http://eduardomarin.es/blog/?p=158",
          "pubDate": "Wed, 02 Nov 2011 20:44:20 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?p=158"
          },
          "content:encoded": "<div>
<p style=\"text-align: justify;\">Al trabajar con redes de comunicación inalámbricas nos enfrentamos con problemas de seguridad que pueden comprometer al sistema. Al igual que en una red tradicional de comunicación, los requisitos de seguridad en una VANET son los siguientes:</p>
<p style=\"text-align: justify;\">- <em>Conﬁdencialidad</em>: Propiedad de la información por la que se garantiza que está accesible únicamente a personal autorizado.
- <em>Integridad</em> : Propiedad de la información por la que se garantiza que ésta no se ve alterada o modificada por personal no autorizado.
- <em>Disponibilidad</em>: Propiedad que asegura y garantiza al usuario el uso del sistema en cualquier momento determinado.
- <em>No repudio</em>: No se puede negar la autoría.</p>
<p style=\"text-align: justify;\"><a href=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/11/seg_011.png\"><img class=\"aligncenter size-full wp-image-162\" title=\"seg_01\" src=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/11/seg_011.png\" alt=\"\" width=\"239\" height=\"217\" /></a></p>

</div>
<div style=\"text-align: justify;\"><span style=\"font-size: small;\"><span style=\"line-height: 24px;\">
</span></span> No obstante, las características que imponen las redes VANET en cuanto a topología dinámica, falta de procesamiento centralizado, … etc. dificultan el cumplimiento de estos requisitos de seguridad. La política de seguridad a aplicar en un entorno ad-hoc dependerá, en gran media, de la aplicación y del escenario concreto para los que se realiza el despliegue de la red.Las propuestas de seguridad deben adaptarse a las necesidades específicas que surgen en el planteamiento de una u otra red de comunicación. Para nuestro caso, redes VANET definidas sobre la teoría de redes ad-hoc, estas políticas de seguridad deberán cubrir básicamente cuatro requisitos: control de acceso a la red, sistema de detección de intrusos (SDI), seguridad de los protocolos de encaminamiento y servicios de gestión de claves.&nbsp;

Estas políticas de seguridad deberán ser lo suficientemente robustas como para garantizar que un posible atacante sea incapaz de comprometer el sistema, entendiendo el papel de atacante como cualquier individuo o equipo que realice alguno de los siguientes ataques básicos (principalmente)

Ataques básicos :
- <em>Falsiﬁcación de la información</em> : El atacante difunde información falsa o errónea para que afecte al resto de los vehículos.
- <em>Manipulación de la información del sensor</em>: Modiﬁcar su posición, dirección, velocidad, etc. para escapar de ciertas responsabilidades por ejemplo, haber provocado un accidente.
- <em>Denegación de servicio</em>: utilizar un inhibidor de frecuencia para conseguir que un vehículo no reciba ninguna señal de su entorno en una cierta zona.
- <em>Falsificación de identidad</em>.
- <em>Rastreado de vehículos</em>: Seguir la pista de un vehículo infectándolo con algún virus que monitorice el estado de dicho vehículo.

Al igual que ocurre en redes tradicionales, las VANETs no quedan exentas de intrusiones externas y, por lo tanto, es necesario establecer un mecanismo de control de acceso a la red y sus servicios. Ante un ataque en el que un intruso acceda a los servicios de la red puede derivar en consecuencias catastróficas ya que, en las VANETs, los nodos asumen tareas de gestión y encaminamiento, dado que no existe una entidad central que asuma dicha responsabilidad. De esta forma, un intruso puede desviar el tráfico durante el encaminamiento o tener acceso a claves de identificación.

Tanto en la capa de red como en la de aplicación es necesario llevar a cabo un control de acceso que impida que un nodo sin autorización sea capaz de recibir o encaminar información (nivel de red) o que pueda acceder a servicios críticos como sería el de gestión de claves (nivel de aplicación).

Así pues, parece determinante ofrecer una política de control de acceso robusta. Veamos más detenidamente este aspecto.

</div>
<div style=\"text-align: justify;\">

<strong>Control de acceso</strong>

A través del control de acceso, un usuario puede acceder a la red y sus servicios tras un proceso de identificación y autorización. La forma en que se realiza este tipo de procesos depende en gran medida de las características de la red. Así, existen redes ad-hoc en la que los servicios de autenticación se encuentran centralizados, mientras que en otras redes estos servicios se encuentran distribuidos. Esto supone la aplicación de unos u otros mecanismos de control de acceso. Si elegimos un mecanismo de control de acceso distribuido para la red, será necesario un control de acceso basado en certiﬁcados digitales y autoridades certiﬁcadoras. En otros esquemas con servicios centralizados se requiere una autenticación basada en usuario y contraseña. Es muy útil hacer un estudio previo de las necesidades de seguridad de la red a desplegar, de esta forma, se podrán adecuar los mecanismos de control de acceso a la red.

Como primera línea de defensa, el control de acceso es una buena alternativa, sin embargo, debemos buscar soluciones en caso de que esta barrera se vea comprometida. Así, los sistemas de detección de intrusos (SDI) podrían protegernos en caso de que un individuo no autorizado accediera a la red.

Para las redes VANETs, se presentan varias propuestas SDI, veamos las más interesantes:

</div>
<div style=\"text-align: justify;\">

<strong>(SDI) Sistemas de detección de intrusos</strong>

Una solución basada en arquitecturas distribuidas y cooperativas para la detección de intrusos, es la que se propone en [YZWL 2000]. En este sistema, un agente de monitorización SDI lanzado en cada nodo monitoriza todas las actividades locales que ocurren a su alrededor. Si el SDI detecta una intrusión a partir de las trazas locales inicia un procedimiento de respuesta. Si se detecta una anomalía pero que no hay evidencias formales de la intrusión se usa un protocolo cooperativo con los vecinos para determinar si la intrusión tuvo lugar o no.

Otra alternativa, contemplada en [OKRG 2002], también presenta un SDI distribuido pero optimizado para las redes VANET. En este caso, cada nodo no ejecuta un agente de monitorización y control, sino que ofrecen el paso y alojamiento de agentes móviles -entidades software autónomas, ligeras y dinámicamente actualizables- que son capaces de desplazarse por la red y ejecutarse en ciertos nodos, de forma que minimizan el uso de los recursos, que en este tipo de redes suele ser limitado (ancho de banda, capacidad de proceso de los nodos...).

Es por ello que el empleo de técnicas de SDI debe realizarse previo estudio de las características de la aplicación y del escenario en el que ésta vaya a ejecutarse, debido a la sobrecarga que estos mecanismos pueden introducir, en términos de procesamiento, transmisión y almacenamiento en nodos. Si los requisitos de seguridad exigen fuertes técnicas de control y detección, y si los nodos disponen de suficiente capacidad y autonomía para soportar un SDI, entonces la elección y aplicación de este mecanismo de seguridad es justificable.

</div>
<div style=\"text-align: justify;\">

<strong>Cifrado y firmas digitales</strong>

Si optamos por utilizar técnicas de cifrado y firmas digitales como mecanismo de seguridad, tendremos que hacer uso de claves criptográficas. En esta situación, las claves criptográficas deberán ser compartidas entre los nodos y debe ofrecerse un mecanismo para gestionar dichas claves.
En este sentido, nos encontramos ante dos posibles configuraciones de nuestras redes VANET. Podemos permitir que nuestra propia red gestione de forma autónoma las claves, en cuyo caso nos encontraríamos con VANET auto organizadas; o bien podemos delegar dicha gestión a una entidad externa de confianza para la gestión de estas claves, VANET con gestión de claves externa.
En esquemas de VANETs pura, sin red de respaldo, es m´s apropiado usar un esquema de gestión de clave que no depende de ninguna entidad externa. En cambio, si se dispone de una red de respaldo, se puede optar por esquemas de tipos centralizados.
Las soluciones las mas populares son:

Para una red VANET pura:
- Gestión de claves en cadena de certiﬁcados.
- Gestión de claves basada en movilidad.

Para un red VANET híbrida:
- Autoridades de certiﬁación distribuídas.
- Gestión paralela de claves.

</div>
<div style=\"text-align: justify;\"><span style=\"text-decoration: underline;\">Gestión de claves en cadena de certiﬁcados</span>Cada nodo genera su certiﬁcado, se distribuye y se almacena en cada
nodo de la red. Si un nodo deja de ﬁarse de otro nodo, se puede pedir una
renovación del certiﬁcado. Del mismo modo, si un nodo sospecha que su clave privada ha sido comprometida, puede revocar su propio certiﬁcado y generar otra clave privada.<span style=\"text-decoration: underline;\">Gestión de claves basada en la movilidad</span>&nbsp;

Se basa en un esquema de distribución peer-to-peer de las claves de los nodos basada en la movilidad de cada nodo. Se transmite una clave a un nodo según la movilidad que tiene en un momento para que este nodo distribuya las claves a los nodos a su alcance. Se rompe así la necesidad de tener una entidad externa para compartir las claves.

<span style=\"text-decoration: underline;\">Autoridades de certiﬁcación distribuidas</span>

Se basa en una entidad externa de certiﬁcación que se encarga de distribuir las claves a los nodos de la red. Esta entidad debe ser altamente segura para que ningún atacante pueda tomar el control de ella y comprometer los mecanismos de certiﬁcación. Se puede distribuir los certiﬁcados de forma parcial o total.

En un mecanismo de distribución parcial de los certiﬁcados se elige un subconjunto de nodos llamados servidores a los cuales se transmiten las claves. Esos nodos deben disponer de una clave privada y una clave pública para que la entidad externa les pueda identiﬁcar de forma unívoca. Cada uno de los servidores genera una ﬁrma parcial utilizando su clave privada que es
enviada a un combinador, que puede ser cualquier servidor. El combinador reconstruye así la ﬁrma digital.

En un mecanismo de distribución total de los certiﬁcados, la clave se distribuye a todos los nodos de la red y requiere que un nodo use la entidad externa para contactar con cualquier vecino. No es necesario el concepto de combinador ya que será el propio nodo quién reconstruye la ﬁrma digital del grupo.

<span style=\"text-decoration: underline;\">Gestión paralela de claves</span>

Esta alternativa descrita en [SYRK 2004] se basa en una distribución parcial de los certiﬁcados por parte de una entidad externa y de un mecanismo de cadenas de certiﬁcados. La propuesta es conocida como Composite Key Management. La entidad externa distribuye el certiﬁcado a nodos servidores y luego tiene lugar el mecanismo de cadenas de certiﬁcados.

<strong>SOLUCIÓN ADOPTADA</strong>

<span style=\"text-decoration: underline;\">Autorización de certificación distribuída</span>

Apoyándonos en los trabajos de investigación de Alexandre Viejo, Francesc Sebé, Josep Domingo-Ferrer y Jesus Manjón, de la Universitat Rovira i Virgili (Comunicaciones Privadas en Redes Ad-hoc Vehiculares), optamos por un sistema de gestión de claves distribuído, gasado en agentes externos.

El sistema ofrecerá un mecanismo de seguridad y privacidad en el envío de mensajes siempre que los agentes externos que gestionan los identificadores (señales de tráfico, dispositivos específicos, nodos certificados, ...) sean fiables. Así, estas señales están facultadas para revocar identificadores y alertar a la red sobre nodos de dudosa fiabilidad o cuyas intenciones son entorpecer y comprometer al sistema.

Se propone así un sistema basado en pseudónimos válidos firmados por autoridades de tráfico que permiten identificar a usuarios fiables y distinguirlos de aqueños que pudieran ser dañinos, en cuyo caso, su pseudónimo queda marcado como “rebocado”, y cualquier mensaje que envíe será automáticamente identificado como no seguro. El sistema, además, impone una política de renovación de pseudónimos para ofrecer al usuario un mayor nivel de privacidad, al exponer en menor grado el seguimiento y traceado por terceros.

<span style=\"text-decoration: underline;\">Propuesta</span>

Distinguimos en nuestra red VANET dos elementos principales:
i) Señales de tráfico o dispositivos específicos.
ii) Vehículos moviéndose por nuestra zona de cobertura.

Las señales de tráfico se consideran nodos estáticos y son gestionados por las autoridades de tráfico (DGT).

Suponemos que las señales de tráfico son nodos fiables, que no guardan información acerca de los nodos de la red ni realizan actividades dañinas en la misma. Estos nodos tienen la capacidad de generar y almacenar una clave privada SKt, gestionada por la autoridad de tráfico. La clave pública asociada es accesible, conocida y aceptada como válida por todos los demás nodos de la red.

Cada vehículo está equipado con un dispositivo no manipulable (similar a una tarjeta inteligente), que no puede ser desinstalado y que impide que el usuario modifique su identificación.

<span style=\"text-decoration: underline;\">Transmisión de mensajes</span>

Cuando transmitimos mensajes en nuestra red, ya sean mensajes de alerta o informativos, estos serán enviados siguiendo la técnica de difusión uno-a-todos. Así, una señal de tráfico puede indicar a la red la existencia de un nodo no fiable o deshonesto de esta forma. De la misma manera, los vehículos deben indicar cada cierto tiempo si siguen o no activos, a través de mensajes “hello-beacons”, que ayudan a gestionar la propia red VANET.

Los mensajes transmitidos vía broadcast por las señales de tráfico son de confianza, esto es, están correctamente firmados y no utilizan pseudónimo.

En cambio, los vehículos sí necesitan incorporar esta información en el envío de sus mensajes. Este pseudónimo IDnode está formado por la concatenación de cuatro valores, a los cuales se le aplica la firma SKt.

El primer campo es un valor v aleatorio. El segundo es una marca temporal que indica cuándo se generó dicho pseudónimo. Y los otros dos campos son las dos claves públicas del nodo (PKSnode, PKEnode), utilizadas para firmar y cifrar, respectivamente. Mediante el uso del sello temporal, podemos determinar, si ésta es más antigua que un cierto tiempo preestablecido, si es o no un mensaje válido.

<a href=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/11/seg_02.png\"><img class=\"aligncenter size-full wp-image-163\" title=\"seg_02\" src=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/11/seg_02.png\" alt=\"\" width=\"332\" height=\"86\" /></a>

La tarjeta inteligente del vehículo contiene su Idnode actual y las claves secretas SKs,node ,
SKe,node .
Gracias a estos datos, cualquier mensaje enviado por un vehículo es válido si su Idnode es un pseudónimo válido, esto es, si IDnode no ha sido marcado como “revocado”. Para los mensajes “hello_beacon”, aparte del pseudónimo, se transmiten las coordenadas GPS actuales del vehículo, así como otros posibles datos, todo ello ﬁrmado con SKs,node :

<a href=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/11/seg_03.png\"><img class=\"aligncenter size-full wp-image-164\" title=\"seg_03\" src=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/11/seg_03.png\" alt=\"\" width=\"332\" height=\"86\" /></a>
<span style=\"text-decoration: underline;\">Obtención de un pseudónimo</span>

Cuando una señal recibe un mensaje “hello_beacon” que contiene un pseudónimo caducado, es decir, el sello temporal ha expirado, ésta avisa al propietario del mensaje a actualizar su Idnode.

Para ello, el nodo sigue los siguientes pasos:

1. Generación de dos parejas de claves:

</div>
<div style=\"text-align: justify;\">
<p dir=\"ltr\">(SKSnode’ , PKSnode’ ) (SKEnode’, PKEnode’ )</p>

</div>
<div style=\"text-align: justify;\">2. El nodo genera un nuevo pseudónimo</div>
<div style=\"text-align: justify;\"><a href=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/11/seg_04.png\"><img class=\"aligncenter size-full wp-image-165\" title=\"seg_04\" src=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/11/seg_04.png\" alt=\"\" width=\"332\" height=\"86\" /></a></div>
<div style=\"text-align: justify;\">*vRandom’, timeStamp’, PKSnode’ y PKEnode’ son valores nuevos, y firmados con SKt antigua.</div>
<div style=\"text-align: justify;\">

3. El nodo envía el siguiente mensaje cifrado a la señal de tráﬁco

<a href=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/11/seg_05.png\"><img class=\"aligncenter size-full wp-image-166\" title=\"seg_05\" src=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/11/seg_05.png\" alt=\"\" width=\"199\" height=\"77\" /></a>

</div>
<div style=\"text-align: justify;\">4. La señal de tráﬁco descifra el mensaje,veriﬁca su contenido (en particular se ase-
gura que Idnode no ha sido revocado por un mal comportamiento anterior) y genera el mensaje ﬁrmado:</div>
<div style=\"text-align: justify;\"><a href=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/11/seg_06.png\"><img class=\"aligncenter size-full wp-image-167\" title=\"seg_06\" src=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2011/11/seg_06.png\" alt=\"\" width=\"332\" height=\"86\" /></a></div>
<div>5. IDnode es enviado al vehículo cifrado bajo PKEnode’.6. El vehículo descifra el mensaje y obtiene su nuevo pseudónimo Idnode .
<p style=\"text-align: justify;\">&nbsp;</p>
<p style=\"text-align: justify;\">El sistema descrito trabaja bajo el supuesto de que cada vehículo lleva implantado de fábrica un identificador inicial. Éste identificador es firmado con SKt, pero no es un IDnode válido. Será después, cuando se comunique con una señal, cuando el pseudónimo será actualizado.</p>
<p style=\"text-align: justify;\"><span style=\"text-decoration: underline;\">Broadcast de mensajes coche-a-todos</span></p>
<p style=\"text-align: justify;\">Un usuario que quiere enviar una alerta a la red selecciona el mensaje a enviar, concatena el sello temporal y su pseudónimo y ﬁrma el mensaje entero utilizando su clave privada.</p>
<p style=\"text-align: justify;\">Un posible ejemplo de esta situación se daría cuando un coche, atrapado en un atasco, alerta a los coches cercanos sobre esta situación.
Al recibir el mensaje, los otros coches verifican la validez del pseudónimo. El mensaje se considera válido si el pseudónimo no ha sido revocado.
Las señales de tráﬁco tienen dos maneras de decidir si un usuario es deshonesto o no:</p>
<p style=\"text-align: justify;\">1. Se considera que un mensaje es falso si hay al menos i (parámetro de seguridad) mensajes de diferentes usuarios informando que un cierto mensaje es falso.</p>
<p style=\"text-align: justify;\">2. La segunda opción se basa en la posibilidad de que las señales de tráﬁco reciban información directamente de la autoridad de tráﬁco sobre situaciones peligrosas en la carretera. Un usuario que envíe información contradictoria con la fuente oﬁcial será considerado como deshonesto.</p>
<p style=\"text-align: justify;\">Una vez una señal detecta a un usuario deshonesto, notiﬁca a toda la red dicha situación mediante broadcast.</p>

</div>",
          "wp:post_id": "158",
          "wp:post_date": "2011-11-02 20:44:20",
          "wp:post_date_gmt": "2011-11-02 20:44:20",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "sacar-11-seguridad-en-redes-vanet-bajo-protocolo-802-15-4",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": [
            {
              "-domain": "category",
              "-nicename": "802-15-4",
              "#cdata-section": "802.15.4"
            },
            {
              "-domain": "category",
              "-nicename": "sacar",
              "#cdata-section": "sacar"
            },
            {
              "-domain": "category",
              "-nicename": "v2v",
              "#cdata-section": "v2v"
            },
            {
              "-domain": "category",
              "-nicename": "vanet",
              "#cdata-section": "vanet"
            }
          ],
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "Arduino - Google Calendar - Salas de reunión",
          "link": "http://eduardomarin.es/blog/?p=181",
          "pubDate": "Wed, 10 Oct 2012 05:48:10 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?p=181"
          },
          "content:encoded": "<p style=\"text-align: justify;\">La siguiente publicación resume el último proyecto arduino que he desarrollado para un cliente.</p>
<p style=\"text-align: justify;\">En breves palabras, el cliente dispone de diferentes salas de reunión que pueden ser reservadas a través de diferentes hojas situadas en las puertas de las mismas. El usuario de las salas se encuentra ante la problemática de tener que acercarse hasta la puerta para comprobar si está o no reservada la sala. En su interior, las personas que ocupan la misma pueden desconocer el tiempo disponible a ser consumido en la reunión.</p>
<p style=\"text-align: justify;\">El proyecto intenta dar solución a varias problemáticas aquí encontradas. Por una parte, se propone el uso de un servicio como Google Calendar para la gestión central y online de los eventos relacionados con la reserva de sala. De esta forma, podrán reservarse las mismas de forma cómoda desde cualquier punto a través de Internet. Por otro lado, mediante el dispositivo desarrollado, se ofrecerá información sobre el estado de la sala (libre u ocupada) así como el tiempo restante disponible, visible para los usuarios de la misma.</p>
<p style=\"text-align: center;\"><img class=\"aligncenter\" src=\"http://farm8.staticflickr.com/7253/7570234394_a1e7eea802_n.jpg\" alt=\"\" width=\"320\" height=\"297\" />
<img class=\"aligncenter\" src=\"http://farm8.staticflickr.com/7108/7570239970_df7798cc2c_n.jpg\" alt=\"\" width=\"320\" height=\"297\" />
<img class=\"aligncenter\" src=\"http://farm8.staticflickr.com/7113/7570226052_37f8e1f4e6.jpg\" alt=\"\" width=\"320\" height=\"213\" />
<img class=\"aligncenter\" src=\"http://farm8.staticflickr.com/7128/7570222732_55d7f69618_n.jpg\" alt=\"\" width=\"320\" height=\"213\" /></p>",
          "wp:post_id": "181",
          "wp:post_date": "2012-10-10 05:48:10",
          "wp:post_date_gmt": "2012-10-10 05:48:10",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "arduino-google-calendar-salas-de-reunion",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "sin-categoria",
            "#cdata-section": "Sin categoría"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "SACAR - Sistema de Alertas en Carretera",
          "link": "http://eduardomarin.es/blog/?p=186",
          "pubDate": "Tue, 09 Oct 2012 19:20:29 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?p=186"
          },
          "content:encoded": "Como documentación disponible sobre el proyecto SACAR
<p style=\"text-align: center;\">[slideshare id=14656378&amp;doc=pfc-121009141434-phpapp02&amp;type=d]</p>",
          "wp:post_id": "186",
          "wp:post_date": "2012-10-09 19:20:29",
          "wp:post_date_gmt": "2012-10-09 19:20:29",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "sacar-sistema-de-alertas-en-carretera",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "sin-categoria",
            "#cdata-section": "Sin categoría"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "Cachea tus funciones javascript",
          "link": "http://eduardomarin.es/blog/?p=196",
          "pubDate": "Thu, 10 Jan 2013 10:34:11 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?p=196"
          },
          "content:encoded": "Optimizar la ejecución de aplicaciones web es una de las prioridades a día de hoy para cualquier desarrollador front-end.

Una de las mejoras que podemos introducir dentro de funciones javascript que pueden realizar un cálculo repetitivo, costoso, y que posiblemente sus valores de retorno no varíen demasiado a lo largo del tiempo de ejecución es el cacheo del resultado mismo, valiéndonos de funciones asociativas que tomen como valor clave los parámetros de entrada a la misma.

A continuación vemos un ejemplo de uso:
<pre><code>&lt;script&gt;
  Benchmark.prototype.setup = function() {
    var cacheFunc = function(p_func, p_a) {
        if (!this.cache) {
          this.cache = {};
        }
        if (!this.cache[p_a]) {
          console.log(\"no cache value\");
          var returnValue = p_func(p_a);
          this.cache[p_a] = returnValue;
        }
        return this.cache[p_a];
        }

    function noCachedFunc(p_param) {
      var result = 0;
      for (i = 0; i &lt;= 100000; i++) {
        result = p_param ^ i;
      }
      return result;
    }
  };
&lt;/script&gt;</code></pre>
Y cómo costará mucho más una llamada a la función <em>noCachedFunc</em> que una llamada a la misma función pero cacheada.
<pre><code>console.log(noCachedFunc(2));
console.log(noCachedFunc(2));</code></pre>
<pre><code>console.log(cacheFunc(noCachedFunc, 2));
console.log(cacheFunc(noCachedFunc, 2));</code></pre>
Podéis ver el resultado del test <a href=\"http://jsperf.com/cache-function\">aquí</a>.

&nbsp;",
          "wp:post_id": "196",
          "wp:post_date": "2013-01-10 10:34:11",
          "wp:post_date_gmt": "2013-01-10 10:34:11",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "cachea-tus-funciones-javascript",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": [
            {
              "-domain": "category",
              "-nicename": "javascript",
              "#cdata-section": "javascript"
            },
            {
              "-domain": "category",
              "-nicename": "sin-categoria",
              "#cdata-section": "Sin categoría"
            }
          ],
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "Angular.js y Bootstrap",
          "link": "http://eduardomarin.es/blog/?p=205",
          "pubDate": "Fri, 01 Mar 2013 07:30:44 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?p=205"
          },
          "content:encoded": "<img class=\"alignnone\" style=\"vertical-align: middle; padding-top: 6px;\" title=\"AngularJS\" src=\"http://eduardomarin.es/emarin/angular/img/angular_logo.png\" alt=\"\" width=\"120\" height=\"31\" /> <img class=\"alignnone\" style=\"vertical-align: middle; padding-top: 6px;\" title=\"Bootstrap\" src=\"http://eduardomarin.es/emarin/angular/img/bootstrap_logo.png\" alt=\"\" width=\"120\" height=\"26\" /> <img class=\"alignnone\" style=\"padding-top: 2px; vertical-align: middle;\" title=\"Node.js\" src=\"http://eduardomarin.es/emarin/angular/img/nodejs_logo.jpg\" alt=\"\" width=\"120\" height=\"46\" />

Tras haber estado trabajando con diferentes web front-end frameworks, comienzo ahora a trabajar con un framework front auspiciado por Google, AngularJS, junto con diferentes frameworks de construcción de elementos básicos como Bootstrap.

Iré realizando ejercicios con explicaciones y ejemplos disponibles <a href=\"http://eduardomarin.es/emarin/angular/\">aquí</a>, con el código completo accesible en <a href=\"https://github.com/emarinizquierdo/angular\">github</a> o partes de código ejecutables directamente sobe <a href=\"http://jsfiddle.net/emarinizquierdo\">jsfiddle</a>

Mencionar que para realizar estos ejercicios uso node.js para levantar el servidor web.",
          "wp:post_id": "205",
          "wp:post_date": "2013-03-01 07:30:44",
          "wp:post_date_gmt": "2013-03-01 07:30:44",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "angular-js-y-bootstrap",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "sin-categoria",
            "#cdata-section": "Sin categoría"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "WebSockets y listado dinámico",
          "link": "http://eduardomarin.es/blog/?p=209",
          "pubDate": "Wed, 13 Mar 2013 15:57:12 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?p=209"
          },
          "content:encoded": "En esta <a href=\"http://eduardomarin.es/emarin/angular/#!/demos/01/demo/02\">demo</a>, realizaremos un ejercicio en el cuál utilizaremos un listado dinámico, dentro de una tabla, en el cuál los elementos a añadir son generados por el usuario.
<p style=\"text-align: left;\"><img class=\"aligncenter\" title=\"websocket\" src=\"http://www.codeproject.com/KB/IP/437342/websock1.jpg\" alt=\"\" width=\"468\" height=\"334\" />Se trata de algo simple, como concepto, pero añadiremos un grado de dificultad obteniendo los datos dinámicos no de un servicio común, si no de las últimas funcionalidades que ofrece HTML5, como son los websockets. Así, levantaremos un servicio en node.js que escuchará por posibles clientes que intenten abrir websockets hacia él. Una vez conectados, el servidor se mantendrá a la escucha de posibles mensajes recibidos por el cliente (o clientes). En este sentido, la lista será compartida por cada uno de los clientes que puedan conectarse. A la recepción de un mensaje, interpretado como un ítem en nuestro listado, será agregado al listado \"en la nube\" y difundido a los demás clientes. La recepción será tratada por todos y añadida mediante angular a través de su controlador. Añadiremos funcionalidad para borrado de ítems, distinguiendo entre diferentes tipos de mensajes, tanto de llegada al servidor, como al cliente.</p>",
          "wp:post_id": "209",
          "wp:post_date": "2013-03-13 15:57:12",
          "wp:post_date_gmt": "2013-03-13 15:57:12",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "websockets-y-listado-dinamico",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "sin-categoria",
            "#cdata-section": "Sin categoría"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "Carrusel de imágenes con AngularJS y Flickr",
          "link": "http://eduardomarin.es/blog/?p=212",
          "pubDate": "Fri, 22 Mar 2013 07:49:32 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?p=212"
          },
          "content:encoded": "En la <a href=\"http://eduardomarin.es/emarin/angular/#!/demos/01/demo/04\">siguiente demo</a> realizaremos un carrusel de imágenes mediante AngularJS que consumirá JSONP de la API de Flickr.

Mediante este ejemplo mostraremos, además, cómo trasladar el concepto de componente UI a los que podíamos estar acostumbrados al trabajar con otros frameworks (normalmente como objetos), y cómo poder traer ese concepto a AngularJS.
<p style=\"text-align: center;\"><a href=\"http://eduardomarin.es/emarin/angular/#!/demos/01/demo/04\"><img class=\"aligncenter size-full wp-image-213\" title=\"carousel\" src=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2013/03/carousel.jpg\" alt=\"\" width=\"497\" height=\"600\" /></a></p>",
          "wp:post_id": "212",
          "wp:post_date": "2013-03-22 07:49:32",
          "wp:post_date_gmt": "2013-03-22 07:49:32",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "carrusel-de-imagenes-con-angularjs-y-flickr",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "sin-categoria",
            "#cdata-section": "Sin categoría"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          },
          "wp:comment": {
            "wp:comment_id": "14",
            "wp:comment_author": "jose salamero",
            "wp:comment_author_email": "jose.salamero@gmail.com",
            "wp:comment_author_IP": "2.139.169.101",
            "wp:comment_date": "2013-03-26 12:37:05",
            "wp:comment_date_gmt": "2013-03-26 12:37:05",
            "wp:comment_content": "hola Edu , no había tenido oportunidad de ver algunos de tus trabajos pero , chapeau ¡¡¡¡
tienes unas fotos muy chulas.
un abrazo y see you soon
J",
            "wp:comment_approved": "1",
            "wp:comment_parent": "0",
            "wp:comment_user_id": "0"
          }
        },
        {
          "title": "Google Maps bajo Directive AngularJS",
          "link": "http://eduardomarin.es/blog/?p=219",
          "pubDate": "Wed, 22 May 2013 05:45:58 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?p=219"
          },
          "content:encoded": "En el <a style=\"font-size: 16px;\" href=\"http://eduardomarin.es/emarin/angular/#!/demos/01/demo/05\">siguiente ejemplo</a> bajo AngularjJS mostraremos una de las formas en las que podemos encapsular un elemento complejo, bajo una directiva Angular.
<div>
<div>

<a href=\"http://eduardomarin.es/emarin/angular/#!/demos/01/demo/05\"><img class=\"aligncenter size-full wp-image-221\" title=\"angularMap\" src=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2013/05/angularMap.jpg\" alt=\"\" width=\"720\" height=\"596\" /></a>

Este concepto es muy cercano al de UIs, donde podemos encerrar servicios, funcionalidad, vista, para, más tarde, utilizarlo mediante una librería a partir de una simple etiqueta encerrada como atributo (o no) en un elemento DOM.

</div>
</div>
&nbsp;",
          "wp:post_id": "219",
          "wp:post_date": "2013-05-22 05:45:58",
          "wp:post_date_gmt": "2013-05-22 05:45:58",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "google-maps-bajo-directive-angularjs",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "sin-categoria",
            "#cdata-section": "Sin categoría"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "Control PID para Péndulo Invertido AngularJS",
          "link": "http://eduardomarin.es/blog/?p=227",
          "pubDate": "Wed, 04 Sep 2013 07:04:19 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?p=227"
          },
          "content:encoded": "<p style=\"text-align: justify;\">En este ejemplo vamos a desarrollar, bajo una directiva, una demo completa del control PID de un Péndulo invertido.</p>
<a href=\"http://eduardomarin.es/emarin/angular/#!/demos/01/demo/06\"><img class=\"aligncenter size-full wp-image-228\" title=\"inverted_pendulum\" src=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2013/09/inverted_pendulum.jpg\" alt=\"\" width=\"719\" height=\"569\" /></a>
<p style=\"text-align: justify;\">Para ello, veamos primero a qué nos referimos con \"Péndulo Invertido\". Un péndulo invertido es un péndulo que tiene su centro de masa por encima de su eje o punto de giro. A menudo es implementado con dicho eje montado en un carro que puede moverse horizontalmente. Mientras que un péndulo normal es estático cuando cuelga hacia abajo, un péndulo invertido es intrínsecamente inestable y debe activarse un sistema de balanceo para compensar dicho defecto. Esto puede conseguirse activando una fuerza de giro o moviendo el eje en su horizontal.</p>
<p style=\"text-align: justify;\">El sistema que aquí mencionamos puede tratarse de un sistema de control borroso, neuronal, pid... En nuestro caso elegiremos el control PID debido a las características del escenario a ajustar.</p>
<p style=\"text-align: center;\"><a href=\"http://eduardomarin.es/emarin/angular/#!/demos/01/demo/06\"><img class=\"aligncenter\" src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/2/2d/PID.svg/500px-PID.svg.png\" alt=\"\" width=\"500\" height=\"208\" /></a></p>
Ver demo <a href=\"http://eduardomarin.es/emarin/angular/#!/demos/01/demo/06\">aquí</a>",
          "wp:post_id": "227",
          "wp:post_date": "2013-09-04 07:04:19",
          "wp:post_date_gmt": "2013-09-04 07:04:19",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "control-pid-para-pendulo-invertido-angularjs",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": {
            "-domain": "category",
            "-nicename": "sin-categoria",
            "#cdata-section": "Sin categoría"
          },
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        },
        {
          "title": "Sublime 3 como IDE para Arduino",
          "link": "http://eduardomarin.es/blog/?p=233",
          "pubDate": "Sat, 16 Nov 2013 09:48:35 +0000",
          "dc:creator": "edu",
          "guid": {
            "-isPermaLink": "false",
            "#text": "http://eduardomarin.es/?p=233"
          },
          "content:encoded": "Para aquellos que estamos acostumbrados a trabajar con un IDE de desarrollo ligero y versátil, como es Sublime Text, nos es muy útil pode utilizarlo en cualquier tipo de desarrollo, bien para proyectos web, móvil, o, por qué no, para la programación de microcontroladores.

En el caso de Arduino, podremos realizar nuestros proyectos bajo Sublime, instalándonos el plugin \"<a title=\"Stino\" href=\"https://github.com/Robot-Will/Stino\" target=\"_blank\">Stino</a>\" descargándolo y añadiéndolo al path de \"packages\" de nuestro usuario (my userpath to sublimepackages):

De esta forma, tendremos todas las opciones de menú del IDE de Arduino en Sublime. Podremos desarrollar y desplegar directamente desde aquí.

<img class=\"aligncenter size-full wp-image-234\" title=\"sublime_arduino\" src=\"http://eduardomarin-nefele.rhcloud.com/wp-content/uploads/2013/11/sublime_arduino.jpg\" alt=\"\" width=\"763\" height=\"674\" />",
          "wp:post_id": "233",
          "wp:post_date": "2013-11-16 09:48:35",
          "wp:post_date_gmt": "2013-11-16 09:48:35",
          "wp:comment_status": "open",
          "wp:ping_status": "open",
          "wp:post_name": "sublime-3-como-ide-para-arduino",
          "wp:status": "publish",
          "wp:post_parent": "0",
          "wp:menu_order": "0",
          "wp:post_type": "post",
          "wp:is_sticky": "0",
          "category": [
            {
              "-domain": "category",
              "-nicename": "arduino",
              "#cdata-section": "arduino"
            },
            {
              "-domain": "category",
              "-nicename": "sublime",
              "#cdata-section": "sublime"
            }
          ],
          "wp:postmeta": {
            "wp:meta_key": "_edit_last",
            "wp:meta_value": "1"
          }
        }
      ]
    }
  }
}